{"version":3,"file":"static/chunks/2293-64a09142559db429.js","mappings":"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","sources":["webpack://_N_E/./src/components/CommitButton.tsx","webpack://_N_E/./src/components/CurrencyInputPanel/ZapCheckbox.tsx","webpack://_N_E/./src/hooks/useTransactionDeadline.ts","webpack://_N_E/./src/hooks/useCurrentBlockTimestamp.ts","webpack://_N_E/./src/utils/calls/estimateGas.ts","webpack://_N_E/./src/utils/calls/farms.ts","webpack://_N_E/./src/utils/calls/pools.ts","webpack://_N_E/./src/utils/getLpSymbol.ts","webpack://_N_E/./src/utils/transactionErrorToUserReadableMessage.ts","webpack://_N_E/./src/views/AddLiquidity/components/ZapErrorMessage.tsx"],"sourcesContent":["import { Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useSwitchNetworkLoading } from 'hooks/useSwitchNetworkLoading'\nimport { useSetAtom } from 'jotai'\nimport { useActiveChainId } from 'hooks/useActiveChainId'\nimport { hideWrongNetworkModalAtom } from './NetworkModal'\nimport Trans from './Trans'\n\nconst wrongNetworkProps: ButtonProps = {\n  variant: 'danger',\n  disabled: false,\n  children: <Trans>Wrong Network</Trans>,\n}\n\nexport const CommitButton = (props: ButtonProps) => {\n  const { isWrongNetwork } = useActiveChainId()\n  const [switchNetworkLoading] = useSwitchNetworkLoading()\n  const setHideWrongNetwork = useSetAtom(hideWrongNetworkModalAtom)\n\n  return (\n    <Button\n      {...props}\n      onClick={(e) => {\n        if (isWrongNetwork) {\n          setHideWrongNetwork(false)\n        } else {\n          props.onClick?.(e)\n        }\n      }}\n      {...(switchNetworkLoading && { disabled: true })}\n      {...(isWrongNetwork && wrongNetworkProps)}\n    />\n  )\n}\n","import { Checkbox } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst ZapCheckBoxWrapper = styled.label`\n  display: grid;\n  place-content: center;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 8px 0px 0px 0px;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-right: none;\n  width: 40px;\n`\n\nexport const ZapCheckbox = (props) => {\n  return (\n    <ZapCheckBoxWrapper>\n      <Checkbox scale=\"sm\" {...props} />\n    </ZapCheckBoxWrapper>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import { Contract, PayableOverrides } from '@ethersproject/contracts'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { calculateGasMargin } from 'utils'\nimport { ContractMethodName, MaybeContract, ContractMethodParams } from 'utils/types'\n\n/**\n * Estimate the gas needed to call a function, and add a 10% margin\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const estimateGas = async <C extends Contract = Contract, N extends ContractMethodName<C> = any>(\n  contract: MaybeContract<C>,\n  methodName: N,\n  methodArgs: ContractMethodParams<C, N>,\n  overrides: PayableOverrides = {},\n  gasMarginPer10000: number,\n) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\n  }\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs, overrides)\n  // By convention, BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n  console.log(\"estimateGas\", gasMarginPer10000)\n  const gasEstimation = calculateGasMargin(rawGasEstimation, gasMarginPer10000)\n  return gasEstimation\n}\n\n/**\n * Perform a contract call with a gas value returned from estimateGas\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const callWithEstimateGas = async <C extends Contract = Contract, N extends ContractMethodName<C> = any>(\n  contract: MaybeContract<C>,\n  methodName: N,\n  methodArgs: ContractMethodParams<C, N>,\n  overrides: PayableOverrides = {},\n  gasMarginPer10000 = 1000,\n): Promise<TransactionResponse> => {\n  const gasEstimation = await estimateGas(contract, methodName, methodArgs, overrides, gasMarginPer10000)\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation,\n    ...overrides,\n  })\n  return tx\n}\n","import { Contract } from '@ethersproject/contracts'\nimport BigNumber from 'bignumber.js'\nimport { BOOSTED_FARM_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\n\nconst options = {\n  gasLimit: BOOSTED_FARM_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract: Contract, pid, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.deposit(pid, value)\n}\n\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n\n  return masterChefContract.emergencyWithdraw(pid)\n}\n\nexport const harvestFarm = async (masterChefContract, pid) => {\n  return masterChefContract.deposit(pid, '0')\n}\n\nexport const buy = async (presaleContract, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  return presaleContract.donate({ value })\n}\n\nexport const claim = async (presaleContract) => {\n  return presaleContract.claimTokens()\n}\n\nexport const lendX = async (lendXContract, pid) => {\n  return lendXContract.deposit(pid)\n}\n\nexport const zapTokenIn = async (zapContract, from, amount, to, routerAddr, recipient ) => {\n  return zapContract.zapInToken(from, new BigNumber(amount).toString(), to, routerAddr, recipient)\n}\n","/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js'\nimport poolsConfig from 'config/constants/pools'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from '../multicall'\nimport { bscRpcProvider } from '../providers'\nimport { getAddress } from '../addressHelpers'\n\n/**\n * Returns the total number of pools that were active at a given block\n */\nexport const getActivePools = async (block?: number) => {\n  const eligiblePools = poolsConfig\n    .filter((pool) => pool.sousId !== 0)\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n  const blockNumber = block || (await bscRpcProvider.getBlockNumber())\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress, 369),\n    name: 'startBlock',\n  }))\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress, 369),\n    name: 'bonusEndBlock',\n  }))\n  const [startBlocks, endBlocks] = await Promise.all([\n    multicall(sousChefV2, startBlockCalls),\n    multicall(sousChefV2, endBlockCalls),\n  ])\n\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\n\n    if (!startBlock || !endBlock) {\n      return accum\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum\n    }\n\n    return [...accum, poolCheck]\n  }, [])\n}\n","export const getLPSymbol = (token0Symbol: string, token1Symbol: string) => {\n  if (token0Symbol === 'WBNB') {\n    return `BNB-${token1Symbol} LP`\n  }\n  if (token0Symbol === 'WETH') {\n    return `ETH-${token1Symbol} LP`\n  }\n  if (token1Symbol === 'WBNB') {\n    return `${token0Symbol}-BNB LP`\n  }\n  if (token1Symbol === 'WETH') {\n    return `${token0Symbol}-ETH LP`\n  }\n  return `${token0Symbol}-${token1Symbol} LP`\n}\n","import { TranslateFunction } from '@pancakeswap/localization'\n\n/**\n * This is hacking out the revert reason from the ethers provider thrown error however it can.\n * This object seems to be undocumented by ethers.\n * @param error an error from the ethers provider\n * @param t Translation function\n */\nexport function transactionErrorToUserReadableMessage(error: any, t: TranslateFunction) {\n  let reason: string | undefined\n  while (error) {\n    reason = error.reason ?? error.data?.message ?? error.message ?? reason\n    // eslint-disable-next-line no-param-reassign\n    error = error.error ?? error.data?.originalError\n  }\n\n  if (reason?.indexOf('execution reverted: ') === 0) reason = reason.substring('execution reverted: '.length)\n\n  switch (reason) {\n    case 'PancakeRouter: EXPIRED':\n      return t(\n        'The transaction could not be sent because the deadline has passed. Please check that your transaction deadline is not too low.',\n      )\n    case 'PancakeRouter: INSUFFICIENT_OUTPUT_AMOUNT':\n    case 'PancakeRouter: EXCESSIVE_INPUT_AMOUNT':\n    case 'PancakeRouter: INSUFFICIENT_A_AMOUNT':\n    case 'PancakeRouter: INSUFFICIENT_B_AMOUNT':\n      return t(\n        'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.',\n      )\n    case 'TransferHelper: TRANSFER_FROM_FAILED':\n      return t('The input token cannot be transferred. There may be an issue with the input token.')\n    case 'Pancake: TRANSFER_FAILED':\n      return t('The output token cannot be transferred. There may be an issue with the output token.')\n    default:\n      if (reason?.indexOf('undefined is not an object') !== -1) {\n        console.error(error, reason)\n        return t(\n          'An error occurred when trying to execute this operation. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading.',\n        )\n      }\n      return t('Unknown error%reason%. Try increasing your slippage tolerance.', {\n        reason: reason ? `: \"${reason}\"` : '',\n      })\n  }\n}\n","import { memo } from 'react'\nimport { Message, MessageText, Button, Box, Flex, useToast } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ZapErrorMessagesProps {\n  isSingleToken: boolean\n  zapMode: boolean\n  toggleZapMode: (zapMode: boolean) => void\n  onModalDismiss: () => void\n}\n\nexport const ZapErrorMessages: React.FC<React.PropsWithChildren<ZapErrorMessagesProps>> = memo(\n  ({ isSingleToken, zapMode, toggleZapMode, onModalDismiss }) => {\n    const { t } = useTranslation()\n    const { toastInfo } = useToast()\n\n    const handleCloseButton = () => {\n      onModalDismiss()\n\n      if (zapMode) {\n        toggleZapMode(!zapMode)\n        toastInfo(t('Info'), t('Temporarily disabled Zap'))\n      }\n    }\n\n    return (\n      <Box margin=\"auto\" width={['100%', '100%', '380px']}>\n        <Message variant=\"warning\" mb=\"16px\">\n          <Flex flexDirection=\"column\">\n            <MessageText bold>{t('Currently using Zap for liquidity provisions.')}</MessageText>\n            <MessageText small>\n              {isSingleToken\n                ? t('Zap does NOT support tokens with fees on transfers. If you experience any issues, click')\n                : t(\n                    `Zap does NOT support tokens with fees on transfers. Please choose ’Don't convert’ and retry. If you experience any further issues, click`,\n                  )}\n              <Button p=\"0 4px\" scale=\"sm\" variant=\"text\" height=\"auto\" onClick={handleCloseButton}>\n                {t('here')}\n              </Button>\n              {t('to disable Zap temporarily.')}\n            </MessageText>\n          </Flex>\n        </Message>\n      </Box>\n    )\n  },\n)\n"],"names":["wrongNetworkProps","variant","disabled","children","Trans","CommitButton","props","useActiveChainId","isWrongNetwork","switchNetworkLoading","useSwitchNetworkLoading","setHideWrongNetwork","useSetAtom","hideWrongNetworkModalAtom","Button","onClick","e","ZapCheckBoxWrapper","styled","theme","colors","background","cardBorder","ZapCheckbox","Checkbox","scale","useTransactionDeadline","ttl","useSelector","state","user","userDeadline","blockTimestamp","useSingleCallResult","multicall","useMulticallContract","result","useCurrentBlockTimestamp","useMemo","add","estimateGas","contract","methodName","methodArgs","overrides","gasMarginPer10000","rawGasEstimation","Error","address","console","log","calculateGasMargin","callWithEstimateGas","gasEstimation","gasLimit","stakeFarm","BOOSTED_FARM_GAS_LIMIT","masterChefContract","pid","amount","value","BigNumber","times","DEFAULT_TOKEN_DECIMAL","toString","deposit","unstakeFarm","emergencyWithdraw","harvestFarm","buy","presaleContract","donate","claim","claimTokens","lendX","lendXContract","zapTokenIn","zapContract","from","to","routerAddr","recipient","zapInToken","block","eligiblePools","blockNumber","startBlockCalls","endBlockCalls","startBlocks","endBlocks","poolsConfig","pool","sousId","filter","isFinished","undefined","bscRpcProvider","map","contractAddress","getAddress","name","Promise","all","sousChefV2","reduce","accum","poolCheck","index","startBlock","endBlock","gte","lte","getLPSymbol","token0Symbol","token1Symbol","transactionErrorToUserReadableMessage","error","t","reason","data","message","originalError","indexOf","substring","length","ZapErrorMessages","memo","isSingleToken","zapMode","toggleZapMode","onModalDismiss","useTranslation","useToast","toastInfo","Box","margin","width","Message","mb","Flex","flexDirection","MessageText","bold","small","p","height"],"sourceRoot":""}