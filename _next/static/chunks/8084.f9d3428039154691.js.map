{"version":3,"file":"static/chunks/8084.f9d3428039154691.js","mappings":"8GAwC+F,E,2IAvBzFA,EAAe,Y,IAAGC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aActD,OAbAC,EAAAA,EAAAA,YAAU,WACRF,EAAcD,EAAQI,OACtBF,EACEF,EAAQK,KAAKC,eAAeP,EAAQ,CAClCQ,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,eAGX,CAACZ,EAAQC,EAAQI,MAAOJ,EAAQK,KAAMJ,EAAeC,IAEjD,MASHU,GAAyF,EAiB9F,IAhBC,OAD6F,EAC5FC,EAAAA,EAAAA,IAA6B,CAC5BH,KAAM,UACNC,OAAQ,aAEV,OAL6F,EAK5FE,EAAAA,EAAAA,KAA8B,CAC7BL,MAAO,QACPC,IAAK,aAEP,OAT6F,EAS5FI,EAAAA,EAAAA,MAA+B,CAC9BL,MAAO,QACPC,IAAK,aAEP,OAb6F,EAa5FI,EAAAA,EAAAA,KAA8B,CAC7BL,MAAO,QACPC,IAAK,YAfsF,GAgF/F,UA1DkB,Y,IAAGK,EAAI,EAAJA,KAAMb,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aAAca,EAAgB,EAAhBA,iBAAkBC,EAAU,EAAVA,WAEtEC,GACEC,EAAAA,EAAAA,MADFD,gBAAmBlB,OAEf,GAAYoB,EAAAA,EAAAA,MAAVC,MACFC,EAjCe,YACrB,OADwC,EAAhBN,iBAEpB,CAAEO,UAAW,UAAWC,UAAW,UAAWC,OAAQ,WACtD,CAAEF,UAAW,UAAWC,UAAW,UAAWC,OAAQ,YA8B3CC,CAAe,CAAEV,iBAAAA,IAC1BW,EAAiBd,EAA2BI,GAElD,OAAKF,GAAwB,IAAhBA,EAAKa,QAIhB,SAACC,EAAAA,EAAmB,C,UAClB,UAACC,EAAAA,EAAS,CACRf,KAAMA,EACNgB,OAAQ,CACNC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,OAAQ,GAEVC,aAAc,WACRjC,GAAcA,OAAakC,GAC3BnC,GAAeA,OAAcmC,I,WAGnC,SAACC,OAAI,C,UACH,UAACC,iBAAc,CAACC,GAAG,WAAWC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,I,WACpD,SAACC,OAAI,CAACC,OAAO,KAAKC,UAAWzB,EAAOC,UAAWyB,YAAa,OAC5D,SAACH,OAAI,CAACC,OAAO,OAAOC,UAAWzB,EAAOE,UAAWwB,YAAa,UAGlE,SAACC,EAAAA,EAAK,CACJC,QAAQ,OACRC,UAAU,EACVC,UAAU,EACVC,cAAe,SAAC/C,G,OAASA,EAAKC,eAAeP,EAAQ2B,IACrD2B,WAAY,KAEd,SAACC,EAAAA,EAAK,CAACL,QAAQ,QAAQC,UAAU,EAAOC,UAAU,EAAOI,OAAQ,CAAC,OAAQ,QAASC,MAAI,KACvF,SAACC,EAAAA,EAAO,CACNC,OAAQ,CAAElC,OAAQJ,EAAMC,OAAOsC,cAC/BC,aAAc,CAAEC,QAAS,QACzBC,UAAW,SAACC,EAAcC,EAAMC,G,OAC9B,SAACnE,EAAY,CACXC,OAAQA,EACRC,QAASiE,EAAMjE,QACfC,cAAeA,EACfC,aAAcA,QAIpB,SAACgE,EAAAA,EAAI,CAACjB,QAAQ,QAAQkB,KAAK,SAAS3C,OAAQH,EAAOG,OAAQ4C,KAAK,iBAAiBC,YAAa,UA3C3F,SAACC,EAAAA,GAAe","sources":["webpack://_N_E/./src/views/Swap/components/Chart/SwapLineChart.tsx"],"sourcesContent":["import { useEffect, Dispatch, SetStateAction } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\nimport { PairDataTimeWindowEnum } from 'state/swap/types'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type SwapLineChartProps = {\n  data: any[]\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n  isChangePositive: boolean\n  timeWindow: PairDataTimeWindowEnum\n} & React.HTMLAttributes<HTMLDivElement>\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(\n      payload.time.toLocaleString(locale, {\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n      }),\n    )\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\nconst getChartColors = ({ isChangePositive }) => {\n  return isChangePositive\n    ? { gradient1: '#00E7B0', gradient2: '#0C8B6C', stroke: '#31D0AA' }\n    : { gradient1: '#ED4B9E', gradient2: '#ED4B9E', stroke: '#ED4B9E ' }\n}\n\nconst dateFormattingByTimewindow: Record<PairDataTimeWindowEnum, Intl.DateTimeFormatOptions> = {\n  [PairDataTimeWindowEnum.DAY]: {\n    hour: '2-digit',\n    minute: '2-digit',\n  },\n  [PairDataTimeWindowEnum.WEEK]: {\n    month: 'short',\n    day: '2-digit',\n  },\n  [PairDataTimeWindowEnum.MONTH]: {\n    month: 'short',\n    day: '2-digit',\n  },\n  [PairDataTimeWindowEnum.YEAR]: {\n    month: 'short',\n    day: '2-digit',\n  },\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst LineChart = ({ data, setHoverValue, setHoverDate, isChangePositive, timeWindow }: SwapLineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  const colors = getChartColors({ isChangePositive })\n  const dateFormatting = dateFormattingByTimewindow[timeWindow]\n\n  if (!data || data.length === 0) {\n    return <LineChartLoader />\n  }\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 0,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          if (setHoverDate) setHoverDate(undefined)\n          if (setHoverValue) setHoverValue(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={colors.gradient1} stopOpacity={0.34} />\n            <stop offset=\"100%\" stopColor={colors.gradient2} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleString(locale, dateFormatting)}\n          minTickGap={8}\n        />\n        <YAxis dataKey=\"value\" axisLine={false} tickLine={false} domain={['auto', 'auto']} hide />\n        <Tooltip\n          cursor={{ stroke: theme.colors.textDisabled }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Area dataKey=\"value\" type=\"linear\" stroke={colors.stroke} fill=\"url(#gradient)\" strokeWidth={2} />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChart\n"],"names":["HoverUpdater","locale","payload","setHoverValue","setHoverDate","useEffect","value","time","toLocaleString","year","month","day","hour","minute","dateFormattingByTimewindow","PairDataTimeWindowEnum","data","isChangePositive","timeWindow","currentLanguage","useTranslation","useTheme","theme","colors","gradient1","gradient2","stroke","getChartColors","dateFormatting","length","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","onMouseLeave","undefined","defs","linearGradient","id","x1","y1","x2","y2","stop","offset","stopColor","stopOpacity","XAxis","dataKey","axisLine","tickLine","tickFormatter","minTickGap","YAxis","domain","hide","Tooltip","cursor","textDisabled","contentStyle","display","formatter","tooltipValue","name","props","Area","type","fill","strokeWidth","LineChartLoader"],"sourceRoot":""}