{"version":3,"file":"static/chunks/1465-0a38694ff5cd2236.js","mappings":"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","sources":["webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ArrowUpDown.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/AutoRenew.tsx","webpack://_N_E/./src/components/ImportTokenWarningModal.tsx","webpack://_N_E/./src/components/Menu/Footer.tsx","webpack://_N_E/./src/state/limitOrders/hooks.ts","webpack://_N_E/./src/utils/maxAmountSpend.ts","webpack://_N_E/./src/views/LimitOrders/utils/getPriceForOneToken.ts"],"sourcesContent":["import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport Svg from \"../Svg\";\nvar Icon = function(props) {\n    return /*#__PURE__*/ _jsx(Svg, _object_spread_props(_object_spread({\n        viewBox: \"0 0 24 24\"\n    }, props), {\n        children: /*#__PURE__*/ _jsx(\"path\", {\n            d: \"M16 17.01V11c0-.55-.45-1-1-1s-1 .45-1 1v6.01h-1.79c-.45 0-.67.54-.35.85l2.79 2.78c.2.19.51.19.71 0l2.79-2.78c.32-.31.09-.85-.35-.85H16zM8.65 3.35L5.86 6.14c-.32.31-.1.85.35.85H8V13c0 .55.45 1 1 1s1-.45 1-1V6.99h1.79c.45 0 .67-.54.35-.85L9.35 3.35a.501.501 0 00-.7 0z\"\n        })\n    }));\n};\nexport default Icon;\n","import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport Svg from \"../Svg\";\nvar Icon = function(props) {\n    return /*#__PURE__*/ _jsx(Svg, _object_spread_props(_object_spread({\n        viewBox: \"0 0 24 24\"\n    }, props), {\n        children: /*#__PURE__*/ _jsx(\"path\", {\n            d: \"M12 6V7.79C12 8.24 12.54 8.46 12.85 8.14L15.64 5.35C15.84 5.15 15.84 4.84 15.64 4.64L12.85 1.85C12.54 1.54 12 1.76 12 2.21V4C7.58 4 4 7.58 4 12C4 13.04 4.2 14.04 4.57 14.95C4.84 15.62 5.7 15.8 6.21 15.29C6.48 15.02 6.59 14.61 6.44 14.25C6.15 13.56 6 12.79 6 12C6 8.69 8.69 6 12 6ZM17.79 8.71C17.52 8.98 17.41 9.4 17.56 9.75C17.84 10.45 18 11.21 18 12C18 15.31 15.31 18 12 18V16.21C12 15.76 11.46 15.54 11.15 15.86L8.36 18.65C8.16 18.85 8.16 19.16 8.36 19.36L11.15 22.15C11.46 22.46 12 22.24 12 21.8V20C16.42 20 20 16.42 20 12C20 10.96 19.8 9.96 19.43 9.05C19.16 8.38 18.3 8.2 17.79 8.71Z\"\n        })\n    }));\n};\nexport default Icon;\n","import { Token } from '@pancakeswap/sdk'\nimport { Modal, Box, InjectedModalProps } from '@pancakeswap/uikit'\nimport ImportToken from 'components/SearchModal/ImportToken'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface Props extends InjectedModalProps {\n  tokens: Token[]\n  onCancel: () => void\n}\n\nconst ImportTokenWarningModal: React.FC<React.PropsWithChildren<Props>> = ({ tokens, onDismiss, onCancel }) => {\n  const { t } = useTranslation()\n  return (\n    <Modal\n      title={t('Import Token')}\n      onDismiss={() => {\n        onDismiss?.()\n        onCancel()\n      }}\n    >\n      <Box maxWidth=\"380px\">\n        <ImportToken tokens={tokens} handleCurrencySelect={onDismiss} />\n      </Box>\n    </Modal>\n  )\n}\n\nexport default ImportTokenWarningModal\n","import { memo } from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem, LinkExternal, Flex, Svg, Image, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { EXCHANGE_DOCS_URLS } from 'config/constants'\n\nconst Wrapper = memo(styled.div<{ $isSide: boolean }>`\n  width: 100%;\n  height: ${({ $isSide }) => ($isSide ? '100%' : 'auto')};\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-items: center;\n  padding-top: 16px;\n  padding-right: ${({ $isSide }) => ($isSide ? '32px' : '0px')};\n  ${({ theme }) => theme.mediaQueries.md} {\n    justify-content: space-between;\n    flex-direction: ${({ $isSide }) => ($isSide ? 'column' : 'row')};\n  }\n`)\n\nconst BubbleWrapper = styled(Flex)`\n  svg {\n    fill: ${({ theme }) => theme.colors.textSubtle};\n    transition: background-color 0.2s, opacity 0.2s;\n  }\n  &:hover {\n    svg {\n      opacity: 0.65;\n    }\n  }\n  &:active {\n    svg {\n      opacity: 0.85;\n    }\n  }\n`\n\ntype FooterVariant = 'default' | 'side'\n\nconst Footer: React.FC<React.PropsWithChildren<{ variant?: FooterVariant; helpUrl?: string }>> = ({\n  variant = 'default',\n  helpUrl = EXCHANGE_DOCS_URLS,\n}) => {\n  const { t } = useTranslation()\n  const isSide = variant === 'side'\n  return (\n    <Wrapper $isSide={isSide}>\n      <Flex flexDirection={isSide ? 'column' : ['column', 'column', 'row']} alignItems=\"center\">\n        <ButtonMenu variant=\"subtle\" scale=\"sm\" activeIndex={0}>\n          <ButtonMenuItem>V2</ButtonMenuItem>\n          <ButtonMenuItem as=\"a\" href=\"https://v1exchange.defipower.com/#/\">\n            {t('V1 (old)')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n        <LinkExternal\n          id=\"ercBridge\"\n          href=\"https://docs.binance.org/smart-chain/guides/cross-chain.html\"\n          ml={[0, 0, '40px']}\n          mt={['20px', '20px', isSide ? '20px' : 0]}\n          mb={['8px', '8px', 0]}\n        >\n          {t('Convert ERC-20 to BEP-20')}\n        </LinkExternal>\n      </Flex>\n      {isSide && <Flex flexGrow={1} />}\n      <Flex\n        flexGrow={isSide ? 0 : 1}\n        alignItems=\"center\"\n        width={['100%', '100%', '100%', isSide ? '100%' : 'auto']}\n        justifyContent={['center', 'center', 'center', 'flex-end']}\n      >\n        <BubbleWrapper>\n          <Button id=\"clickExchangeHelp\" as=\"a\" external href={helpUrl} variant=\"subtle\">\n            {t('Need help ?')}\n          </Button>\n          <Svg viewBox=\"0 0 16 16\">\n            <path d=\"M0 16V0C0 0 3 1 6 1C9 1 16 -2 16 3.5C16 10.5 7.5 16 0 16Z\" />\n          </Svg>\n        </BubbleWrapper>\n        <Image src=\"/images/help.png\" alt=\"Get some help\" width={160} height={108} />\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default memo(Footer)\n","import JSBI from 'jsbi'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ParsedUrlQuery } from 'querystring'\nimport { Currency, CurrencyAmount, Trade, Token, Price, Native, TradeType } from '@pancakeswap/sdk'\nimport { useState, useEffect, useCallback, useMemo } from 'react'\nimport { DEFAULT_INPUT_CURRENCY, DEFAULT_OUTPUT_CURRENCY, BIG_INT_TEN } from 'config/constants/exchange'\nimport { useRouter } from 'next/router'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\nimport getPriceForOneToken from 'views/LimitOrders/utils/getPriceForOneToken'\nimport { isAddress } from 'utils'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { replaceLimitOrdersState, selectCurrency, setRateType, switchCurrencies, typeInput } from './actions'\nimport { Field, Rate, OrderState } from './types'\nimport { AppState, useAppDispatch } from '..'\n\n// Get desired input amount in output basis mode\nconst getDesiredInput = (\n  outputValue: string,\n  exchangeRate: string,\n  inputCurrency: Currency,\n  outputCurrency: Currency,\n  isInverted: boolean,\n) => {\n  if (!outputValue || !inputCurrency || !outputCurrency) {\n    return undefined\n  }\n  const parsedOutAmount = tryParseAmount(outputValue, isInverted ? inputCurrency : outputCurrency)\n  const parsedExchangeRate = tryParseAmount(exchangeRate, isInverted ? inputCurrency : outputCurrency)\n  if (!parsedOutAmount || !parsedExchangeRate) {\n    return undefined\n  }\n\n  if (isInverted) {\n    const invertedResultAsFraction = parsedOutAmount\n      .multiply(parsedExchangeRate.asFraction)\n      .multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals)))\n    const invertedResultAsAmount = CurrencyAmount.fromRawAmount(inputCurrency, invertedResultAsFraction.toFixed(0))\n\n    return invertedResultAsAmount\n  }\n  const resultAsFraction = parsedOutAmount\n    .divide(parsedExchangeRate.asFraction)\n    .multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals)))\n\n  return CurrencyAmount.fromRawAmount(inputCurrency, resultAsFraction.quotient.toString())\n}\n\n// Get desired output amount in input basis mode\nconst getDesiredOutput = (\n  inputValue: string,\n  exchangeRate: string,\n  inputCurrency: Currency,\n  outputCurrency: Currency,\n  isInverted: boolean,\n): CurrencyAmount<Native | Token> | undefined => {\n  if (!inputValue || !inputCurrency || !outputCurrency) {\n    return undefined\n  }\n  const parsedInputAmount = tryParseAmount(inputValue, isInverted ? outputCurrency : inputCurrency)\n  const parsedExchangeRate = tryParseAmount(exchangeRate, isInverted ? inputCurrency : outputCurrency)\n\n  if (!parsedExchangeRate || !parsedInputAmount) {\n    return undefined\n  }\n\n  if (isInverted) {\n    const invertedResultAsFraction = parsedInputAmount\n      .multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals)))\n      .divide(parsedExchangeRate.asFraction)\n    return CurrencyAmount.fromRawAmount(outputCurrency, invertedResultAsFraction.quotient)\n  }\n\n  const resultAsFraction = parsedInputAmount\n    .divide(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals)))\n    .multiply(parsedExchangeRate.asFraction)\n\n  return CurrencyAmount.fromRawAmount(outputCurrency, resultAsFraction.quotient.toString())\n}\n\n// Just returns Redux state for limitOrders\nexport const useOrderState = (): AppState['limitOrders'] => {\n  return useSelector<AppState, AppState['limitOrders']>((state) => state.limitOrders)\n}\n\n// Returns handlers to change user-defined parts of limitOrders state\nexport const useOrderActionHandlers = (): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRateType: (rateType: Rate) => void\n} => {\n  const dispatch = useDispatch()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency.isToken ? currency.address : currency.isNative ? 'BNB' : '',\n        }),\n      )\n    },\n    [dispatch],\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  const onChangeRateType = useCallback(\n    (rateType: Rate) => {\n      dispatch(setRateType({ rateType }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRateType,\n  }\n}\n\nexport interface DerivedOrderInfo {\n  currencies: { input: Currency | Token | undefined; output: Currency | Token | undefined }\n  currencyBalances: {\n    input: CurrencyAmount<Currency> | undefined\n    output: CurrencyAmount<Currency> | undefined\n  }\n  inputError?: string\n  trade: Trade<Currency, Currency, TradeType> | undefined\n  parsedAmounts: {\n    input: CurrencyAmount<Currency> | undefined\n    output: CurrencyAmount<Currency> | undefined\n  }\n  formattedAmounts: {\n    input: string\n    output: string\n    price: string\n  }\n  rawAmounts: {\n    input: string | undefined\n    output: string | undefined\n  }\n  price: Price<Currency, Currency> | undefined\n  wrappedCurrencies: {\n    input: Token\n    output: Token\n  }\n  singleTokenPrice: {\n    [key: string]: number\n  }\n  currencyIds: {\n    input: string\n    output: string\n  }\n}\n\nconst getErrorMessage = (\n  account: string,\n  wrappedCurrencies: {\n    input: Token\n    output: Token\n  },\n  currencies: { input: Currency | Token; output: Currency | Token },\n  currencyBalances: { input: CurrencyAmount<Currency>; output: CurrencyAmount<Currency> },\n  parsedAmounts: { input: CurrencyAmount<Currency>; output: CurrencyAmount<Currency> },\n  trade: Trade<Currency, Currency, TradeType>,\n  price: Price<Currency, Currency>,\n  rateType: Rate,\n  t: any,\n) => {\n  if (!account) {\n    return t('Connect Wallet')\n  }\n  if (\n    wrappedCurrencies.input &&\n    wrappedCurrencies.output &&\n    wrappedCurrencies.input.address.toLowerCase() === wrappedCurrencies.output.address.toLowerCase()\n  ) {\n    return t('Order not allowed')\n  }\n  const hasBothTokensSelected = currencies.input && currencies.output\n  if (!hasBothTokensSelected) {\n    return t('Select a token')\n  }\n  const hasAtLeastOneParsedAmount = parsedAmounts.input || parsedAmounts.output\n\n  const tradeIsNotAvailable = !trade || !trade?.route\n  if (hasAtLeastOneParsedAmount && tradeIsNotAvailable) {\n    return t('Insufficient liquidity for this trade.')\n  }\n  const someParsedAmountIsMissing = !parsedAmounts.input || !parsedAmounts.output\n  if (someParsedAmountIsMissing) {\n    return t('Enter an amount')\n  }\n  if (currencyBalances.input && currencyBalances.input.lessThan(parsedAmounts.input)) {\n    return t(`Insufficient %symbol% balance`, { symbol: currencyBalances.input.currency.symbol })\n  }\n\n  if (price) {\n    if (\n      rateType === Rate.MUL &&\n      (price.lessThan(trade.executionPrice.asFraction) || price.equalTo(trade.executionPrice.asFraction))\n    ) {\n      return t('Only possible to place sell orders above market rate')\n    }\n    if (\n      rateType === Rate.DIV &&\n      (price.invert().greaterThan(trade.executionPrice.invert().asFraction) ||\n        price.invert().equalTo(trade.executionPrice.invert().asFraction))\n    ) {\n      return t('Only possible to place buy orders below market rate')\n    }\n  }\n\n  return undefined\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport const useDerivedOrderInfo = (): DerivedOrderInfo => {\n  const { account, chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const {\n    independentField,\n    basisField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    rateType,\n    inputValue,\n    outputValue,\n  } = useOrderState()\n\n  // Get Currency objects based on currencyId strings\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const currencies = useMemo(\n    () => ({\n      input: inputCurrency ?? undefined,\n      output: outputCurrency ?? undefined,\n    }),\n    [inputCurrency, outputCurrency],\n  )\n\n  const wrappedCurrencies = useMemo(\n    () => ({\n      input: wrappedCurrency(currencies.input, chainId),\n      output: wrappedCurrency(currencies.output, chainId),\n    }),\n    [currencies.input, currencies.output, chainId],\n  )\n\n  // Get user balance for selected Currencies\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n  const currencyBalances = {\n    input: relevantTokenBalances[0],\n    output: relevantTokenBalances[1],\n  }\n\n  // Get CurrencyAmount for the inputCurrency amount specified by user\n  const inputAmount = useMemo(() => {\n    return tryParseAmount(inputValue, inputCurrency ?? undefined)\n  }, [inputValue, inputCurrency])\n\n  // Get CurrencyAmount for the outputCurrency amount specified by user\n  const outputAmount = useMemo(() => {\n    return tryParseAmount(outputValue, outputCurrency ?? undefined)\n  }, [outputValue, outputCurrency])\n\n  // Whether user modified the INPUT field most recently (also default initial state)\n  const isExactIn = independentField === Field.INPUT\n  // Whether to base calculations on output field\n  const isOutputBasis = basisField === Field.OUTPUT\n  // Whether user modified the PRICE field most recently\n  const isDesiredRateUpdate = independentField === Field.PRICE\n\n  // Get the amount of outputCurrency you'd receive at the desired price\n  const desiredOutputAsCurrencyAmount = isDesiredRateUpdate\n    ? getDesiredOutput(inputValue, typedValue, inputCurrency, outputCurrency, rateType === Rate.DIV)\n    : undefined\n\n  const desiredInputAsCurrencyAmount = isDesiredRateUpdate\n    ? getDesiredInput(outputValue, typedValue, inputCurrency, outputCurrency, rateType === Rate.DIV)\n    : undefined\n\n  // Convert output to string representation to parse later\n  const desiredOutputAsString =\n    isDesiredRateUpdate && desiredOutputAsCurrencyAmount ? desiredOutputAsCurrencyAmount?.toSignificant(6) : typedValue\n\n  // If independentField === Field.PRICE -> this won't be used\n  const parsedTypedAmount = !isDesiredRateUpdate\n    ? tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n    : undefined\n\n  // If not price - cast input or output typing to CurrencyAmount\n  // if price - whatever amount of tokens received on the desired price\n  const tradeAmount = isDesiredRateUpdate\n    ? isOutputBasis\n      ? outputAmount\n      : tryParseAmount(desiredOutputAsString, outputCurrency)\n    : tryParseAmount(typedValue, isExactIn ? inputCurrency : outputCurrency)\n\n  // Get trade object\n  // gonna be null if not isExactIn or if there is no outputCurrency selected\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? tradeAmount : undefined, outputCurrency)\n  // Works similarly to swap when you modify outputCurrency\n  // But also is used when desired rate is modified\n  // in other words it looks for a trade of inputCurrency for whatever the amount of tokens would be at desired rate\n  const bestTradeExactOut = useTradeExactOut(inputCurrency, !isExactIn || isOutputBasis ? tradeAmount : undefined)\n  const trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  // Get swap price for single token disregarding slippage and price impact\n  // needed for chart's latest value\n  const oneInputToken = tryParseAmount('1', currencies.input)\n  const singleTokenTrade = useTradeExactIn(oneInputToken, currencies.output)\n  const singleTokenPrice = parseFloat(singleTokenTrade?.executionPrice?.toSignificant(6))\n  const inverseSingleTokenPrice = 1 / singleTokenPrice\n\n  // Get \"final\" amounts\n  const parsedAmounts = useMemo(() => {\n    // Use trade amount as default\n    let input = trade?.inputAmount\n    if (!isOutputBasis) {\n      // If we're not in output basis mode then we're in input basis mode\n      // hence - no matter what keep input as specified by user\n      input = inputAmount\n    } else if (independentField === Field.INPUT) {\n      // If user touching input field -> whatever they type currently\n      input = parsedTypedAmount\n    } else if (isDesiredRateUpdate) {\n      // If user modifies the price AND is wishing for specific output amount -> hypothetical input amount at better price\n      input = desiredInputAsCurrencyAmount\n    }\n    // Use trade amount as default\n    // If we're in output basis mode - no matter what keep output as specified by user\n    let output: CurrencyAmount<Currency>\n    if (isOutputBasis) {\n      output = outputAmount\n    } else if (independentField === Field.OUTPUT) {\n      // If user touching input field -> whatever they type currently\n      output = parsedTypedAmount\n    } else if (isDesiredRateUpdate) {\n      // If user modifies the price AND is wishing for specific input amount -> hypothetical input amount at better price\n      output = desiredOutputAsCurrencyAmount\n    } else {\n      output = trade?.outputAmount\n    }\n    return {\n      input,\n      output,\n    }\n  }, [\n    independentField,\n    parsedTypedAmount,\n    inputAmount,\n    outputAmount,\n    trade,\n    isDesiredRateUpdate,\n    isOutputBasis,\n    desiredInputAsCurrencyAmount,\n    desiredOutputAsCurrencyAmount,\n  ])\n\n  // Calculate the price for specified swap\n  const price = useMemo(\n    () => getPriceForOneToken(parsedAmounts.input, parsedAmounts.output),\n    [parsedAmounts.input, parsedAmounts.output],\n  )\n\n  // Formatted amounts to use in the UI\n  const formattedAmounts = {\n    input: !isOutputBasis && inputValue && inputValue !== '' ? inputValue : parsedAmounts.input?.toSignificant(6) ?? '',\n    output:\n      isOutputBasis && outputValue && outputValue !== '' ? outputValue : parsedAmounts.output?.toSignificant(6) ?? '',\n    price:\n      independentField === Field.PRICE\n        ? typedValue\n        : rateType === Rate.MUL\n        ? price?.toSignificant(6) ?? ''\n        : price?.invert().toSignificant(6) ?? '',\n  }\n\n  // Get raw amounts that will be used in smart contract call\n  const rawAmounts = useMemo(\n    () => ({\n      input: inputCurrency\n        ? parsedAmounts.input?.multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(inputCurrency.decimals))).toFixed(0)\n        : undefined,\n\n      output: outputCurrency\n        ? parsedAmounts.output\n            ?.multiply(JSBI.exponentiate(BIG_INT_TEN, JSBI.BigInt(outputCurrency.decimals)))\n            .toFixed(0)\n        : undefined,\n    }),\n    [inputCurrency, outputCurrency, parsedAmounts],\n  )\n\n  return {\n    currencies,\n    currencyBalances,\n    inputError: getErrorMessage(\n      account,\n      wrappedCurrencies,\n      currencies,\n      currencyBalances,\n      parsedAmounts,\n      trade,\n      price,\n      rateType,\n      t,\n    ),\n    formattedAmounts,\n    trade: trade ?? undefined,\n    parsedAmounts,\n    price,\n    rawAmounts,\n    wrappedCurrencies,\n    singleTokenPrice: {\n      [wrappedCurrencies.input?.address]: singleTokenPrice,\n      [wrappedCurrencies.output?.address]: inverseSingleTokenPrice,\n    },\n    currencyIds: {\n      input: inputCurrencyId,\n      output: outputCurrencyId,\n    },\n  }\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !Number.isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\n    if (valid === false) return 'BNB'\n  }\n  return ''\n}\n\n// TODO: combine with swap's version but use generic type. Same for helpers above\n// Note: swap has recipient and other things. Merging these 2 would probably be much easier if we get rid of recipient\n// Also the whole thing doesn't make sense, in swap inputValue is not initialized but typedValue is. WTF\nconst queryParametersToSwapState = (parsedQs: ParsedUrlQuery): OrderState => {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency) || DEFAULT_INPUT_CURRENCY\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency) || DEFAULT_OUTPUT_CURRENCY\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    inputValue: '',\n    outputValue: '',\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    basisField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    rateType: Rate.MUL,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport const useDefaultsFromURLSearch = ():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined => {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const { query } = useRouter()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(query)\n\n    dispatch(replaceLimitOrdersState(parsed))\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n  }, [dispatch, chainId, query])\n\n  return result\n}\n","import { Currency, CurrencyAmount, JSBI } from '@pancakeswap/sdk'\nimport { BIG_INT_ZERO, MIN_BNB } from 'config/constants/exchange'\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount<Currency>): CurrencyAmount<Currency> | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency?.isNative) {\n    if (JSBI.greaterThan(currencyAmount.quotient, MIN_BNB)) {\n      return CurrencyAmount.fromRawAmount(currencyAmount.currency, JSBI.subtract(currencyAmount.quotient, MIN_BNB))\n    }\n    return CurrencyAmount.fromRawAmount(currencyAmount.currency, BIG_INT_ZERO)\n  }\n  return currencyAmount\n}\n","import { CurrencyAmount, Price, Currency } from '@pancakeswap/sdk'\n\n/**\n * Given certain amount if input and output tokens\n * calculate the price for 1 input token in terms of output tokens\n */\nconst getPriceForOneToken = (inputAmount: CurrencyAmount<Currency>, outputAmount: CurrencyAmount<Currency>) => {\n  if (!inputAmount || !outputAmount || inputAmount.equalTo(0) || outputAmount.equalTo(0)) {\n    return undefined\n  }\n  return new Price({\n    baseAmount: inputAmount,\n    quoteAmount: outputAmount,\n  })\n}\n\nexport default getPriceForOneToken\n"],"names":["props","_jsx","Svg","_object_spread_props","_object_spread","viewBox","children","d","tokens","onDismiss","onCancel","useTranslation","t","Modal","title","Box","maxWidth","ImportToken","handleCurrencySelect","Wrapper","memo","styled","$isSide","theme","mediaQueries","md","BubbleWrapper","Flex","colors","textSubtle","Footer","variant","helpUrl","EXCHANGE_DOCS_URLS","isSide","flexDirection","alignItems","ButtonMenu","scale","activeIndex","ButtonMenuItem","as","href","LinkExternal","id","ml","mt","mb","flexGrow","width","justifyContent","Button","external","path","Image","src","alt","height","useOrderState","useSelector","state","limitOrders","useOrderActionHandlers","dispatch","useDispatch","onCurrencySelection","useCallback","field","currency","selectCurrency","currencyId","isToken","address","isNative","onSwitchTokens","switchCurrencies","onUserInput","typedValue","typeInput","onChangeRateType","rateType","setRateType","getErrorMessage","account","wrappedCurrencies","currencies","currencyBalances","parsedAmounts","trade","price","input","output","toLowerCase","hasAtLeastOneParsedAmount","tradeIsNotAvailable","route","lessThan","symbol","Rate","executionPrice","asFraction","equalTo","invert","greaterThan","useDerivedOrderInfo","singleTokenTrade","isExactIn","useActiveWeb3React","chainId","independentField","basisField","Field","inputValue","outputValue","inputCurrency","useCurrency","inputCurrencyId","outputCurrency","outputCurrencyId","useMemo","undefined","wrappedCurrency","relevantTokenBalances","useCurrencyBalances","inputAmount","tryParseAmount","outputAmount","isOutputBasis","isDesiredRateUpdate","desiredOutputAsCurrencyAmount","exchangeRate","isInverted","parsedInputAmount","parsedExchangeRate","invertedResultAsFraction","multiply","JSBI","BIG_INT_TEN","decimals","divide","CurrencyAmount","quotient","resultAsFraction","toString","getDesiredOutput","desiredInputAsCurrencyAmount","parsedOutAmount","toFixed","getDesiredInput","desiredOutputAsString","toSignificant","parsedTypedAmount","tradeAmount","bestTradeExactIn","useTradeExactIn","bestTradeExactOut","useTradeExactOut","oneInputToken","singleTokenPrice","parseFloat","inverseSingleTokenPrice","getPriceForOneToken","formattedAmounts","rawAmounts","inputError","currencyIds","parseIndependentFieldURLParameter","urlParam","parseCurrencyFromURLParameter","valid","isAddress","toUpperCase","queryParametersToSwapState","parsedQs","DEFAULT_INPUT_CURRENCY","DEFAULT_OUTPUT_CURRENCY","exactAmount","Number","isNaN","exactField","useDefaultsFromURLSearch","useAppDispatch","useRouter","query","useState","result","setResult","useEffect","parsed","replaceLimitOrdersState","maxAmountSpend","currencyAmount","MIN_BNB","BIG_INT_ZERO","Price","baseAmount","quoteAmount"],"sourceRoot":""}