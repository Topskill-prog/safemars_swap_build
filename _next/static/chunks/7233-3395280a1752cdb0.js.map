{"version":3,"file":"static/chunks/7233-3395280a1752cdb0.js","mappings":"umBAYA,IAAMA,EAAe,SAACC,EAAqBC,EAAkBC,GAAwBC,OAAAA,EAAAA,EAAAA,IAAG,IAGrEF,GAEH,WACZ,OAAID,EAAMI,QACO,OAARF,QAAQ,IAARA,OAAAA,EAAAA,EAAUG,QAAgB,OAARH,QAAQ,IAARA,OAAAA,EAAAA,EAAUI,QAASN,EAAMO,OAAOC,YAE5C,OAARN,QAAQ,IAARA,OAAAA,EAAAA,EAAUI,QAASN,EAAMO,OAAOC,eAQrCC,GAAmBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAI,Y,6BAAXD,C,KACrB,Y,IAAGV,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,S,OAAeH,EAAaC,EAAOC,EAAUC,MACtD,Y,MAAgC,wBAArB,EAARD,SAAqD,sBAAwB,uBAGzFW,GAAkBF,EAAAA,EAAAA,IAAOC,EAAAA,GAAI,Y,6BAAXD,C,KACpB,Y,IAAGV,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,S,OAAeH,EAAaC,EAAOC,EAAUC,MACtD,Y,MAAgC,uBAArB,EAARD,SAAoD,sBAAwB,wBAGjFY,EAA2D,Y,IAAGX,EAAQ,EAARA,S,OACzE,SAACU,EAAe,CAACV,SAAUA,EAAUD,SAAS,kB,UAC5C,SAACa,MAAG,CAACC,MAAM,IAAIC,OAAO,I,UACpB,SAACC,OAAI,C,UACH,SAAChB,WAAQ,CAACiB,GAAG,iBAAiBC,cAAc,oB,UAC1C,SAACC,OAAI,CAACC,EAAE,4DAOLC,EAA8D,Y,IAAGpB,EAAQ,EAARA,S,OAC5E,SAACU,EAAe,CAACV,SAAUA,EAAUD,SAAS,qB,UAC5C,SAACa,MAAG,CAACC,MAAM,IAAIC,OAAO,I,UACpB,SAACC,OAAI,C,UACH,SAAChB,WAAQ,CAACiB,GAAG,oBAAoBC,cAAc,oB,UAC7C,SAACC,OAAI,CAACC,EAAE,2DAOLE,EAA4D,Y,IAAGrB,EAAQ,EAARA,S,OAC1E,SAACO,EAAgB,CAACP,SAAUA,EAAUD,SAAS,mB,UAC7C,SAACa,MAAG,CAACC,MAAM,IAAIC,OAAO,I,UACpB,SAACC,OAAI,C,UACH,SAAChB,WAAQ,CAACiB,GAAG,kBAAkBC,cAAc,oB,UAC3C,SAACC,OAAI,CAACC,EAAE,2DAOLG,EAA+D,Y,IAAGtB,EAAQ,EAARA,S,OAC7E,SAACO,EAAgB,CAACP,SAAUA,EAAUD,SAAS,sB,UAC7C,SAACa,MAAG,CAACC,MAAM,IAAIC,OAAO,I,UACpB,SAACC,OAAI,C,UACH,SAAChB,WAAQ,CAACiB,GAAG,qBAAqBC,cAAc,oB,UAC9C,SAACC,OAAI,CAACC,EAAE,+D,oWChElB,IAAMI,EAAUf,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,KACA,Y,IAAGV,EAAK,EAALA,MAAO0B,EAAW,EAAXA,YACtB,OAAI1B,EAAMI,QACU,OAAXsB,QAAW,IAAXA,OAAAA,EAAAA,EAAarB,QAAmB,OAAXqB,QAAW,IAAXA,OAAAA,EAAAA,EAAapB,QAAS,QAElC,OAAXoB,QAAW,IAAXA,OAAAA,EAAAA,EAAapB,SAAoB,OAAXoB,QAAW,IAAXA,OAAAA,EAAAA,EAAarB,OAAQ,UAEzC,Y,OAAQ,EAALsB,SAOVC,EAAmBlB,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,KACZ,Y,OAAQ,EAALiB,MAAoB,KAmCpC,EA5B6E,Y,IAC3EA,EAAK,EAALA,MACAE,EAAe,EAAfA,gBACAC,EAAgB,EAAhBA,iBACAC,EAAO,EAAPA,QACA7B,EAAQ,EAARA,SACAwB,EAAW,EAAXA,YAEMM,EAAoC,QAApBH,IAA8BE,EAC9CE,EAAuC,WAApBJ,IAAiCE,EACpDG,EAAqC,QAApBL,GAA6BE,EAC9CI,EAAwC,WAApBN,GAAgCE,EAE1D,OACE,UAACN,EAAO,CAACE,MAAOA,EAAOD,YAAaA,E,UACjCI,IAAoB,SAACF,EAAgB,CAACD,MAAOA,E,SAAQG,KACtD,sB,UACGI,IAAkB,SAACX,EAAU,CAACrB,SAAUA,IACxCiC,IAAqB,SAACX,EAAa,CAACtB,SAAUA,QAEjD,sB,UACG8B,IAAiB,SAACnB,EAAS,CAACX,SAAUA,IACtC+B,IAAoB,SAACX,EAAY,CAACpB,SAAUA,W,4bCpCrD,IAAMkC,GAAkB1B,EAAAA,EAAAA,IAAO2B,EAAAA,GAAMC,MAAM,CAAEC,UAAW,YAAsB,Y,6BAAtD7B,C,KAIX,Y,OAAQ,EAALiB,MAAoB,KACvB,Y,OAAU,EAAPa,WAGVC,GAAkB/B,EAAAA,EAAAA,IAAOgC,EAAAA,GAAU,Y,6BAAjBhC,C,KAKpB,Y,OAAQ,EAALV,MAAkB2C,aAAaC,MAKlC,Y,OAAQ,EAAL5C,MAAkB2C,aAAaE,MAqEtC,EA/DyE,Y,IACvEC,EAAQ,EAARA,SACAC,EAAO,EAAPA,QAAO,IACPpB,MAAAA,OAAK,IAAG,IAAC,EACTG,EAAgB,EAAhBA,iBAAgB,IAChBD,gBAAAA,OAAe,IAAG,WAAQ,MAC1BmB,iBAAAA,OAAgB,IAAG,GAAI,MACvBC,eAAAA,OAAc,IAAG,GAAK,EACtB/C,EAAQ,EAARA,SACAwB,EAAW,EAAXA,YACAwB,EAAc,EAAdA,eACAC,EAAU,EAAVA,WACGC,GAAK,UAXRN,WACAC,UACApB,QACAG,mBACAD,kBACAmB,mBACAC,iBACA/C,WACAwB,cACAwB,iBACAC,eAGMX,GAAUa,EAAAA,EAAAA,UAAQ,WAEtB,OAAKL,EAKmB,WAApBnB,EACK,cAIe,QAApBA,EACK,cAEF,SAZE,WAaR,CAACA,EAAiBmB,IAErB,OACE,UAACrC,EAAAA,GAAG,kBAAKuC,GAAc,C,UACpBF,GAAwC,QAApBnB,IACnB,SAACyB,EAAa,CACZP,QAASA,EACTpB,MAAOA,EACPI,QAASkB,EACTpB,gBAAiBA,EACjBC,iBAAkBA,EAClB5B,SAAUA,EACVwB,YAAaA,KAGjB,SAACU,GAAe,gBAACT,MAAOA,EAAOa,QAASA,GAAaY,GAAK,C,UACxD,SAACX,GAAe,kBAAKU,GAAU,C,SAAGL,QAEnCE,GAAwC,WAApBnB,IACnB,SAACyB,EAAa,CACZP,QAASA,EACTpB,MAAOA,EACPI,QAASkB,EACTpB,gBAAiBA,EACjBC,iBAAkBA,EAClB5B,SAAUA,EACVwB,YAAaA,U,sBCxGvB,IACM6B,EAAkB,KACXC,EAAiB,MACxBC,EAAmB,QACnBC,EAAkB,SAgDxB,IAzCuB,SAACC,GACtB,IAAIC,EAAQC,KAAKC,IAAIH,GACfI,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTT,QAAS,GA8BX,OA3BIC,GAASF,IACXK,EAASC,MAAQH,KAAKQ,MAAMT,EAAQF,GACpCE,GAASG,EAASC,MAAQN,GAGxBE,GAASH,IACXM,EAASE,OAASJ,KAAKQ,MAAMT,EAAQH,GACrCG,GAASG,EAASE,OAASR,GAGzBG,GAASJ,IACXO,EAASG,KAAOL,KAAKQ,MAAMT,EAAQJ,GACnCI,GAASG,EAASG,KAAOV,GAGvBI,GAASL,IACXQ,EAASI,MAAQN,KAAKQ,MAAMT,EAAQL,GACpCK,GAASG,EAASI,MAAQZ,GAGxBK,GA1CoB,KA2CtBG,EAASK,QAAUP,KAAKQ,MAAMT,EA3CR,IA4CtBA,GA5CsB,GA4CbG,EAASK,SAGpBL,EAASJ,QAAUC,EAEZG,I,2DC7CF,E,oOCIDO,EAAsB,SAACC,G,OAAiBA,EAAMC,QAAQC,eAM/CC,GAAwCC,EAAAA,EAAAA,IACnD,CAN0C,SAACJ,G,OAAiBA,EAAMC,QAAQI,iCAO1E,SAACC,GACC,OAAO,IAAIC,EAAAA,EAAUD,MAIZE,GAAuBJ,EAAAA,EAAAA,IAAe,CAfxB,SAACJ,G,OAAiBA,EAAMC,QAAQQ,gBAec,SAACA,GACxE,IACEC,EAGED,EAHFC,iBACAC,EAEEF,EAFFE,gBACAC,EACEH,EADFG,qBAGF,OAAO,kBACFH,GAAY,CACfC,iBAAkB,IAAIH,EAAAA,EAAUM,GAChCF,gBAAiB,IAAIJ,EAAAA,EAAUO,GAC/BF,qBAAsB,IAAIL,EAAAA,EAAUQ,QAI3BC,GAAkBZ,EAAAA,EAAAA,IAC7B,CACEI,EAjC0B,SAACR,G,OAAiBA,EAAMC,QAAQgB,iBAD/B,SAACjB,G,OAAiBA,EAAMC,QAAQiB,kBAGjC,SAAClB,G,OAAiBA,EAAMC,QAAQkB,iBAmC1DpB,EACAI,IAEF,SACEiB,EACAH,EACAC,EACAC,EACAjB,EACAG,GAEA,MAAO,CACLa,iBAAAA,EACAb,8BAAAA,EACAY,gBAAAA,EACAE,gBAAAA,EACAjB,cAAAA,EACAO,aAAcW,MCjDPC,EAAyB,WACpC,OAAOC,EAAAA,EAAAA,KAAY,SAACtB,G,OAAiBA,EAAMC,QAAQiB,qBAGxCK,EAA+B,WAC1C,OAAOD,EAAAA,EAAAA,KAAY,SAACtB,G,OAAiBA,EAAMC,QAAQkB,oBAOxCK,EAA6B,SAACC,GACzC,IAAMC,GAA+B5C,EAAAA,EAAAA,UAAQ,W,ODZC,SAAC2C,GAC/CrB,OAAAA,EAAAA,EAAAA,IAAe,CAACL,IAAsB,SAACG,GAAkBA,OAAa,OAAbA,QAAa,IAAbA,OAAAA,EAAAA,EAAeyB,MAAK,SAAC1B,G,OAAYA,EAAQtD,KAAO8E,QCWtDG,CAAiCH,KAAY,CAACA,IACjG,OAAOH,EAAAA,EAAAA,IAAYI,IAgCRG,EAAa,WACxB,OAAOP,EAAAA,EAAAA,IAAYN,ICZrB,EA/B+B,SAACc,EAAiBC,GAC/C,IAAM,GAAQC,EAAAA,EAAAA,MAANC,EACR,OAAOnD,EAAAA,EAAAA,UAAQ,WAEb,OAAIiD,IAAWG,EAAAA,GAAAA,KACN,CACLC,cAAeL,EARY,GAS3BM,iBAAkB,KAClBC,kBAAmBJ,EAAE,mBAIrBF,IAAWG,EAAAA,GAAAA,MACN,CACLC,cAAeL,EAhBY,GAFZ,IAmBfM,iBAAkBH,EAAE,wBACpBI,kBAAmB,MAInBN,IAAWG,EAAAA,GAAAA,UACN,CACLC,cAAeL,EAxBY,GADN,IA0BrBM,iBAAkBH,EAAE,sBACpBI,kBAAmB,MAGhB,CAAEF,cAAe,KAAMC,iBAAkB,KAAMC,kBAAmB,QACxE,CAACP,EAASC,EAAQE,K,iCCavB,EA/C6B,WAC3B,IAIIJ,EAAAA,IAHFX,EAGEW,EAHFX,iBACAD,EAEEY,EAFFZ,gBACAR,EACEoB,EADFpB,aAAgBsB,OAGZ,GAAcO,EAAAA,EAAAA,MAAZC,QACFC,GAAWC,EAAAA,EAAAA,MACXC,GAAiBC,EAAAA,EAAAA,GAAiBZ,IAExCa,EAAAA,EAAAA,YAAU,WAEJF,IAAmBX,GAAUb,IAE3BwB,IAAmBR,EAAAA,GAAAA,OAAuBH,IAAWG,EAAAA,GAAAA,YACvDM,GAASK,EAAAA,EAAAA,IAAqB,CAAE3B,iBAAAA,KAC5BqB,GACFC,GAASM,EAAAA,EAAAA,IAAmB,CAAEP,QAAAA,EAASrB,iBAAAA,MAIvCwB,IAAmBR,EAAAA,GAAAA,WAA2BH,IAAWG,EAAAA,GAAAA,OAC3DM,GAASK,EAAAA,EAAAA,IAAqB,CAAE3B,iBAAAA,KAC5BqB,GACFC,GAASM,EAAAA,EAAAA,IAAmB,CAAEP,QAAAA,EAASrB,iBAAAA,SAI5C,CAACA,EAAkBa,EAAQW,EAAgBH,EAASC,KAEvDI,EAAAA,EAAAA,YAAU,WAGR,GAAIF,IAAmBR,EAAAA,GAAAA,WAA2BH,IAAWG,EAAAA,GAAAA,WAA2BjB,EAAiB,CACvGuB,GAASO,EAAAA,EAAAA,OACTP,GAASK,EAAAA,EAAAA,IAAqB,CAAE3B,iBAAAA,KAChC,IAAM8B,EAAWC,aAAY,mB,iDAC3BT,GAASO,EAAAA,EAAAA,OACTP,GAASK,EAAAA,EAAAA,IAAqB,CAAE3B,iBAAAA,K,UAC/B,KACH,OAAO,W,OAAMgC,cAAcF,IAE7B,OAAO,W,OAAM,QACZ,CAACjB,EAAQW,EAAgBzB,EAAiBC,EAAkBsB,K,+FCjDpDW,EAAmB,W,OAAA,iBAC9BC,EACAb,EACAc,G,IACAC,EAGQC,E,6EAHRD,EAAsC,EAAH,6BAAG,E,iBAGnB,O,sBAAA,C,EAAMF,EAASI,UAAUjB,EAASc,I,OAInD,OAJME,EAAW,SAEa,kBAApBD,GAAgCA,EAAkB,GACzD/C,EAAAA,GAAAA,YAAsB+C,IAAoBA,EAAgBG,GAAG,GAEvD,C,EAAAF,EAASG,GAAGJ,IAEd,C,EAAAC,EAASI,IAAI,I,OAEpB,OADY,SACL,C,GAAA,G,wCAfTP,EACAb,EACAc,G,gCAH8B,G,yICkB1BO,GAAsB,CAC1BC,cAAe,OACfC,aAAc,QAGVC,GAAU,SAAC/D,EAAcgE,GAC7B,OAAQA,EAAQC,MACd,IAAK,kBACH,OAAO,kBACFjE,GAAK,CACR6D,cAAe,YAEnB,IAAK,kBACH,OAAO,kBACF7D,GAAK,CACR6D,cAAe,YAEnB,IAAK,gBACH,OAAO,kBACF7D,GAAK,CACR6D,cAAe,SAEnB,IAAK,kBACH,OAAO,kBACF7D,GAAK,CACR8D,aAAc,YAElB,IAAK,kBACH,OAAO,kBACF9D,GAAK,CACR8D,aAAc,YAElB,IAAK,gBACH,OAAO,kBACF9D,GAAK,CACR8D,aAAc,SAElB,QACE,OAAO9D,IAiFb,GAhEqC,Y,IACnCkE,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAkB,EAAlBA,mBAAkB,IAClBC,UAAAA,OAAS,IAAG,EAAAC,KAAI,MAChBC,iBAAAA,OAAgB,IAAG,EAAAD,KAAI,EAEjB,GAAchC,EAAAA,EAAAA,MAAZC,QACkBiC,GAAAA,EAAAA,EAAAA,YAAWT,GAASH,IAAvC5D,EAAmBwE,EAAiC,GAA7ChC,EAAYgC,EAAiC,GACrDC,GAAmBC,EAAAA,EAAAA,QAAON,GAC1B,GAA4BO,EAAAA,GAAAA,KAA1BC,sBAEFC,GAAgBC,EAAAA,EAAAA,cAAY,mB,IAC1BC,E,iEAAU,O,EAAMH,GAAsB,WAE1C,OADApC,EAAS,CAAEyB,KAAM,oBACVC,Q,cAEE,QAJLa,EAAU,gBAIL,IAAPA,OAAAA,EAAAA,EAAShD,SACXS,EAAS,CAAEyB,KAAM,oBACjBM,EAAiB,CAAEvE,MAAAA,EAAO+E,QAAAA,KAE1BvC,EAAS,CAAEyB,KAAM,kB,WAElB,CAACC,EAAWK,EAAkBvE,EAAO4E,IAElCI,GAAgBF,EAAAA,EAAAA,cACpB,mB,IAAOG,EACCF,E,6EAAU,OADXE,EAAS,EAAH,6BAAG,GACE,C,EAAML,GAAsB,WAE1C,OADApC,EAAS,CAAEyB,KAAM,oBACVE,EAAUc,O,cAER,QAJLF,EAAU,gBAIL,IAAPA,OAAAA,EAAAA,EAAShD,SACXS,EAAS,CAAEyB,KAAM,oBACjBI,EAAU,CAAErE,MAAAA,EAAO+E,QAAAA,KAEnBvC,EAAS,CAAEyB,KAAM,kB,WAGrB,CAACE,EAAW3B,EAAU6B,EAAWrE,EAAO4E,IAc1C,OAVAhC,EAAAA,EAAAA,YAAU,WACJL,GAAWkC,EAAiBS,SAC9BT,EAAiBS,UAAUC,MAAK,SAAChC,GAC1BA,GACHX,EAAS,CAAEyB,KAAM,yBAItB,CAAC1B,EAASkC,EAAkBjC,IAExB,CACL4C,YAAqC,YAAxBpF,EAAM6D,cACnBwB,WAAoC,YAAxBrF,EAAM6D,cAClByB,aAAqC,YAAvBtF,EAAM8D,aACpByB,YAAoC,YAAvBvF,EAAM8D,aACnB0B,iBAA0C,SAAxBxF,EAAM6D,cACxB4B,iBAAyC,SAAvBzF,EAAM8D,aACxBe,cAAAA,EACAG,cAAAA,I,ksBNpIQU,GAAAA,EACP,IAAG,MADIA,EAEA,WAAG,a,CAFHA,IAAAA,EAAiB,KAiB7B,IAAMC,GAAgCxJ,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAMlC,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAKhCC,IAAS1J,EAAAA,EAAAA,IAAO2J,EAAAA,GAAY,Y,6BAAnB3J,C,MAGX,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAKhCG,GAAY,CAAEvJ,MAAO,OAAQwJ,MAAO,gBAEpCC,IAAe9J,EAAAA,EAAAA,IAAO+J,GAAAA,GAAkBnI,MAAMgI,IAAU,Y,6BAAzC5J,C,MAGjB,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAKhCO,IAAgBhK,EAAAA,EAAAA,IAAOiK,GAAAA,GAAiBrI,MAAMgI,IAAU,Y,6BAAxC5J,C,MAGlB,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAKhCS,IAAc,SAACC,GAAAA,EAAa,CAACC,MAAI,EAACP,MAAM,iBA6E9C,GA3E6F,Y,IAC3FQ,EAAiB,EAAjBA,kBACApB,EAAW,EAAXA,YACAE,EAAY,EAAZA,aACAmB,EAAiB,EAAjBA,kBACAvC,EAAS,EAATA,UACAC,EAAS,EAATA,UAAS,IACTuC,kBAAAA,OAAiB,IAAG,EAAAhB,EAAkBiB,IAAG,EACzCC,EAAY,EAAZA,aACAC,EAAS,EAATA,UAEM,GAAQ7E,EAAAA,EAAAA,MAANC,EACF6E,EAAgC,OAAZF,QAAY,IAAZA,EAAAA,EAAgB3E,EAAE,WA4D5C,OAAOyE,IAAsBhB,EAAkBiB,KAxD3C,UAAChB,GAA6B,C,WAC5B,SAACvJ,EAAAA,EAAG,C,UACF,SAACyJ,GAAM,CACLkB,SAAUP,EACVQ,QAAS9C,EACT+C,QAAS7B,EAAciB,QAAca,EACrCC,UAAW/B,E,SAEInD,EAAdmD,EAAgB,WAAgB,eAGrC,UAACtH,EAAAA,EAAI,CAACsJ,eAAe,S,WACnB,SAACnB,GAAY,KACb,SAACE,GAAa,QAEhB,SAAC/J,EAAAA,EAAG,C,UACF,SAACyJ,GAAM,CACLlJ,GAAIkK,EACJG,QAAS7C,EACT4C,SAAUN,EACVU,UAAW7B,EACX2B,QAAS3B,EAAee,QAAca,E,SAErC5B,EAAerD,EAAE,cAAgB6E,UASxC,qB,SACGN,GACC,SAACpK,EAAAA,EAAG,C,UACF,SAACyJ,GAAM,CACLlJ,GAAIkK,EACJG,QAAS7C,EACT4C,SAAUN,EACVU,UAAW7B,EACX2B,QAAS3B,EAAee,QAAca,E,SAErC5B,EAAerD,EAAE,cAAgB6E,OAItC,SAAC1K,EAAAA,EAAG,C,UACF,SAACyJ,GAAM,CAACmB,QAAS9C,EAAW+C,QAAS7B,EAAciB,QAAca,EAAWC,UAAW/B,E,SACtEnD,EAAdmD,EAAgB,WAAgB,iB,sFOnH/C,IAAMiC,IAAelL,EAAAA,EAAAA,IAAO0J,EAAAA,GAAO,Y,6BAAd1J,C,MAYrB,GARoE,Y,IAAGoC,EAAQ,EAARA,SAAUyI,EAAO,EAAPA,QAAS,EAAF,EAAED,SAAAA,OAAQ,IAAG,GAAK,EACxG,OACE,SAACM,GAAY,CAACN,SAAUA,EAAUO,MAAM,KAAKC,GAAG,MAAMC,EAAE,WAAWC,QAAQ,WAAWT,QAASA,E,SAC5FzI,K,6hCCVP,IAAMmJ,GAAkBvL,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAUpB,Y,OAAc,EAAXwL,aAEF,oFAID,Y,OAAU,EAAPC,SAEF,oFAMCC,GAAa1L,EAAAA,GAAAA,MAAAA,WAAY,C,6BAAZA,C,MACR,Y,OAAQ,EAALV,MAAkBO,OAAO8L,eAyQvC,GA5NK,Y,IAXenL,EAWZoL,EAAM,EAANA,OAAQC,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aAAclB,EAAQ,EAARA,SACbmB,GAAAA,EAAAA,EAAAA,WAAS,GAAhCN,EAAuBM,EAAe,GAA7BC,EAAcD,EAAe,GACvCE,GAAe1D,EAAAA,EAAAA,QAAuB,MACtC2D,GAAS3D,EAAAA,EAAAA,QAAyB,MAClC4D,GAAS5D,EAAAA,EAAAA,QAAyB,MAClC6D,GAAS7D,EAAAA,EAAAA,QAAyB,MAClC8D,GAAS9D,EAAAA,EAAAA,QAAyB,MAClC+D,GAAS/D,EAAAA,EAAAA,QAAyB,MAClCgE,GAAShE,EAAAA,EAAAA,QAAyB,MAElC,GAAQ1C,EAAAA,EAAAA,MAANC,EAEF0G,EAAY,CAACN,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,GAErDE,EAAsB,WACtBR,EAAalD,SACfkD,EAAalD,QAAQ2D,eAAe,CAAEC,MAAO,SAAUC,SAAU,YAI/DC,EAAiB,SAACC,GACtBA,EAAEC,iBACF,IAAMC,EAAeF,EAAEG,cAAcC,QAAQ,QAC7C,GAAIF,EAAaG,QAAU,GAAK,QAAQC,KAAKJ,GAAe,CAC1D,IAAMK,EAASC,MAAM,EAAIN,EAAaG,QAAQI,KAAK,IACnDzB,EAAaF,EAAOpL,IAAI,QAAIwM,EAAaQ,MAAM,KAAnBR,QAAwB,QAAGK,OAIrDI,EAAiB,WACrBhB,IACAT,GAAW,IAGP0B,EAAgB,WACpB1B,GAAW,IAGP2B,EAAkB,SAACC,EAA4BC,GACnD,IAAMC,EAAaC,SAASH,EAAMI,IAAK,IAEvC,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,gBAAgBC,SAASL,EAAMI,KAC3DJ,EAAMb,qBADR,CAMA,GAAIe,GAAc,GAAKA,GAAc,EAAG,CACtCF,EAAMb,iBACN,IAAMmB,GAAc,QAAGtC,EAAOuC,SAC9BD,EAAWL,GAAW,GAAc,OAAXC,GACzBhC,EAAaF,EAAOpL,GAAI0N,GACxB,IAAME,EAAcP,EAAU,EAExBQ,EAAY7B,EAAU4B,GACR,IAAhBA,GAAqBC,EAAUtF,SACjCsF,EAAUtF,QAAQuF,QAItB,GAAkB,cAAdV,EAAMI,IAGR,GAFAJ,EAAMb,iBAEFnB,EAAOuC,QAAQN,GAAU,CAC3B,IAAMK,GAAc,QAAGtC,EAAOuC,SAC9BD,EAAWL,GAAW,GACtB/B,EAAaF,EAAOpL,GAAI0N,OACnB,CAEL,IAAMK,EAAcV,EAAU,EACxBQ,EAAY7B,EAAU+B,GAE5B,IAAqB,IAAjBA,GAAsBF,EAAUtF,QAAS,CAC3CsF,EAAUtF,QAAQuF,QAClB,IAAMJ,GAAc,QAAGtC,EAAOuC,SAC9BD,EAAWK,GAAe,GAC1BzC,EAAaF,EAAOpL,GAAI0N,IAK9B,GAAkB,WAAdN,EAAMI,IAER,GADAJ,EAAMb,iBACFnB,EAAOuC,QAAQN,GAAU,CAC3B,IAAMK,GAAc,QAAGtC,EAAOuC,SAC9BD,EAAWL,GAAW,GACtB/B,EAAaF,EAAOpL,GAAI0N,OACnB,CAEL,IAAME,EAAcP,EAAU,EACxBQ,EAAY7B,EAAU4B,GAE5B,GAAoB,IAAhBA,GAAqBC,EAAUtF,QAAS,CAC1CsF,EAAUtF,QAAQuF,QAClB,IAAMJ,GAAc,QAAGtC,EAAOuC,SAC9BD,EAAWE,GAAe,GAC1BtC,EAAaF,EAAOpL,GAAI0N,IAK9B,GAAkB,cAAdN,EAAMI,IAAqB,CAC7BJ,EAAMb,iBACN,IAAMwB,EAAcV,EAAU,EACxBQ,EAAY7B,EAAU+B,IAEP,IAAjBA,GAAsBF,EAAUtF,SAClCsF,EAAUtF,QAAQuF,QAItB,GAAkB,eAAdV,EAAMI,IAAsB,CAC9BJ,EAAMb,iBACN,IAAMqB,EAAcP,EAAU,EACxBQ,EAAY7B,EAAU4B,GAER,IAAhBA,GAAqBC,EAAUtF,SACjCsF,EAAUtF,QAAQuF,WAIxB,OACE,sB,WACE,UAAC3M,EAAAA,EAAI,CAACsJ,eAAe,gB,WACnB,SAACuD,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,UAvIhBrJ,EAwIEoL,EAAOpL,GAvIvBA,EAAK,GAAW,MAAS,OAAHA,GACtBA,EAAK,IAAY,KAAQ,OAAHA,GACnB,IAAO,OAAHA,OAuIL,SAACgO,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,U,SACA,IAAzBgC,EAAcsB,QAAgBrH,EAAE,mBAGrC,UAACyF,GAAe,CACdmD,IAAKzC,EACLpB,QAAS4B,EACThB,QAASA,EACTD,YAAsC,IAAzBK,EAAcsB,O,WAE3B,SAACzB,GAAU,CACTgD,IAAKxC,EACLpE,KAAK,SACL6G,MAAO/C,EAAOuC,QAAQ,GACtBS,UAAW,SAAC9B,G,OAA2Ba,EAAgBb,EAAG,IAC1D+B,YAAY,IACZC,SAAU,SAAChC,G,OAAMA,EAAEC,kBACnBnC,SAAUA,EACVmE,QAAStB,EACTuB,OAAQtB,EACRuB,QAASpC,EACTqC,UAAU,aAEZ,SAACxD,GAAU,CACTgD,IAAKvC,EACLrE,KAAK,SACL6G,MAAO/C,EAAOuC,QAAQ,GACtBS,UAAW,SAAC9B,G,OAA2Ba,EAAgBb,EAAG,IAC1D+B,YAAY,IACZC,SAAU,SAAChC,G,OAAMA,EAAEC,kBACnBnC,SAAUA,EACVmE,QAAStB,EACTuB,OAAQtB,EACRuB,QAASpC,EACTqC,UAAU,aAEZ,SAACxD,GAAU,CACTgD,IAAKtC,EACLtE,KAAK,SACL6G,MAAO/C,EAAOuC,QAAQ,GACtBS,UAAW,SAAC9B,G,OAA2Ba,EAAgBb,EAAG,IAC1D+B,YAAY,IACZC,SAAU,SAAChC,G,OAAMA,EAAEC,kBACnBnC,SAAUA,EACVmE,QAAStB,EACTuB,OAAQtB,EACRuB,QAASpC,EACTqC,UAAU,aAEZ,SAACxD,GAAU,CACTgD,IAAKrC,EACLvE,KAAK,SACL6G,MAAO/C,EAAOuC,QAAQ,GACtBS,UAAW,SAAC9B,G,OAA2Ba,EAAgBb,EAAG,IAC1D+B,YAAY,IACZC,SAAU,SAAChC,G,OAAMA,EAAEC,kBACnBnC,SAAUA,EACVmE,QAAStB,EACTuB,OAAQtB,EACRuB,QAASpC,EACTqC,UAAU,aAEZ,SAACxD,GAAU,CACTgD,IAAKpC,EACLxE,KAAK,SACL6G,MAAO/C,EAAOuC,QAAQ,GACtBS,UAAW,SAAC9B,G,OAA2Ba,EAAgBb,EAAG,IAC1D+B,YAAY,IACZC,SAAU,SAAChC,G,OAAMA,EAAEC,kBACnBnC,SAAUA,EACVmE,QAAStB,EACTuB,OAAQtB,EACRuB,QAASpC,EACTqC,UAAU,aAEZ,SAACxD,GAAU,CACTgD,IAAKnC,EACLzE,KAAK,SACL6G,MAAO/C,EAAOuC,QAAQ,GACtBS,UAAW,SAAC9B,G,OAA2Ba,EAAgBb,EAAG,IAC1D+B,YAAY,IACZC,SAAU,SAAChC,G,OAAMA,EAAEC,kBACnBnC,SAAUA,EACVmE,QAAStB,EACTuB,OAAQtB,EACRuB,QAASpC,EACTqC,UAAU,mB,mUCzRpB,IAAMC,IAAcnP,EAAAA,EAAAA,IAAOoP,EAAAA,GAAM,Y,6BAAbpP,C,MAMhB,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAKhC4F,GAAsBrP,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAGT,Y,IAAGV,EAAK,EAALA,M,MAAY,aAAqC,OAAxBA,EAAMO,OAAOyP,eAgE5D,GAnDK,Y,IAAGC,EAAS,EAATA,UAAWzD,EAAY,EAAZA,aAAc0D,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAASC,EAAW,EAAXA,YAAa1H,EAAS,EAATA,UAAWmB,EAAY,EAAZA,aAAcwG,EAAS,EAATA,UACnF,GAAYC,EAAAA,EAAAA,MAAVtQ,MACF,GAAQuG,EAAAA,EAAAA,MAANC,EACF+J,GAAkBlH,EAAAA,EAAAA,cAAY,W,OAAMX,MAAa,CAACA,IACxD,OACE,UAACmH,GAAW,CACVW,MAAOhK,EAAE,gBACT6J,UAAWA,EACXI,iBAAkBzQ,EAAMO,OAAOmQ,UAAUC,WACzCC,OAAQP,E,WAER,UAACN,GAAmB,C,WAClB,UAAC1N,EAAAA,EAAI,CAACsJ,eAAe,gBAAgBkF,GAAG,O,WACtC,UAAC3B,EAAAA,EAAI,CAAC3E,MAAM,a,UAAc/D,EAAE,cAAc,QAC1C,UAAC0I,EAAAA,EAAI,C,UAAC,IAAEe,EAAU,cAEpB,SAACf,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,aAAasG,GAAG,O,SACzCrK,EACC,oHAGJ,SAAC4D,EAAAA,EAAM,CAACkB,SAAUzB,EAAcgH,GAAG,OAAO7E,QAAQ,YAAYjL,MAAM,OAAOC,OAAO,OAAOuK,QAAS2E,E,SAC/F1J,EAAE,eAEJ2J,EAAQW,KAAI,SAACxE,G,OACZ,SAACyE,GAAW,CAEVzE,OAAQA,EACRC,cAAeD,EAAOC,cACtBC,aAAcA,EACdlB,SAAUzB,GAJLyC,EAAOpL,WAQlB,UAACmB,EAAAA,EAAI,CAAC2O,cAAc,SAASrF,eAAe,SAASsF,EAAE,O,WACrD,SAAC7G,EAAAA,EAAM,CACLlJ,GAAG,mBACHoK,UAAW8E,GAAevG,EAC1B2B,QAAS3B,GAAe,SAACgB,GAAAA,EAAa,CAACC,MAAI,EAACP,MAAM,sBAAoBkB,EACtEF,QAASgF,E,SAEO/J,EAAfqD,EAAiB,aAAkB,sBAEtC,UAACO,EAAAA,EAAM,CAAC8G,GAAG,MAAMlF,QAASnC,EAAe,YAAc,OAAQyB,SAAUzB,EAAc0B,QAAS8E,E,WAC9F,SAACc,GAAAA,EAAa,CAAC5G,MAAOV,EAAe,WAAa,UAAW7I,OAAO,OAAOD,MAAM,SAAS,IAAEyF,EAAE,qBCzE3F4K,GAAuB,SAACC,GACnC,IAAMC,EAAgBD,EAAOnD,MAAM,IAGnC,OAFAoD,EAAcC,OAAO,EAAG,GACxBD,EAAcE,UACPF,EAAcG,KAAK,KAGfC,GAAe,SAACC,EAAgBtL,GAC3C,IAAMuL,EAAsC,IAAxBnD,SAASpI,EAAS,IAEtC,OADsB,IAAIwL,KAAKD,GACVE,mBAAmBH,EAAQI,KAGrCC,GAA0C,CACrDC,KAAM,UACNC,MAAO,QACPC,IAAK,WAGMC,GAA0C,CACrDC,KAAM,UACNC,OAAQ,WAGGP,IAA8C,UACtDC,GACAI,IAGQG,GAAyB,SACpCC,GAEA,IACEvN,EAGEuN,EAHFvN,iBACAC,EAEEsN,EAFFtN,gBACAC,EACEqN,EADFrN,qBAGID,EAAkB,IAAIJ,EAAAA,EAAUO,GAChCJ,EAAmB,IAAIH,EAAAA,EAAUM,GACjCD,EAAuB,IAAIL,EAAAA,EAAUQ,GAE3C,MAAO,CACLoG,UAAW8G,EAAY9G,UACvB1F,UAAWwM,EAAYxM,UACvByM,YAAaD,EAAYC,YACzBnM,OAAQkM,EAAYlM,OACpBoM,UAAWF,EAAYE,UACvBrM,QAASmM,EAAYnM,QACrBpB,iBAAAA,EACAC,gBAAAA,EACAyN,YAAaH,EAAYG,YACzBC,cAAeJ,EAAYI,cAC3BC,aAAcL,EAAYK,aAC1B1N,qBAAAA,EACA2N,YAAaN,EAAYM,YACzBC,cAAeP,EAAYO,cAC3BC,uBAAwBR,EAAYQ,uBACpCC,iBAAkBT,EAAYS,mB,uBCvBlC,GAnC8B,SAC5BC,EACAC,GAaA,I,IAZAC,EAAY,UAAH,6CAAG,IACZC,EAAY,UAAH,6CAAG,QAGNC,GACc,OAAlBH,QAAkB,IAAlBA,OAAAA,EAAAA,EAAoBtF,QAAS,EACzBsF,EAAmBrC,KAAI,SAACxE,GACtB,OAAOmC,SAAe,OAANnC,QAAM,IAANA,OAAAA,EAAAA,EAAQ+E,WAE1B,GACAkC,GAA0B,QAAGD,GAE1BE,EAAQ,EAAGA,EAAQN,EAAiBM,IAAS,CAEpD,IADA,IAAIC,EAAeC,KAAON,EAAWC,GAC9BE,EAAuB5E,SAAS8E,IAErCA,EAAeC,KAAON,EAAWC,GAEnCE,EAAuBI,KAAKF,GAI9B,IAAMG,GACc,OAAlBT,QAAkB,IAAlBA,OAAAA,EAAAA,EAAoBtF,QAAS,EACzB0F,EAAuBM,QAAO,SAACC,GAC7B,OAAQR,EAAsB3E,SAASmF,MAEzCP,EAEN,OAAOK,GCrBHG,GAAkB,Y,IACtBC,EAAM,EAANA,OACAb,EAAkB,EAAlBA,mBAMMc,EADgBC,GAAsBF,EAAQb,GACHrC,KAAI,SAACxE,G,OAAW8E,GAAqB9E,EAAO6H,YAAYjG,MAAM,OAO/G,MAAO,CACLiC,QAPcnC,MAAMoG,KAAK,CAAEvG,OAAQmG,IAAU,SAACK,EAAGC,G,OAAMA,EAAI,KAAGxD,KAAI,SAACnP,G,MAAW,CAC9ET,GAAIS,EACJkN,QAASoF,EAA2BtS,EAAQ,GAC5C4K,cAAe,GACfgI,YAAY,MAIZnE,aAAa,IAIX9H,GAAU,SAAC/D,EAAqBiQ,GACpC,OAAQA,EAAOhM,MACb,IAAK,eACH,IAAM2H,GAAW,QAAG5L,EAAM4L,SACOqE,EAAAA,EAAOC,QAAhCC,EAAyBF,EAAzBE,SAAU9F,EAAe4F,EAAf5F,WAEZ+F,EAAgBpQ,EAAM4L,QAAQ0D,QAClC,SAACvH,G,OAAWA,EAAOpL,KAAOwT,GAAYpI,EAAOiI,YAAcjI,EAAOuC,QAAQ4C,KAAK,MAAQ7C,EAAW6C,KAAK,OAMlFtB,EAAQuE,EAAW,GAAGnI,cAC9BqI,SAAQ,SAACC,GACtB,IAAKF,EAAc7D,KAAI,Y,OAAK,EAAF5P,MAAayN,SAASkG,GAAe,CAC7D,IAAMC,GAAgB,QAAG3E,EAAQ0E,EAAe,GAAGtI,eAC7CwI,EAAgBD,EAAaE,WAAU,SAAC9T,G,OAAOA,IAAOwT,KAC5DI,EAAavD,OAAOwD,EAAe,GACnC5E,EAAQ0E,EAAe,IAAK,kBACvB1E,EAAQ0E,EAAe,IAAE,CAC5BtI,cAAeuI,QAMQ,IAAzBH,EAAc9G,QAChB8G,EAAcC,SAAQ,SAACK,GACrB9E,EAAQ8E,EAAU/T,GAAK,IAAK,kBACvB+T,GAAS,CACZ1I,eAAe,QAAI0I,EAAU1I,eAAV0I,OAAJ,CAA6BP,SAKlD,IAAMQ,EAAgB,CACpBhU,GAAIwT,EACJ7F,QAASD,EACTrC,cAAeoI,EAAc7D,KAAI,SAACxE,G,OAAWA,EAAOpL,MACpDqT,WAA2C,IAA/B3F,EAAW6C,KAAK,IAAI5D,QAElCsC,EAAQuE,EAAW,GAAKQ,EAGxB,IAAM9E,EAAcD,EAAQgF,OAAM,SAAC7I,G,OAAWA,EAAOiI,cAErD,MAAO,CACLpE,QAAAA,EACAC,YAAAA,GAGJ,IAAK,QACH,OAAO2D,GAAgB,CAAEC,OAAQQ,EAAOC,QAAQT,OAAQb,mBAAoBqB,EAAOC,QAAQtB,qBAC7F,QACE,MAAM,IAAIiC,Q,uRCpDhB,IAiBA,GAjBMvF,IAAcnP,EAAAA,EAAAA,IAAOoP,EAAAA,GAAM,Y,6BAAbpP,C,MAChB,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAKhCkL,IAAyB3U,EAAAA,EAAAA,IAAO2B,EAAAA,GAAK,Y,6BAAZ3B,C,MAIlB,Y,OAAY,EAAT4U,UAA6B,OAAS,W,SAOjDC,GAAAA,EACA,IAAG,MADHA,EAEC,KAAG,O,CAFJA,KAAAA,GAAW,KAKhB,IAkZA,GAlZwD,Y,IAAGlF,EAAS,EAATA,UACnD,GAAcxJ,EAAAA,EAAAA,MAAZC,QACF,GAAQP,EAAAA,EAAAA,MAANC,EACF,GAAY8J,EAAAA,EAAAA,MAAVtQ,MASJoG,EAAAA,IAPFxB,EAOEwB,EAPFxB,8BACAa,EAMEW,EANFX,iBAAgB,EAMdW,EALFpB,aACEC,EAAgB,EAAhBA,iBACAC,EAAe,EAAfA,gBACeiL,EADA,EACfsC,YAAetC,QAGb,GAAuBqF,EAAAA,GAAAA,KAArBC,iBACgChJ,GAAAA,EAAAA,EAAAA,UAAS,IAA1CmH,EAAiCnH,EAAY,GAA/BiJ,EAAmBjJ,EAAY,GACVA,GAAAA,EAAAA,EAAAA,UAAS,IAA5CkJ,EAAmClJ,EAAY,GAAhCmJ,EAAoBnJ,EAAY,GACpBA,GAAAA,EAAAA,EAAAA,UAAS,IAApCwD,EAA2BxD,EAAY,GAA5BoJ,EAAgBpJ,EAAY,GACkBA,GAAAA,EAAAA,EAAAA,UAAS,IAAlEqJ,EAAyDrJ,EAAY,GAA3CsJ,EAA+BtJ,EAAY,GACtCA,GAAAA,EAAAA,EAAAA,UAAsB8I,GAAYS,KAAjEC,EAA+BxJ,EAAsC,GAAxDyJ,EAAkBzJ,EAAsC,GACVA,GAAAA,EAAAA,EAAAA,UAAS0J,GAAAA,IAApEC,GAA2D3J,EAAkB,GAAlD4J,GAAgC5J,EAAkB,GAClBA,IAAAA,EAAAA,EAAAA,WAAS,GAApE6J,GAA2D7J,GAAe,GAA/C8J,GAAgC9J,GAAe,GAC/BA,IAAAA,EAAAA,EAAAA,WAAS,GAApD+J,GAA2C/J,GAAe,GAAvCgK,GAAwBhK,GAAe,GAC3DiK,IAAkBC,EAAAA,GAAAA,MAC6CC,IAAAA,EAAAA,GAAAA,MAA7DC,GAA6DD,GAA7DC,OAA4BC,GAAiCF,GAAjCE,OAC9B,IAAmBC,EAAAA,GAAAA,KAAjBC,aACmCC,IAAAA,EAAAA,GAAAA,IAAgBC,GAAAA,GAAAA,IAAAA,SAAnDC,GAAmCF,GAAnCE,QAAmBC,GAAgBH,GAAhBG,YAErBC,GAAsBC,GAASC,SAC/BC,IAAmBnU,EAAAA,EAAAA,UAAQ,W,OAAM,IAAIyB,EAAAA,EAAUuS,MAAsB,CAACA,KAEtEI,IAAgBC,EAAAA,EAAAA,MAChB3Q,IAAWC,EAAAA,EAAAA,MACX2Q,GAAoBP,KAAgBQ,EAAAA,GAAAA,QACpCC,IAAyBC,EAAAA,EAAAA,IAAsBR,GAAU,EAAG,GAE5DS,GAAmB,W,OACvB,sB,WACE,SAAC7I,EAAAA,EAAI,CAAC2B,GAAG,O,SACNrK,EACC,kJAGJ,SAAC0I,EAAAA,EAAI,C,SAAE1I,EAAE,uBACT,SAAC0I,EAAAA,EAAI,C,SAAE1I,EAAE,wBACT,SAAC0I,EAAAA,EAAI,C,SAAE1I,EAAE,4BAGkCwR,IAAAA,EAAAA,EAAAA,IAAW,SAACD,GAAgB,IAAK,CAC9EE,UAAW,aACXC,cAAe,CAAC,GAAI,MAFdC,GAAuCH,GAAvCG,UAAWC,GAA4BJ,GAA5BI,QAASC,GAAmBL,GAAnBK,eAKtBC,IAAgCjP,EAAAA,EAAAA,cACpC,SAACgI,GACC,OAAOA,EAAOrJ,GAAGpD,GAAiCA,EAAgCyM,IAEpF,CAACzM,IAGG2T,IAA6BlP,EAAAA,EAAAA,cACjC,SAACmP,GAKC,OAJ2BvT,EACxBwT,MAAMD,GACNC,MAAMvT,EAAgBwT,KAAK,GAAGC,MAAMH,IACpCI,IAAI1T,KAGT,CAACA,EAAiBD,IAGd4T,IAA8BxP,EAAAA,EAAAA,cAClC,SAACmP,GACC,IAAMM,EAAoBP,GAA2BC,GAG/CO,EAFqB9T,EAAiBwT,MAAMD,GACRG,MAAMG,GACCF,IAAI3T,GAErD,MAAO,CAAE+T,iBADgBR,EAAcE,KAAKK,GACjBA,0BAAAA,KAE7B,CAACR,GAA4BtT,IAGzBgU,IAAgB5P,EAAAA,EAAAA,cACpB,SAAC6P,GACC,IAAMC,EAAuBb,GAA8BY,GAC7BX,GAA2BY,GAE/BnR,GAAGsP,IAC3Bb,IAAqB,GACZ0C,EAAqBC,GAAGxU,GACjC2R,IAA6B,IAE7BE,IAAqB,GACrBF,IAA6B,MAGjC,CAAC+B,GAA+BC,GAA4B3T,EAA+B0S,MAG7FnQ,EAAAA,EAAAA,YAAU,YACuB,WAC7B,IAEIkS,EAFEC,EAAqB9B,GAAiBoB,IAAI3T,GAC1CsU,EAAqBjB,GAA8BgB,GAIzD,GAAIC,EAAmBtR,GAAGrD,GAAgC,CAExD,IAAQoU,EAA6CH,GAA4BU,GAAzEP,iBAGAD,EACNF,GAA4BW,GADtBT,0BAIRM,EAAcE,EAAmBb,KAAKe,QAEtCJ,EAAcE,EAGZ5B,IAAqB0B,EAAYpR,GAAG,GACtCwO,IAAqB,GAErBA,IAAqB,GAGvBJ,GAA6BgD,GAE/BK,KACC,CACD9U,EACAK,EACAuS,GACAc,GACAC,GACAM,GACAlB,MAGFxQ,EAAAA,EAAAA,YAAU,WACR,IAAMwS,EAAuB,IAAI7U,EAAAA,EAAU8O,GACrCkF,EAAoBP,GAA2BoB,GAC/CC,EAAqB3U,EAAiBwT,MAAMkB,GAC5CE,EAAuBD,EAAmBjB,MAAMG,GACtD/C,EAA4B6D,EAAmB5R,GAAG,IAAK8P,EAAAA,EAAAA,IAAsB8B,EAAoB,GAAK,KACtG/D,EAAaiD,EAAkB9Q,GAAG,IAAK8P,EAAAA,EAAAA,IAAsBgB,EAAmB,GAAK,KACrFlD,EAAiBiE,EAAqB7R,GAAG,IAAK8P,EAAAA,EAAAA,IAAsB+B,EAAsB,GAAK,OAC9F,CAACjG,EAAc3O,EAAkBC,EAAiBqT,KAErD,IAAMuB,GAA4B,SAACC,GACjC,IAAMC,EAAyB5D,GAA0BpO,GAAG,GACxDoO,GAA0BwC,IAAI,IAAI9T,EAAAA,EAAU,MAAM2T,MAAM,IAAI3T,EAAAA,EAAUiV,IACtE5D,GAAAA,GACJ,OAAOtS,KAAKQ,MAAM2V,EAAuBC,aAGrCC,GAAsBJ,GAA0B,IAChDK,GAA6BL,GAA0B,IACvDM,GAAwBN,GAA0B,IAClDO,GAA6BP,GAA0B,KAWvDQ,GAA0B,SAACjJ,GAC/BqE,EAAgBrE,EAAOkJ,WACvB9D,IAAqB,GACrBF,IAA6B,IAGgDiE,IAG9E,OD/I8B,SAC/BxG,EACAb,GAEA,IAA0BpK,GAAAA,EAAAA,EAAAA,YAAWT,GAAS,CAAE0L,OAAAA,EAAQb,mBAAAA,GAAsBY,IAAvExP,EAAmBwE,EAAoE,GAAhFhC,EAAYgC,EAAoE,GAuB9F,OArBA5B,EAAAA,EAAAA,YAAU,WACRJ,EAAS,CAAEyB,KAAM,QAASiM,QAAS,CAAET,OAAAA,EAAQb,mBAAAA,OAC5C,CAACa,EAAQb,IAmBL,CAjBc,SAACuB,EAAkB9F,GACtC7H,EAAS,CAAEyB,KAAM,eAAgBiM,QAAS,CAAEC,SAAAA,EAAU9F,WAAAA,MAGtC,WAChB7H,EAAS,CAAEyB,KAAM,QAASiM,QAAS,CAAET,OAAAA,EAAQb,mBAAAA,MAYd5O,EAAM4L,QAAS5L,EAAM6L,YATxB,WAC5B,OAAO7L,EAAM4L,QAAQW,KAAI,SAACxE,GACxB,IAAMmO,GAAiB,QAAInO,EAAOuC,SAASiC,KAAI,SAAC4J,G,OAAQjM,SAASiM,EAAK,OAAKlJ,UAG3E,OAFAiJ,EAAeE,QAAQ,GACAlM,SAASgM,EAAehJ,KAAK,IAAK,SCsHkB+I,CAC7E/L,SAASmF,EAAc,IACvBT,GACD,GAHM3G,GAAwEgO,GAG9E,GAHoBtK,GAA0DsK,GAG9E,GAH+BrK,GAA+CqK,GAG9E,GAHwCpK,GAAsCoK,GAG9E,GAHqDI,GAAyBJ,GAG9E,GAGCK,GAAAA,GAA6B,CAC3BlS,oBAAoB,mB,0CAClB,MAAO,C,EAAAjB,EAAiBoT,GAAoBhU,EAAS4P,GAAgBqE,gBAEvEtS,UAAW,WACT,OAAOgN,EAAiBuF,GAAsB,UAAW,CAACtE,GAAgBqE,QAASE,EAAAA,MAErFnS,iBAAkB,W,OAAA,oB,IAASQ,E,iDAAAA,EAAO,EAAPA,QACzB0N,GACExQ,EAAE,oDACF,SAAC0U,GAAAA,GAAsB,CAACC,OAAQ7R,EAAQ8R,mB,6DAH1B,GAMlB1S,UAAW,WACT,IAAM2S,EAAqBT,KAC3B,OAAOnF,EAAiBiB,GAAiB,aAAc,CAACjR,EAAkB4V,KAE5EzS,UAAW,W,OAAA,oB,IAASU,E,iDAAAA,EAAO,EAAPA,QACT,OAAT+G,QAAS,IAATA,GAAAA,IACAtJ,IAASuU,EAAAA,EAAAA,IAA6B,CAAExU,QAAAA,EAASrB,iBAAAA,KACjDuR,GAAaxQ,EAAE,+BAA+B,SAAC0U,GAAAA,GAAsB,CAACC,OAAQ7R,EAAQ8R,mB,6DAH7E,KAlBPzR,GACNkR,GADMlR,YAAaC,GACnBiR,GADmBjR,WAAYE,GAC/B+Q,GAD+B/Q,YAAaD,GAC5CgR,GAD4ChR,aAAcT,GAC1DyR,GAD0DzR,cAAeG,GACzEsR,GADyEtR,cAwCrEgS,IACH3R,IACDE,IACA0M,KACC5C,GACD,IAAI9O,EAAAA,EAAU8O,GAAc1L,IAAI,IAChC0S,KAAwB/M,SAAWY,SAASmF,EAAc,IAE5D,OAAIqC,IAAgBV,GAAYiG,MAE5B,SAACC,GAAgB,CACfxL,UAAWA,EACXzD,aAAcA,GACd0D,UAAWA,GACXC,QAASA,GACTC,YAAaA,GACb1H,UAAWa,GACXM,aAAcA,GACdwG,UAAW,W,OAAM6F,EAAeX,GAAYS,SAMhD,UAACnG,GAAW,CAACW,MAAOhK,EAAE,eAAgB6J,UAAWA,EAAWI,iBAAkBzQ,EAAMO,OAAOmQ,UAAUC,W,UAClG0H,IAAkBD,IACnB,UAAC/V,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,gBAAgBkF,GAAG,M,WAC1D,UAAC3B,EAAAA,EAAI,CAAC3E,MAAM,a,UAAc/D,EAAE,OAAO,QACnC,UAACnE,EAAAA,EAAI,CAACqZ,WAAW,SAASC,SAAS,O,WACjC,SAACzM,EAAAA,EAAI,CAAC0M,GAAG,MAAMC,MAAI,E,SAChBrV,EAAE,cAEH,SAACsV,MAAG,CAACC,IAAI,4CAA4CC,IAAI,GAAGjb,MAAM,OAAOC,OAAO,gBAGtF,SAACib,EAAAA,EAAY,CACXC,UAAWpV,IAAY0P,IAAqBF,IAC5C/G,YAAY,IACZF,MAAOuE,EACPuI,YAnGoB,SAACC,GAEzB,IAAMC,EAAa5N,SAAS2N,EAAO,IAC7BE,EAAY,IAAIxX,EAAAA,EAAUuX,GAC1BlD,EAAuBb,GAA8BgE,GAC3DrD,GAAcqD,GACd5G,EAAgB2G,EAAalD,EAAqBhF,WAAa,KA8F3DoI,cACE9E,GAAczP,GAAG,IACjB,IAEC,OADC4L,GAAekE,EAAAA,EAAAA,IAAsB7S,EAAiBwT,MAAM,IAAI3T,EAAAA,EAAU8O,IAAgB,GAAK,OAChG,YAGL,SAACvR,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,WAAWuF,GAAG,MAAML,GAAG,O,UAC9D,UAACxO,EAAAA,EAAI,CAACsJ,eAAe,WAAWqF,cAAc,S,UAC3ClK,IAAY0P,IAAqBF,MAChC,SAACpH,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,U,SAhEhCiM,GAA0BhQ,EAAE,4BACzBA,EAAE,+EAAgF,CACvFgW,WAAY5X,EAA8BuP,eAkErCrN,IACC,UAACzE,EAAAA,EAAI,CAACsJ,eAAe,W,WACnB,UAACuD,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,aAAaqR,GAAG,M,UAAM,QAC5CpV,EAAE,WAAW,OAElBmR,IACC,SAACzI,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,SACzBsN,MAGH,SAAC4E,EAAAA,EAAQ,CAAC1b,MAAO,GAAIC,OAAQ,aAOtC8F,IAAY6Q,IACX,SAAC8E,EAAAA,EAAQ,CAAC1b,MAAM,OAAOC,OAAQ,GAAIkQ,GAAG,MAAML,GAAG,UAE/C,UAACwE,GAAsB,CAACC,UAAWxO,GAAW6Q,IAAqB0C,IAA8B,E,UAC9FH,IAAuB,IACtB,SAACwC,GAAqB,CAACnR,QAAS,W,OAAM+O,GAAwBJ,K,SAC3DvC,GAAoBuC,GAAuB,KAG/CC,IAA8B,IAC7B,SAACuC,GAAqB,CAACnR,QAAS,W,OAAM+O,GAAwBH,K,SAC3DxC,GAAoBwC,GAA8B,KAGtDC,IAAyB,IACxB,SAACsC,GAAqB,CAACnR,QAAS,W,OAAM+O,GAAwBF,K,SAC3DzC,GAAoByC,GAAyB,KAGjDC,IAA8B,IAC7B,SAACqC,GAAqB,CAACnR,QAAS,W,OAAM+O,GAAwBD,K,UAC5D,SAACnL,EAAAA,EAAI,CAACyN,OAAK,EAACpS,MAAM,eAAeqS,cAAc,Y,SAC5CpW,EAAE,eAMb,UAACnE,EAAAA,EAAI,CAAC2O,cAAc,S,WAClB,UAAC3O,EAAAA,EAAI,CAACwO,GAAG,MAAMlF,eAAe,gB,WAC5B,UAACuD,EAAAA,EAAI,CAAC3E,MAAM,aAAa4E,SAAS,O,UAC/B3I,EAAE,QAAQ,aAEb,UAAC0I,EAAAA,EAAI,CAAC3E,MAAM,aAAa4E,SAAS,O,UAC/BlK,IAAoB6S,EAAAA,EAAAA,IAAsB7S,EAAiBwT,MAAM7E,GAAgB,GAAI,GAAG,cAG7F,UAACvR,EAAAA,EAAI,CAACwO,GAAG,MAAMlF,eAAe,gB,WAC5B,UAACtJ,EAAAA,EAAI,C,WACH,UAAC6M,EAAAA,EAAI,CAAC2N,QAAQ,SAAShB,MAAI,EAAC1M,SAAS,OAAOyM,GAAG,M,UAC5CjG,GAAiB1F,EAvHH,WACzB,IAAM6M,EAAiB,IAAIhY,EAAAA,EAAU6Q,GAAeiD,IAAI,IAAI9T,EAAAA,EAAUgR,IAA2B2C,MAAM,KACvG,OAAIqE,EAAeC,SAAWD,EAAe1D,GAAG,GACvC,EAEF0D,EAAe7C,WAAWM,QAAQ,GAkHDyC,GAAuB,EAAE,QAEzD,SAAC9N,EAAAA,EAAI,CAAC2N,QAAQ,SAAStS,MAAM,aAAa4E,SAAS,O,SAChD3I,EAAE,oBAEL,SAACnE,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,SAASyD,IAAK+I,G,UACrD,SAAC8E,EAAAA,EAAQ,CAACC,GAAG,MAAMnc,MAAM,OAAOC,OAAO,OAAOuJ,MAAM,qBAGxD,UAAC2E,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,UAAa,IACrCoL,EAAc,cAGpB,UAACtT,EAAAA,EAAI,CAAC8a,UAAW,aAAqC,OAAxBnd,EAAMO,OAAOyP,YAAcoN,GAAG,MAAMvM,GAAG,OAAOlF,eAAe,gB,WACzF,SAACuD,EAAAA,EAAI,CAAC3E,MAAM,aAAa4E,SAAS,O,SAC/B3I,EAAE,cAEL,UAAC0I,EAAAA,EAAI,CAACC,SAAS,OAAO0M,MAAI,E,UAAC,IACvB5L,EAAU,aAIfnJ,GACC,sB,WACE,SAACuW,GAAqB,CACpBtS,kBAAmBnB,GACnBD,YAAaA,GACbqB,kBAAmBuQ,GACnB1R,aAAcA,GACdpB,UAAWW,GACXV,UAAWa,GACX0B,kBAAmBhB,EAAkBqT,WACrCnS,aAAc3E,EAAE,iBAChB4E,UAAU,sBAEXxB,KACC,SAACQ,EAAAA,EAAM,CACL4B,QAAQ,YACRkF,GAAG,MACH1F,SACE,SAAC+R,GAAAA,EAAgB,CACfL,GAAG,MACH3S,MAAOgR,IAAiB1R,GAAe,WAAa,UACpD7I,OAAO,OACPD,MAAM,SAGVuK,SAAUiQ,IAAiB1R,GAC3B0B,QAAS,WACP2K,EAAeX,GAAYiG,O,SAG5BhV,EAAE,2BAKT,SAACgX,GAAAA,EAAmB,KAGtB,SAACtO,EAAAA,EAAI,CAACgC,GAAG,OAAO/B,SAAS,OAAO5E,MAAM,a,SACnC/D,EACC,mLCtaZ,GAzB0D,Y,IAAG8E,EAAQ,EAARA,SAAalI,GAAK,UAAlBkI,aACrD,GAAQ/E,EAAAA,EAAAA,MAANC,EACDiX,GAAyD,QAA7BC,EAAAA,EAAAA,IAAS,SAACC,GAAe,KAAI,MAE9D3Y,EACEoB,IADFpB,aAAgBsB,OAclB,OACE,SAAC8D,EAAAA,GAAM,kBAAKhH,GAAK,CAAEkI,SAAUA,EAAUC,QAASkS,E,SAX5CnX,IAAWG,EAAAA,GAAAA,KACND,EAAE,gBAGT,sB,WACE,SAACoX,EAAAA,EAAQ,CAAChC,GAAG,MAAMrR,MAAM,iBAAiB,IAAE/D,EAAE,wB,ooCCpBtD,IAAMqX,GAAiBnd,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAiGvB,GArDmB,Y,IAAEgG,EAAa,EAAbA,cACiB+F,GAAAA,EAAAA,EAAAA,UAAS,GAApCqR,EAA2BrR,EAAW,GAA3BsR,EAAgBtR,EAAW,IAG7CtF,EAAAA,EAAAA,YAAU,WACR,IAAII,EAEJ,GAA6B,kBAAlBb,EAA2B,CACpC,IAAMsX,EAAgC,WACpC,IAAMC,EAAgCpa,KAAKQ,MAAMwN,KAAKqM,MAAQ,KAC1DC,EAAkCzX,EAAgBuX,EAClDE,EAAiC,EAEnCJ,EADkBI,EAAiC,MAInD1W,cAAcF,IAIlByW,IACAzW,EAAWC,aAAY,WACrBwW,MACC,KAEL,OAAO,W,OAAMvW,cAAcF,MAC1B,CAACb,IAEN,IAAM0X,EAAwB,IAAZN,EACZO,EAAQD,EACRE,EAASF,EAAW,IAE1B,OACE,qB,UACE,SAACP,GAAc,C,UACb,SAACjF,MAAG,CAACrW,UAAU,e,UACb,SAACqW,MAAG,CAACrW,UAAU,0B,UACb,UAACqW,MAAG,CAACrW,UAAU,Q,WACb,SAACuZ,MAAG,CAACC,IAAI,2CAA2CC,IAAI,MACxD,SAACpD,MAAG,CACFrW,UAAU,aACVgc,MAAS,CAACC,UAAW,UAAWH,EAAO,WACzC,SAACzF,MAAG,CACFrW,UAAU,cACVgc,MAAS,CAACC,UAAW,UAAWF,EAAQ,sB,2qHC5ExD,IAAMG,GAA+B,CACnC5B,QAAS,OACT7L,cAAe,SACf0K,WAAY,SACZ/P,eAAgB,SAChB+S,UAAW,SACXC,gBAAiB,2BACjBC,aAAc,OACdC,OAAQ,sBACRrc,QAAS,MACTsc,OAAQ,QAGJC,IAAoBC,EAAAA,EAAAA,IAAS,MAY7BC,IAAqBD,EAAAA,EAAAA,IAAS,MAY9BE,IAAqBF,EAAAA,EAAAA,IAAS,MAY9BG,IAAsBH,EAAAA,EAAAA,IAAS,MAY/BI,IAAsBJ,EAAAA,EAAAA,IAAS,MAY/BK,IAAkB3e,EAAAA,EAAAA,IAAO2B,EAAAA,GAAK,Y,6BAAZ3B,C,KACT0e,IAGTE,IAAoB5e,EAAAA,EAAAA,IAAO6e,EAAAA,GAAQ,Y,6BAAf7e,C,MACV,Y,OAAQ,EAALV,MAAkBO,OAAOmQ,UAAU8O,QAKhDC,IAAwB/e,EAAAA,EAAAA,IAAOgf,IAAiB,Y,6BAAxBhf,C,MACd,Y,IAAGV,EAAK,EAALA,M,OAAe,EAARsL,SACXtL,EAAMO,OAAO+K,SAAW,uDAEnC,Y,OAAQ,EAALtL,MAAkB2C,aAAagd,MAKhCC,GAAgBlf,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAQhBmf,GAAmBnf,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAOnBof,GAAcpf,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MASdqf,IAAmBrf,EAAAA,EAAAA,IAAOC,EAAAA,GAAI,Y,6BAAXD,C,KAURqe,GAIAA,GAIAE,GAIAC,GAIAC,IAGb,Y,OAAQ,EAALnf,MAAkB2C,aAAaC,MAuBlC,Y,OAAQ,EAAL5C,MAAkB2C,aAAawH,MAuBlC,Y,OAAQ,EAALnK,MAAkB2C,aAAaqd,MA0GtC,GAlFa,WACX,IAAM,GAAQzZ,EAAAA,EAAAA,MAANC,EAIJJ,EAAAA,IAAY,EAAZA,EAFFpB,aAAgBG,EAAoB,EAApBA,qBAAsBmB,EAAM,EAANA,OAAQD,EAAO,EAAPA,QAC9Cb,EACEY,EADFZ,gBAGIiS,GAAgBC,EAAAA,EAAAA,MAChBuI,EAAc9a,EAAqBsT,MAAMhB,GACzCyI,GAAaC,EAAAA,EAAAA,IAAiBF,EAAa,GAC3CG,EAAsB9Z,IAAWG,EAAAA,GAAAA,MAAsBjB,EACvD6a,EAAe5R,SAASpI,EAAS,IACwBia,EAAAA,EAAuBD,EAAc/Z,GAA5FI,EAAuD4Z,EAAvD5Z,cAAuD4Z,EAAxC1Z,kBAAwC0Z,EAArB3Z,iBA8B1C,OACE,UAACtE,EAAAA,EAAI,CAAC2O,cAAc,SAAS0K,WAAW,SAAS/P,eAAe,S,WAC9D,SAACmU,GAAW,KACZ,UAACC,GAAgB,CAAClD,QAAS,CAAC,OAAQ,OAAQ,S,WAC1C,SAACf,MAAG,CAACC,IAAI,wCAAwChb,MAAM,MAAMC,OAAO,SACpE,SAAC8a,MAAG,CAACC,IAAI,kDAAkDhb,MAAM,MAAMC,OAAO,SAC9E,SAAC8a,MAAG,CAACC,IAAI,wCAAwChb,MAAM,MAAMC,OAAO,SACpE,SAAC8a,MAAG,CAACC,IAAI,wCAAwChb,MAAM,QAAQC,OAAO,WACtE,SAAC8a,MAAG,CAACC,IAAI,kDAAkDhb,MAAM,QAAQC,OAAO,cAElF,UAAC4X,MAAG,CAAC2F,MAAO,CAAEgC,aAAc,OAAQxf,MAAO,mB,WACzC,SAAC6X,MAAG,CAAC2F,MAAOE,G,UACV,SAAC+B,EAAAA,EAAO,CAACvP,EAAE,MAAMpF,MAAM,KAAKtB,MAAM,UAAUrJ,GAAG,qB,SAC5CsF,EAAE,8BAGP,SAACoS,MAAG,CAAC2F,MAAO,CAAEO,OAAQ,SAAU/d,MAAO,mB,UACrC,SAAC0f,GAAU,CAAC/Z,cAAeA,SA5C7BJ,IAAWG,EAAAA,GAAAA,MAEX,qB,UACE,SAACmS,MAAG,CAAC2F,MAAO,CAAEgC,aAAc,Q,UAC1B,SAAC3H,MAAG,CAAC2F,MAAOE,G,UACV,UAAC7F,MAAG,CAAC2F,MAAO,CAAEmC,WAAY,OAAQC,YAAa,Q,UAC5CV,EAAYlD,SACX,SAACN,EAAAA,EAAQ,CAACmE,GAAG,MAAM5f,OAAQ,GAAID,MAAO,OAEtC,SAACue,GAAiB,CAACnQ,SAAS,OAAO0M,MAAI,EAACgF,OAAO,IAAIxR,MAAO6Q,EAAYrP,GAAG,MAAMiQ,SAAU,KAE3F,SAACN,EAAAA,EAAO,CAAC3P,GAAG,OAAOhF,MAAM,KAAKtB,MAAM,U,SACjC/D,EAAE,0BASf,SAACga,EAAAA,EAAO,CAAC3P,GAAG,OAAOhF,MAAM,KAAKtB,MAAM,U,SACjC/D,EAAE,sBA0BL,UAAC6Y,GAAe,CACdjB,SAAS,WACTrd,MAAO,CAAC,QAAS,SACjBC,OAAQ,CAAC,OAAQ,SACjB0a,WAAW,SACX/P,eAAe,SACf4S,MAAO,CAAEgC,aAAc,Q,WAEvB,SAACX,GAAa,CAACrB,MAAO,CAAE1K,OAAQ,iC,UAC9B,SAAC4L,GAAqB,CAACnU,SAAU8U,OAEnC,SAACP,GAAgB,C,UACd,SAAC/D,MAAG,CAACC,IAAI,yCAAyChb,MAAM,QAAQC,OAAO,QAAQud,MAAO,CAAE1K,OAAQ,4C,2LC/RrGkN,IAAiBC,EAAAA,GAAAA,MAEjBC,GAA6B,W,OAAA,iBACjCC,G,IAEMC,EAUEC,EAEAC,EAQCC,E,iEApBHH,EAAQD,EAAepQ,KAAI,SAACyQ,GAChC,IAAQC,EAA+BD,EAA/BC,QAAStgB,EAAsBqgB,EAAtBrgB,GAAIugB,EAAkBF,EAAlBE,cACrB,MAAO,CACLC,KAAM,yBACN3G,QAASgG,GACTvX,OAAQ,CAACgY,EAAStgB,EAAIugB,O,iBAKJ,O,sBAAA,C,GAAME,EAAAA,GAAAA,GAAY,CAAEC,IAAKC,GAAcV,MAAAA,K,OAS3D,OATMC,EAAc,SAEdC,EAAYD,EAAYU,QAAO,SAACC,EAAkBC,GACtD,OAAOD,EAAMrJ,KAAK,IAAI5T,EAAAA,EAAUkd,EAAW,GAAG7N,eAC7CgC,GAAAA,IAKI,C,EAAA,CAAE8L,4BAH2Bf,EAAepQ,KAAI,SAACyQ,EAAe5f,GACrE,OAAO,kBAAK4f,GAAa,CAAES,WAAYZ,EAAYzf,QAEf0f,UAAAA,I,OAGtC,OAFOC,EAAK,SACZY,QAAQZ,MAAMA,GACP,C,EAAA,CAAEW,4BAA6B,KAAMZ,UAAW,O,wCAxBzDH,G,gCADiC,GA6B7BiB,GAA2B,SAACrO,EAAsBhB,GAQtD,IALA,IAAMsP,EAAmBtO,EAAa5F,MAAM,IAAIsD,UAC1C6Q,EAAqBvP,EAAY5E,MAAM,IAAIsD,UAC3C8Q,EAAkB,GAGf3gB,EAAQ,EAAGA,EAAQ0gB,EAAmBxU,OAAS,GAClDuU,EAAiBzgB,KAAW0gB,EAAmB1gB,GADMA,IAIzD2gB,EAAgB3O,KAAKyO,EAAiBzgB,IAKxC,OADsB2gB,EAAgBzU,OAAS,GAIpC0U,GAAoB,W,OAAA,iBAC/BC,G,IAEQhB,EAAS/O,EAAaK,EAExB2P,EAWAC,EAKAC,EAK+C,EAA3CV,EAA6BZ,E,wEAvB/BG,EAAsCgB,EAAtChB,QAAS/O,EAA6B+P,EAA7B/P,YAAaK,EAAgB0P,EAAhB1P,YAExB2P,EAA4BhQ,EAAY3B,KAAI,SAACxE,GACjD,MAAO,CACLkV,QAAAA,EACAtgB,GAAIoL,EAAOpL,GACXmQ,OAAQ/E,EAAO+E,OACf/K,OAAQgG,EAAOhG,OACfmb,cAAeU,GAAyB7V,EAAO+E,OAAQyB,OAKrD4P,EAAoBD,EAA0B5O,QAAO,SAACvH,GAC1D,OAAOA,EAAOmV,eAAiB,MAI3BkB,EAA0BD,EAAkB7O,QAAO,SAACvH,GACxD,OAAQA,EAAOhG,WAGWuH,OAAS,EACgB,C,EAAMoT,GAA2B0B,IADlFA,C,YAEF,OADmD,WAA3CV,EAA2C,EAA3CA,4BAA6BZ,EAAc,EAAdA,UAC9B,C,EAAA,CAAEY,4BAAAA,EAA6BS,kBAAAA,EAAmBrB,UAAAA,EAAWG,QAAAA,I,OAGtE,OAAIkB,EAAkB7U,OAAS,EACtB,C,EAAA,CAAEoU,4BAA6B,KAAMS,kBAAAA,EAAmBrB,UAAW,KAAMG,QAAAA,IAG3E,C,EAAA,a,gBAjCPgB,G,gCAD+B,GAqC3BI,GAA4B,SAACC,EAAuBpe,GACxD,IAAMqe,EAAcre,EAAcyB,MAAK,SAAC6c,G,OAAgBA,EAAY7hB,KAAO2hB,KAC3E,OAAkB,OAAXC,QAAW,IAAXA,OAAAA,EAAAA,EAAahQ,aAGhBkQ,GAA4B,W,OAAA,iBAChClc,EACApB,EACAjB,EACAgB,G,IAEQwd,EAaFC,EAOAC,EAKAC,EAKAC,EAGEC,EACAC,EACAC,EAEAC,EAIAC,EAKAC,E,iEA3CR,OAAsB,KAHhB,EAAaje,EAAXud,QAGGpV,QAKPnI,EAAgBoB,QAAQ8c,gBAAkB9c,EAAQ8c,cAJ7C,C,OASHV,EAAgBD,EAAOpP,QAAO,SAACgQ,GACnC,IAAMC,EAAuBrV,SAAShJ,EAAkB,IAAMse,GAAAA,GAE9D,OADgBtV,SAASoV,EAAM7d,UAAW,KACxB8d,KAIdX,EAAkBD,EAAcrP,QAAO,SAACgQ,GAC5C,OAAOA,EAAMvd,OAAOsd,gBAAkBnd,EAAAA,GAAAA,aAIlC2c,EAA6BD,EAAgBtP,QAAO,SAACgQ,GACzD,OAAQA,EAAMG,SAAWvV,SAASoV,EAAMI,aAAc,IAAM,QAIxDZ,EAAgBD,EAA2Bc,MAAM,EAAGC,GAAAA,KAExCtW,OAAS,GACnByV,EAAaD,EAAcvS,KAAI,SAAC+S,G,OAAUA,EAAM7d,aAC/B,C,GAAMoe,EAAAA,GAAAA,IAAkCd,EAAYxc,KAFzEuc,C,aASkC,OAP9BE,EAAiB,SACjBC,EAAoBD,EAAe1P,QAAO,SAACwQ,G,IAAcA,EAAAA,OAAS,OAATA,QAAS,IAATA,GAAsB,QAAtBA,EAAAA,EAAW5R,mBAAW,IAAtB4R,OAAAA,EAAAA,EAAwBxW,QAAS,KAE1F4V,EAA6BD,EAAkB1S,KAAI,SAACuT,GACxD,OAAO,kBAAKA,GAAS,CAAEvR,YAAa8P,GAA0ByB,EAAU7C,QAAS/c,QAG/C,C,EAAM6f,QAAQC,IAChDd,EAA2B3S,KAAI,SAACuT,G,OAAc9B,GAAkB8B,Q,OAalE,OAdMX,EAA8B,SAK9BC,EAA2BD,EAA4B7P,QAC3D,SAAC2Q,G,OAA4C,OAAtBA,KAQlB,C,EAJmCb,EAAyB9P,QACjE,SAAC2Q,G,OAAsBA,EAAkBvC,gC,OAM7C,MAAO,C,6BA/DPnb,EACApB,EACAjB,EACAgB,G,gCAJgC,GAmElC,M,0DCxIA,GAxCuC,SAACrC,GACtC,OACE,UAACqhB,GAAAA,GAAG,gBAACC,QAAQ,aAAgBthB,GAAK,C,WAChC,UAACuhB,OAAI,CACHzjB,GAAG,+BACH0jB,UAAU,iBACVC,EAAE,MACFC,EAAE,aACF/jB,MAAM,KACNC,OAAO,KACPiN,KAAK,Q,WAEL,SAAC8W,OAAI,CAAC9W,KAAK,QAAQ4W,EAAE,MAAMC,EAAE,aAAa/jB,MAAM,KAAKC,OAAO,QAC5D,SAACI,OAAI,CACH4jB,SAAS,UACTC,SAAS,UACT5jB,EAAE,6jBAGN,SAACD,OAAI,CACHC,EAAE,8yFACF4M,KAAK,UACL0W,KAAK,4BAEP,SAACvjB,OAAI,CACHC,EAAE,wHACF4M,KAAK,aAEP,SAAC7M,OAAI,CACH4jB,SAAS,UACTC,SAAS,UACT5jB,EAAE,+gBACF4M,KAAK,WAEP,SAACiX,UAAO,CAACC,GAAG,UAAUC,GAAG,SAASC,GAAG,UAAUC,GAAG,IAAIrX,KAAK,aAC3D,SAACiX,UAAO,CAACC,GAAG,UAAUC,GAAG,SAASC,GAAG,UAAUC,GAAG,IAAIrX,KAAK,iB,mSClC1D,IAoCMsX,GAAkB7kB,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAOlB8kB,IAAW9kB,EAAAA,EAAAA,IAAOwO,EAAAA,GAAK,Y,6BAAZxO,C,MAEF,Y,OAAoB,EAAjB+kB,mBAA6C,KAahEC,GAAW,CACfC,KA3D0C,SAACviB,GAC3C,OACE,SAAC0Y,MAAG,CAACC,IAAI,gCAAgCC,IAAI,GAAGjb,MAAM,QAAQC,OAAO,WA0DvE4kB,MAtD2C,SAACxiB,GAC5C,OACE,SAAC0Y,MAAG,CAACC,IAAI,iCAAiCC,IAAI,GAAGjb,MAAM,QAAQC,OAAO,WAqDxE6kB,KAjD0C,SAACziB,GAC3C,OACE,SAAC0Y,MAAG,CAACC,IAAI,gCAAgCC,IAAI,GAAGjb,MAAM,QAAQC,OAAO,WAgDvE8kB,KA5C0C,SAAC1iB,GAC3C,OACE,SAAC0Y,MAAG,CAACC,IAAI,gCAAgCC,IAAI,GAAGjb,MAAM,QAAQC,OAAO,WA2CvE+kB,MAvC2C,SAAC3iB,GAC5C,OACE,SAAC0Y,MAAG,CAACC,IAAI,iCAAiCC,IAAI,GAAGjb,MAAM,QAAQC,OAAO,WAsCxEglB,OAlC4C,SAAC5iB,GAC7C,OACE,SAAC0Y,MAAG,CAACC,IAAI,kCAAkCC,IAAI,GAAGjb,MAAM,QAAQC,OAAO,YAmC9DilB,GAAgD,Y,IAAG1b,EAAK,EAALA,MAAO8G,EAAM,EAANA,OAAQ6U,EAAI,EAAJA,KAAM/W,EAAQ,EAARA,SAAUsW,EAAiB,EAAjBA,kBACvFU,EAAgBT,GAASnb,GAC/B,OACE,UAAClI,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,SAASyS,SAAS,WAAWtS,GAAG,M,WACvE,SAACqa,EAAa,CAACplB,MAAW,OAAJmlB,QAAI,IAAJA,EAAAA,EAAQ,OAAQllB,OAAY,OAAJklB,QAAI,IAAJA,EAAAA,EAAQ,UACtD,SAACX,GAAe,C,UACd,SAACC,GAAQ,CAACC,kBAAmBA,EAAmB5J,MAAI,EAAC1M,SAAkB,OAARA,QAAQ,IAARA,EAAAA,EAAY,O,SACxEkC,UC1BX,GApCsD,Y,IACpDA,EAAM,EAANA,OAAM,IACN6U,KAAAA,OAAI,IAAG,SAAM,MACb/W,SAAAA,OAAQ,IAAG,SAAM,EACjBiX,EAAU,EAAVA,WACGljB,GAAc,UAJjBmO,SACA6U,OACA/W,WACAiX,eAG4C3Z,GAAAA,EAAAA,EAAAA,UAAS,IAA9C4Z,EAAqC5Z,EAAY,GAAjC6Z,EAAqB7Z,EAAY,GAElD8Z,EADiBnV,GAAqBC,GACVnD,MAAM,IAClC3N,EAAsB,CAAC,OAAQ,QAAS,OAAQ,OAAQ,QAAS,UAQvE,OANA4G,EAAAA,EAAAA,YAAU,WACJif,GAAcG,GAAwC,IAA1BF,EAAexY,QAC7CyY,EAAkBC,EAAWzV,KAAI,W,OAAM4C,MAAQ,GAAI,UAEpD,CAAC0S,EAAYG,EAAYF,KAG1B,SAAChkB,EAAAA,GAAI,gBAACsJ,eAAe,iBAAoBzI,GAAc,C,SACpDqjB,EAAWzV,KAAI,SAAC4J,EAAK/Y,GACpB,OACE,SAACskB,GAAc,CAEbR,kBAAmBW,GAAcC,EAAe1kB,GAChDukB,KAAMA,EACN/W,SAAUA,EACV5E,MAAOhK,EAAOoB,GACd0P,OAAQqJ,GALH8L,e,6aC/BjB,IAAMC,IAAsB/lB,EAAAA,EAAAA,IAAO2B,EAAAA,GAAK,Y,6BAAZ3B,C,MAGN,Y,OAAQ,EAALV,MAAkBO,OAAOyP,cAC/B,Y,OAAQ,EAALhQ,MAAkB0mB,MAAMC,WAC9B,Y,OAAQ,EAAL3mB,MAAkBO,OAAOC,cAItComB,GAAoBlmB,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAEf,Y,IAAGmmB,EAAa,EAAbA,c,MAAoB,GAAmD,OAAhDA,EAAgB,EAAoB,MAAhBA,EAAwB,IAAI,QAElE,Y,OAAQ,EAAL7mB,MAAkB0mB,MAAMC,WAI9B,Y,OAAQ,EAAL3mB,MAAkBO,OAAOumB,WAsC5C,GA9BkD,Y,IAAGC,EAAO,EAAPA,QAAS7lB,EAAE,EAAFA,GAAImQ,EAAM,EAANA,OAAQoQ,EAAa,EAAbA,cAClE,GAAQlb,EAAAA,EAAAA,MAANC,EAEF8K,EADiBF,GAAqBC,GACPnD,MAAM,IACrC2Y,EAAgBpF,EAAgB,EAEtC,OACE,UAACpf,EAAAA,EAAI,CAAC2O,cAAc,SAASH,GAAG,O,WAC9B,UAACxO,EAAAA,EAAI,CAACsJ,eAAe,gB,WACnB,UAACuD,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,UAAa,IACrCwc,GAAW7lB,KAEdugB,GAAiB,IAChB,UAACvS,EAAAA,EAAI,CAACC,SAAS,O,UACZ3I,EAAE,iBAAiB,IAAEqgB,SAI5B,UAACJ,GAAmB,C,UACjBhF,GAAiB,IAAK,SAACmF,GAAiB,CAACC,cAAeA,IACxDvV,EAAcR,KAAI,SAACkW,G,OAClB,SAAC9X,EAAAA,EAAI,CAAkDC,SAAS,O,SAC7D6X,GADQ,GAAoBA,OAAjBD,GAAW7lB,EAAG,KAAY+lB,OAATD,EAAM,KAAe,OAAZC,mB,mFC2LlD,GAvNuD,Y,IAyBPhF,EAzBUrZ,EAAS,EAATA,UAAWse,EAAa,EAAbA,cAC7D,GAAcrgB,EAAAA,EAAAA,MAAZC,QACF,GAAQP,EAAAA,EAAAA,MAANC,EACFO,GAAWC,EAAAA,EAAAA,MAC2CZ,EAAAA,IAApDxB,EAAoDwB,EAApDxB,8BAA+Ba,EAAqBW,EAArBX,iBACjC0hB,GAAWC,EAAAA,GAAAA,MACX,GAAmBrQ,EAAAA,GAAAA,KAAjBC,aAC8C9N,GAAAA,EAAAA,GAAAA,KAA9CC,EAA8CD,EAA9CC,sBAAuBke,EAAuBne,EAAvBme,QACsDne,GAAAA,EAAAA,GAAAA,KAA7EC,EAA6ED,EAA7EC,sBAAkDke,EAA2Bne,EAA3Bme,QACV5a,GAAAA,EAAAA,EAAAA,UAAS,GAAlD6a,EAAyC7a,EAAW,GAAlC8a,EAAuB9a,EAAW,GACPA,GAAAA,EAAAA,EAAAA,UAClD5I,KAAK2jB,KACHN,EAAcI,GAAkBrF,4BAA4BpU,OAASjJ,EAA8BqV,aAFhGwN,EAA6Chb,EAInD,GAJ0Bib,EAAyBjb,EAInD,GACKiK,GAAkBC,EAAAA,GAAAA,MAClBgR,GAAcC,EAAAA,GAAAA,IAAS1Q,GAAAA,GAAAA,IAAAA,SACvB2Q,EAAkBX,EAAcI,GAEhC7P,GAAgBC,EAAAA,EAAAA,MAChBsK,EAAa6F,EAAgBxG,UAC7ByG,EAAe9F,EAAWvJ,MAAMhB,GAChCsQ,GAAkBC,EAAAA,EAAAA,IAAiBhG,EAAY,GAAG/H,WAClDgO,GAAwBD,EAAAA,EAAAA,IAAiBF,EAAa,GAAG7N,WAYzDiO,GAVwCjG,EAW5C4F,EAAgB5F,4BAJT,CAAEjc,UAKT6hB,EAAgBrG,QALI2G,UANFlG,EAA4BnR,KAAI,SAACxE,GACjD,OAAOA,EAAOpL,MAKeknB,SAHdnG,EAA4BnR,KAAI,SAACxE,GAChD,OAAOA,EAAOmV,mBAUZ4G,EAAqBzjB,EAA8BqD,GAAGigB,EAAqBC,UAAUta,QAErFya,EAA4B,WAC5BpB,EAAcrZ,OAASyZ,EAAmB,GAE5CC,EAAoBD,EAAmB,GACvCvgB,GAASM,EAAAA,EAAAA,IAAmB,CAAEP,QAAAA,EAASrB,iBAAAA,MAEvCmD,KAiBE2f,EAAc,W,OAAA,mB,IACVviB,EAAWmiB,EAAWC,EACxB9e,E,iEAAU,OADRtD,EAAmCkiB,EAAnCliB,UAAWmiB,EAAwBD,EAAxBC,UAAWC,EAAaF,EAAbE,SACd,C,EAAMjf,GAAsB,WAC1C,OAAOqf,EAAAA,GAAAA,IAAoB9R,EAAiB,eAAgB,CAAC1Q,EAAWmiB,EAAWC,GAAW,CAC5FjB,SAAAA,Q,cAGO,QALL7d,EAAU,gBAKL,IAAPA,OAAAA,EAAAA,EAAShD,UACX0Q,EACExQ,EAAE,sBACF,SAAC0U,GAAAA,GAAsB,CAACC,OAAQ7R,EAAQ8R,gB,SACrC5U,EAAE,sEAAuE,CAAER,UAAAA,OAGhFsiB,K,6DAdgB,GAkBdG,EAAa,W,OAAA,mB,IACTziB,EACFsD,E,iEAAU,OADV,EAAgB4e,EAAdliB,UACQ,C,EAAM0iB,GAA0B,WAC9C,OAAOF,EAAAA,GAAAA,IAAoBb,EAAa,WAAY,CAACgB,GAAAA,GAAc3G,EAAW7N,YAAa,CACzFgT,SAAAA,Q,cAGO,QALL7d,EAAU,gBAKL,IAAPA,OAAAA,EAAAA,EAAShD,UACX0Q,EACExQ,EAAE,mBACF,SAAC0U,GAAAA,GAAsB,CAACC,OAAQ7R,EAAQ8R,gB,SACrC5U,EAAE,wEAAyE,CAAER,UAAAA,OAGlFsiB,K,6DAde,GAkBbM,EAAmB,W,OAAA,mB,IACf5iB,EACF6iB,EACAC,EACAC,EAED,MAAiB,EAAjB,IAAiB,E,iEALd/iB,EAAmCkiB,EAAnCliB,UACF6iB,EAnDiB,SAACV,EAAqBC,GAI7C,IAHA,IAAMY,EAAW,GACXC,EAAcrkB,EAA8BqV,WAEzC3F,EAAI,EAAGA,EAAI6T,EAAUta,OAAQyG,GAAK2U,EAAa,CACtD,IAAMC,EAAiBf,EAAUjE,MAAM5P,EAAG2U,EAAc3U,GAClD6U,EAAgBf,EAASlE,MAAM5P,EAAG2U,EAAc3U,GACtD0U,EAASrV,KAAK,CAAEwU,UAAWe,EAAgBd,SAAUe,IAGvD,OAAOH,EAyCeI,CADqBlB,EAAxBC,UAAwBD,EAAbE,UAExBU,EAAqBD,EAAchb,OACnCkb,EAAW,GAEZ,GAAiB,EAAjB,GAAiB,EAAjB,OAAiB,E,yDAAXM,EAEH/f,E,iEAAU,OAFP+f,EAAN,EAAiB,MAEJ,C,EAAMlgB,GAAsB,WAC1C,OAAOqf,EAAAA,GAAAA,IACL9R,EACA,eACA,CAAC1Q,EAAWqjB,EAAYlB,UAAWkB,EAAYjB,UAC/C,CAAEjB,SAAAA,Q,OAGN,OAAW,QARL7d,EAAU,gBAQL,IAAPA,OAAAA,EAAAA,EAAShD,SAEXyiB,EAASpV,KAAKrK,GACdoe,EAAsBoB,EAAqBC,EAASlb,QAGhDkb,EAASlb,SAAWib,GACtB9R,EACExQ,EAAE,sBACF,SAAC0U,GAAAA,GAAsB,CAACC,OAAQ7R,EAAQ8R,gB,SACrC5U,EACC,6GACA,CACE8iB,SAAUP,EAASlb,OACnB0b,WAAYT,EACZ9iB,UAAAA,O,KAOV,C,EAAA,cAhCC,EAAqB6iB,EAAa,mB,wBAAlC,OAAiB,e,8FAAjB,GAAiB,E,kDAAjB,GAAiB,EAAjB,EAAiB,E,iBAAjB,GAAiB,MAAjB,EAAiB,QAAjB,EAAiB,S,WAAjB,E,MAAA,E,wBAqCDE,EAASlb,SAAWib,IACtB9R,EACExQ,EAAE,qBACFA,EAAE,sEAAuE,CAAER,UAAAA,KAE7EsiB,K,6DAhDqB,GAoDzB,OACE,sB,WACE,UAACjmB,EAAAA,EAAI,CAAC2O,cAAc,S,WAClB,SAAC9B,EAAAA,EAAI,CAAC2B,GAAG,MAAM6N,UAAW,CAAC,SAAU,KAAM,Q,SACxClY,EAAE,cAEL,UAACnE,EAAAA,EAAI,CACHqZ,WAAY,CAAC,aAAc,KAAM,UACjC/P,eAAgB,CAAC,aAAc,KAAM,iBACrCqF,cAAe,CAAC,SAAU,KAAM,O,WAEhC,SAACuO,EAAAA,EAAO,CACNb,UAAW,CAAC,SAAU,KAAM,QAC5B8K,WAAW,MACXna,MAAO0Y,EACP5Y,SAAS,OACT0M,MAAI,EACJtR,MAAM,YACNkf,KAAK,YAEP,SAACC,GAAAA,EAAc,CAACxM,GAAI,CAAC,IAAK,KAAM,QAASnc,MAAM,aAEjD,SAACwe,EAAAA,EAAO,CACNrO,GAAI,CAAC,OAAQ,KAAM,KACnBwN,UAAW,CAAC,SAAU,KAAM,QAC5BrP,MAAO4Y,EACP9Y,SAAS,OACT5E,MAAM,aACNkf,KAAK,OACL5I,OAAO,UAIX,SAACxe,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,S,UACvC,UAACuD,EAAAA,EAAI,CAACgC,GAAG,MAAM/B,SAAS,OAAO5E,MAAM,a,UAClC/D,EAAE,SAAS,KAAGqhB,EAAgBrG,cAGnC,UAACnf,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,SAAS4S,MAAO,CAACoL,IAAI,Q,WAC5D,UAACvf,EAAAA,EAAM,CACLsB,UAAWke,EACXpe,QAASoe,GAAY,SAAC/e,GAAAA,EAAa,CAACC,MAAI,EAACP,MAAM,iBAAoB,KACnE2G,GAAG,OACHnQ,MAAM,OACNwK,QAAS,W,OAAO8c,EAAqBO,IAAqBL,K,UAE7C/hB,EAAZojB,EAAc,WAAgB,SAAS,IAAEnC,EAAqB,EAAI,IAAuB,OAAnBA,EAAmB,KAAK,OAEjG,UAACrd,EAAAA,EAAM,CACLsB,UAAWme,EACXre,QAASqe,GAAgB,SAAChf,GAAAA,EAAa,CAACC,MAAI,EAACP,MAAM,iBAAoB,KACvE2G,GAAG,OACHnQ,MAAM,OACNwK,QAAS,W,OAAOkd,K,UAECjiB,EAAhBqjB,EAAkB,UAAe,QAAQ,IAAEpC,EAAqB,EAAI,IAAuB,OAAnBA,EAAmB,KAAK,a,6fC5N3G,IAAM5X,IAAcnP,EAAAA,EAAAA,IAAOopB,GAAAA,IAAe,Y,4BAAtBppB,C,MAIhB,Y,OAAQ,EAALV,MAAkB2C,aAAaC,MAKhCmnB,IAAoBrpB,EAAAA,EAAAA,IAAOspB,GAAAA,IAAY,Y,4BAAnBtpB,C,MACV,Y,OAAQ,EAALV,MAAkBO,OAAOmQ,UAAUC,cAKhDsZ,GAAgBvpB,EAAAA,GAAAA,IAAAA,WAAU,C,4BAAVA,C,MAQhBwpB,GAAe,YACnBC,EAAAA,GAAAA,GAAS,CACPC,cAAe,IACfC,cAAe,GACfC,QAAS,GACTC,OAAQ,IACRC,OAAQ,CACN3F,EAAG,GACHC,EAAG,OA6CT,GAnC+D,Y,IAAGzU,EAAS,EAATA,UAAW6W,EAAa,EAAbA,cACrE,GAAQ3gB,EAAAA,EAAAA,MAANC,EACF,GAAcK,EAAAA,EAAAA,MAAZC,QACF,EAAuBV,IAArBX,iBACFsB,GAAWC,EAAAA,EAAAA,MAMjB,OAJAG,EAAAA,EAAAA,YAAU,WACRsjB,KAAMP,GAAc,OACnB,KAGD,UAACra,GAAW,CAAC6a,UAAU,Q,WACrB,SAACT,GAAa,C,UACZ,SAACnO,MAAG,CAACC,IAAI,0BAA0BC,IAAI,iBAAiBhb,OAAO,QAAQD,MAAM,aAE/E,UAACgpB,GAAiB,C,WAChB,SAACY,GAAAA,GAAU,C,UACT,SAACnK,EAAAA,EAAO,C,SAAEha,EAAE,yBAEd,SAACokB,GAAAA,GAAgB,CAACva,UAAWA,QAE/B,SAACwa,GAAAA,GAAS,CAAC9e,EAAE,O,UACX,SAAC+e,GAAgB,CACfliB,UAAW,WACT7B,GAASM,EAAAA,EAAAA,IAAmB,CAAEP,QAAAA,EAASrB,iBAAAA,KAC9B,OAAT4K,QAAS,IAATA,GAAAA,KAEF6W,cAAeA,U,sXCpDzB,IAAM6D,IAASrqB,EAAAA,EAAAA,IAAO2B,EAAAA,GAAK,Y,6BAAZ3B,C,MAIO,Y,OAAQ,EAALV,MAAkBO,OAAOyqB,YACrB,Y,OAAQ,EAALhrB,MAAkBO,OAAOyP,cAGnDib,IAAYvqB,EAAAA,EAAAA,IAAOC,EAAAA,GAAI,Y,6BAAXD,C,MAQZwqB,GAAiB,WACrB,OACE,sB,WACE,SAACzO,EAAAA,EAAQ,CAAC1b,MAAM,OAAOC,OAAO,OAAOkQ,GAAG,MAAML,GAAG,SACjD,SAAC4L,EAAAA,EAAQ,CAAC1b,MAAM,OAAOC,OAAO,OAAO6P,GAAG,aAwL9C,GAnLiE,Y,IAiJnDsa,EAjJsD3J,EAAO,EAAPA,QAC5B/U,GAAAA,EAAAA,EAAAA,UAAuB,MAAtD2e,EAA+B3e,EAA4B,GAA9C4e,EAAkB5e,EAA4B,GACtBA,GAAAA,EAAAA,EAAAA,UAA0B,MAA/D6e,EAAqC7e,EAA+B,GAApD8e,EAAqB9e,EAA+B,GACvBA,GAAAA,EAAAA,EAAAA,UAKjD,CAAEiW,kBAAmB,KAAMT,4BAA6B,KAAMuJ,WAAW,EAAOC,UAAW,OALvFN,EAA6C1e,EAKiD,GAL1Eif,EAAyBjf,EAKiD,GAC/F,GAAQlG,EAAAA,EAAAA,MAANC,EACF,GAAY8J,EAAAA,EAAAA,MAAVtQ,MACF,GAAc6G,EAAAA,EAAAA,MAAZC,QACD6kB,GAA2G,QAApFjO,EAAAA,EAAAA,IAAS,SAACkO,GAAgB,CAAC1E,cAAe,CAACiE,EAAmBM,cAAgB,GAAM,MAE5G1T,EAAmB,W,OACvB,sB,WACE,SAAC7I,EAAAA,EAAI,CAAC2B,GAAG,O,SACNrK,EAAE,oGAEL,SAAC0I,EAAAA,EAAI,CAAC2B,GAAG,O,SAAQrK,EAAE,mDACnB,SAAC0I,EAAAA,EAAI,CAAC2B,GAAG,M,SAAOrK,EAAE,qDAClB,SAAC0I,EAAAA,EAAI,C,SACF1I,EAAE,+HAKsCwR,GAAAA,EAAAA,EAAAA,IAAW,SAACD,EAAgB,IAAK,CAC9EE,UAAW,aACXC,cAAe,CAAC,GAAI,MAFdC,EAAuCH,EAAvCG,UAAWC,EAA4BJ,EAA5BI,QAASC,EAAmBL,EAAnBK,gBAK5BlR,EAAAA,EAAAA,YAAU,WACR,IAkBM0kB,EAAY,W,OAAA,mB,IACmB,EAA5BpZ,EAAaD,EAIdsZ,EACA5K,EAgBE6K,EAIAC,E,iEAzB2B,O,EAAM1H,QAAQC,IAAI,EACnD0H,EAAAA,GAAAA,IAA4BnlB,EAAS0a,IACrC0K,EAAAA,GAAAA,IAAa1K,M,OAGQ,OALY,EAGjC,kBAHiC,S,IAA5B/O,EAA4B,EAGjC,GAHkBD,EAAe,EAGjC,GACIsZ,EAAuBvZ,GAAuBC,GAC7B,C,EAAM+P,GAAkB,CAC7Cf,QAAAA,EACA/O,YAAAA,EACAK,YAAagZ,EAAqBhZ,YAAYqB,c,cAH1C+M,EAAiB,SAMvBwK,EAAsB,CACpBF,WAAW,EACX9I,kBAAiC,OAAdxB,QAAc,IAAdA,OAAAA,EAAAA,EAAgBwB,kBACnCT,4BAA2C,OAAdf,QAAc,IAAdA,OAAAA,EAAAA,EAAgBe,4BAC7CwJ,UAAWvK,IAEbmK,EAAeS,IAGG,OAAd5K,QAAc,IAAdA,OAAAA,EAAAA,EAAgBwB,oBAtCpByJ,EAwCI1Z,EAvCJ2Z,EAwCIlL,EAAewB,kBAFXqJ,EApC6BI,EAAYrb,KAAI,SAACxE,GAEpD,OADgC8f,EAAmBlmB,MAAK,SAACqb,G,OAAkBA,EAAcrgB,KAAOoL,EAAOpL,OAIhGoL,KAK0B6D,EA8B0B4b,EAArDC,EA7BDK,KAAQlc,GAAS,SAAC7D,G,YAAqCb,IAAzBa,EAAOmV,cAA8B,EAAInV,EAAOmV,cAAgB,IAAI,QA8BvG8J,EAAkBS,IAElBT,EAAkB9Y,G,IAjCc,IAACtC,EAbnCgc,EACAC,Q,kDAgBgB,GAiClBP,MACC,CAACrK,EAAS1a,IAuBb,OACE,sB,UACGuR,GAAkBD,GACnB,UAAC2S,GAAM,C,WACL,SAAC7b,EAAAA,EAAI,CAAC2M,MAAI,EAACe,cAAc,YAAYrS,MAAM,YAAY4E,SAAS,OAAO0B,GAAG,M,SACvErK,EAAE,qBAEO,OAAX4kB,QAAW,IAAXA,OAAAA,EAAAA,EAAatY,cACZ,SAACwZ,GAAc,CAACjb,OAAQ+Z,EAAYtY,YAAYqB,cAEhD,SAACsI,EAAAA,EAAQ,CAAC1b,MAAM,QAAQC,OAAO,aAGnC,UAACiqB,GAAS,C,WACR,SAAC/b,EAAAA,EAAI,CAAC2M,MAAI,EAACe,cAAc,YAAYrS,MAAM,YAAY4E,SAAS,OAAOyR,GAAG,O,SACvEpa,EAAE,mBAEL,UAACnE,EAAAA,EAAI,CAACwO,GAAG,MAAMlF,eAAe,gB,WAC5B,UAACtJ,EAAAA,EAAI,C,WACH,SAACkqB,GAAAA,EAAM,CAACxrB,MAAM,OAAOC,OAAO,OAAO4a,GAAG,SACtC,UAAC1M,EAAAA,EAAI,CAAC2M,MAAI,EAACtR,MAAM,O,UACd/D,EAAE,iBAAiB,WAGxB,SAAC0I,EAAAA,EAAI,CAAC2M,MAAI,EAACtR,MAAM,O,SACd+gB,EAAiBA,EAAezd,QAAS,SAAC4O,EAAAA,EAAQ,CAAC1b,MAAM,OAAOC,OAAO,eAG5E,UAACqB,EAAAA,EAAI,CAACwO,GAAG,OAAOlF,eAAe,gB,WAC7B,UAACtJ,EAAAA,EAAI,C,WACH,SAACqnB,GAAAA,EAAc,CAAC3oB,MAAM,OAAOC,OAAO,OAAO4a,GAAG,SAC9C,UAAC1M,EAAAA,EAAI,CAAC2M,MAAI,EAACtR,MAAM,O,UACd/D,EAAE,mBAAmB,WAG1B,SAAC0I,EAAAA,EAAI,CAAC2M,MAAI,EAACtR,MAAM,O,SACd4gB,EAAmBK,WACA,OAAlBL,QAAkB,IAAlBA,GAAqC,QAArCA,EAAAA,EAAoBzI,yBAAiB,IAArCyI,OAAAA,EAAAA,EAAuCtd,SAAU,KAEjD,SAAC4O,EAAAA,EAAQ,CAAC1b,MAAM,OAAOC,OAAO,cAInCsqB,EACCA,EAAexa,KAAI,SAACxE,GAClB,OACE,SAACkgB,GAAY,CAEXtrB,GAAIoL,EAAOpL,GACXmQ,OAAQ/E,EAAO+E,OACfoQ,cAAenV,EAAOmV,cACtBnb,OAAQgG,EAAOhG,QAJVgG,EAAOpL,QASlB,sB,WACE,SAACgqB,GAAc,KACf,SAACA,GAAc,KACf,SAACA,GAAc,KACf,SAACA,GAAc,WAIrB,SAAC7oB,EAAAA,EAAI,CAAC8a,UAAW,aAAqC,OAAxBnd,EAAMO,OAAOyP,YAAc0L,WAAW,SAAS/P,eAAe,S,SACzFwf,EAAmBK,WAtFR,W,IACZL,EAAJ,OAAsB,OAAlBA,QAAkB,IAAlBA,GAA+C,QAA/CA,EAAAA,EAAoBlJ,mCAA2B,IAA/CkJ,OAAAA,EAAAA,EAAiDtd,QAAS,GAE1D,SAACzD,EAAAA,EAAM,CAACmB,QAASogB,EAAqBza,GAAG,OAAOnQ,MAAM,O,SACnDyF,EAAE,oBAIJ2kB,EAAmBzI,kBAUjB,MARH,SAAC9J,MAAG,CAACxJ,IAAK+I,E,UACR,UAAC9V,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,SAASuF,GAAG,O,WACnD,SAACub,GAAAA,EAAQ,CAACzrB,OAAO,OAAOD,MAAM,OAAOwJ,MAAM,aAAaqR,GAAG,SAC3D,SAAC8Q,GAAAA,EAAW,CAACniB,MAAM,a,SAAc/D,EAAE,4BAyENmmB,S,gNC1NzC,IAAM1B,IAAYvqB,EAAAA,EAAAA,IAAOC,EAAAA,GAAI,Y,6BAAXD,C,MA6ClB,GApCiC,WAC/B,IAAM,GAAQ6F,EAAAA,EAAAA,MAANC,EACF,GAAY8J,EAAAA,EAAAA,MAAVtQ,MAIJoG,EAAAA,IAFFZ,EAEEY,EAFFZ,gBAAe,EAEbY,EADFpB,aAAgBsB,EAAM,EAANA,OAAQmM,EAAW,EAAXA,YAEpB2N,EAAsB9Z,IAAWG,EAAAA,GAAAA,MAAsBjB,EAE7D,OACE,sB,WACE,UAACnD,EAAAA,EAAI,CAAC2O,cAAc,S,WAClB,SAAC9B,EAAAA,EAAI,CAAC2M,MAAI,EAACe,cAAc,YAAYrS,MAAM,YAAY4E,SAAS,OAAO0B,GAAG,O,SACvErK,EAAE,mBAEL,SAACykB,GAAS,C,SACPxY,EAAYtC,QAAQW,KAAI,SAACxE,EAAQ3K,GAChC,OACE,SAAC6qB,GAAY,CAEXzF,QAASplB,EAAQ,EACjBT,GAAIoL,EAAOpL,GACXmQ,OAAQ/E,EAAO+E,OACf/K,OAAQgG,EAAOhG,QAJVgG,EAAOpL,aAUtB,SAACmB,EAAAA,EAAI,CAAC8a,UAAW,aAAqC,OAAxBnd,EAAMO,OAAOyP,YAAc0L,WAAW,SAAS/P,eAAe,S,UAC1F,SAAC+T,GAAgB,CAACpU,SAAU8U,EAAqBlP,GAAG,OAAOnQ,MAAM,e,sGCvCzE,IAAM8O,IAAcnP,EAAAA,EAAAA,IAAOoP,EAAAA,GAAM,Y,6BAAbpP,C,MAChB,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MA4BtC,GAjB0D,Y,IAAGkG,EAAS,EAATA,UAAWmR,EAAO,EAAPA,QAASoL,EAAW,EAAXA,YACzE,GAAQrmB,EAAAA,EAAAA,MAANC,EACF,GAAY8J,EAAAA,EAAAA,MAAVtQ,MACF,EAAuBoG,IAArBX,iBACFonB,GAA6B,OAAXD,QAAW,IAAXA,OAAAA,EAAAA,EAAahJ,iBAAkBnd,EAAAA,GAAAA,WAA2B+a,IAAY/b,EAE9F,OACE,SAACoK,GAAW,CACVW,MAAO,GAAiBgR,OAAdhb,EAAE,SAAS,KAAW,OAARgb,GACxBnR,UAAWA,EACXI,iBAAkBzQ,EAAMO,OAAOmQ,UAAUC,W,SAExCkc,GAAkB,SAACC,GAAyB,CAACtL,QAASA,KAAc,SAACuL,GAAwB,OC6DpG,KAtFwBC,E,SAAAA,MAmBwC,Y,IAC9DvL,EAAa,EAAbA,cACAwL,EAAU,EAAVA,WACAC,EAAa,EAAbA,cACAC,EAAe,EAAfA,gBACAC,EAAM,EAANA,OACA1hB,EAAS,EAATA,UAEM,GAAQnF,EAAAA,EAAAA,MAANC,EACFiR,GAAgBC,EAAAA,EAAAA,MAatB,OACE,UAACrV,EAAAA,EAAI,CAAC2O,cAAc,S,UACjBtF,GACC,SAAC+Q,EAAAA,EAAQ,CAAC5L,GAAG,MAAMK,GAAG,MAAMlQ,OAAQ,GAAID,MAAO,MAE/C,SAACmO,EAAAA,EAAI,CAAC2M,MAAI,EAACtR,MAAO6iB,EAAS,UAAY,Y,SAhBvB,WACpB,IAAMC,EAAc5L,EAAgB,EACpC,OAAI2L,EACK5mB,EAAE,WAGFA,EADa,IAAlBib,EACO,0BAEF,4BAF6B,CAAE4L,YAAAA,IAWjCC,MAGL,sB,UACG5hB,GAAauhB,EAAWlQ,SACvB,SAACN,EAAAA,EAAQ,CAACmE,GAAG,MAAMhF,GAAG,OAAO5a,OAAQ,GAAID,MAAO,OAEhD,SAACwe,EAAAA,EAAO,CAACpQ,SAAS,OAAO0M,MAAI,EAAC4N,KAAK,QAAQpa,OAAO8Q,EAAAA,EAAAA,IAAiB8M,EAAY,IAAKnM,SAAU,IAE/FpV,GAAauhB,EAAWlQ,SACvB,qB,UACE,SAACN,EAAAA,EAAQ,CAACvL,GAAG,MAAML,GAAG,OAAO7P,OAAQ,GAAID,MAAO,QAGlD,SAACwe,EAAAA,EAAO,CACNpQ,SAAS,OACT5E,MAAM,aACNsW,OAAO,KACPxR,OAAO8Q,EAAAA,EAAAA,IAAiB8M,EAAWxU,MAAMhB,GAAgB,GACzDqJ,SAAU,IAGbqM,GAAmBF,IAClB,sB,UACqB,MAAlBC,IACC,UAAChe,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,WACzBuN,EAAAA,EAAAA,IAAsBmV,EAAWrU,IAAInK,SAASye,EAAe,KAAM,GAAI,GAAG,SAAO1mB,EAAE,YAGxF,UAAC0I,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,UACzB2iB,EAAc,IAAE1mB,EAAE,iC,gUC5EjC,IAAM/E,IAAUf,EAAAA,EAAAA,IAAO2B,EAAAA,GAAK,Y,6BAAZ3B,C,MAKV6sB,GAAe7sB,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAKjB,Y,OAAQ,EAALV,MAAkB2C,aAAaC,MAqFtC,GAnEqD,Y,IAAG4qB,EAAe,EAAfA,gBAAiBL,EAAe,EAAfA,gBACjE,GAAQ5mB,EAAAA,EAAAA,MAANC,EACkBiG,GAAAA,EAAAA,EAAAA,UAAuB,CAC/Cf,WAAW,EACX+hB,WAAYtX,GAAAA,GACZuX,uBAAwBvX,GAAAA,GACxBlD,iBAAkB,KAClBD,uBAAwB,OALnBzO,EAAmBkI,EAMxB,GANYkhB,EAAYlhB,EAMxB,IAEFtF,EAAAA,EAAAA,YAAU,WACR,GAAIqmB,EAAiB,CACnB,IAAQ7a,EAAgF6a,EAAhF7a,YAAaxN,EAAmEqoB,EAAnEroB,qBAAsB8N,EAA6Cua,EAA7Cva,iBAAkBD,EAA2Bwa,EAA3Bxa,uBAGvDya,EADkB,IAAI3oB,EAAAA,EAAU6N,GAAaiG,IAAI,KACpBA,IAAI,KAAKH,MAAM,IAAI3T,EAAAA,EAAUK,IAC1DyoB,EAAwB,IAAI9oB,EAAAA,EAAUK,GAAsBwT,MAAM8U,GACxEE,EAAS,CACPjiB,WAAW,EACX+hB,WAAAA,EACAC,uBAAwBE,EACxB3a,iBAAAA,EACAD,uBAAAA,SAGF2a,EAAS,CACPjiB,WAAW,EACX+hB,WAAYtX,GAAAA,GACZuX,uBAAwBvX,GAAAA,GACxBlD,iBAAkB,KAClBD,uBAAwB,SAG3B,CAACwa,IAEJ,IAAMK,EAAiB,SAACC,GACtB,IAAMC,EAAoB,IAAIjpB,EAAAA,EAAUP,EAAM0O,iBAAiB6a,IAAUlV,IAAI,KAC7E,OAAOrU,EAAMmpB,uBAAuB9U,IAAI,KAAKH,MAAMsV,IAG7CriB,EAAkDnH,EAAlDmH,UAAWsH,EAAuCzO,EAAvCyO,uBAAwBya,EAAelpB,EAAfkpB,WAI3C,OACE,UAAChsB,GAAO,C,WACN,UAACyN,EAAAA,EAAI,CAACC,SAAS,OAAO0B,GAAG,O,UACtBrK,EAAE,+DAAgE,KACjE2mB,GAAmB3mB,EAAE,oCAEzB,UAAC+mB,GAAY,C,UARM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GASjBzc,KAAI,SAACkd,G,OACnB,SAACC,GAAmB,CAElBxM,cAAeuM,EACff,YAAavhB,GAAamiB,EAAeG,GACzCd,eAAgBxhB,GAAasH,EAAuBgb,GACpDb,gBAAiBA,EACjBzhB,UAAWA,GALNsiB,OAQT,SAACC,GAAmB,CAACxM,cAAe,EAAGwL,WAAYQ,EAAYL,QAAM,EAAC1hB,UAAWA,W,unBCtEzF,IAAMwiB,GAAOxtB,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAIT,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAMhCgkB,IAAaztB,EAAAA,EAAAA,IAAO0tB,GAAAA,GAAK,Y,6BAAZ1tB,C,MAGf,Y,OAAQ,EAALV,MAAkB2C,aAAaC,MAIlC,Y,OAAQ,EAAL5C,MAAkB2C,aAAawH,MAKhCkkB,GAAkB3tB,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MACR,Y,OAAQ,EAALV,MAAkBO,OAAOC,cAuK5C,GA/JqB,W,IAkBKiS,EAdpBlM,GAAAA,EAAAA,EAAAA,MAFFC,EAEED,EAFFC,EACA8nB,EACE/nB,EADF+nB,gBAAmB3c,OAEf,GAAc9K,EAAAA,EAAAA,MAAZC,QACoDV,EAAAA,IAApDX,EAAoDW,EAApDX,iBAAkBD,EAAkCY,EAAlCZ,gBAAiBR,EAAiBoB,EAAjBpB,aACnCqB,EAAuDrB,EAAvDqB,QAASlB,EAA8CH,EAA9CG,qBAAsBsN,EAAwBzN,EAAxByN,YAAanM,EAAWtB,EAAXsB,OAE7CioB,GAA2G,QAA9E7Q,EAAAA,EAAAA,IAAS,SAAC8Q,GAAgB,CAAChN,QAAS/b,EAAkBmnB,YAAatmB,KAAW,MAC9EmG,GAAAA,EAAAA,EAAAA,WAAS,GAAtCgiB,EAA6BhiB,EAAe,GAAhCiiB,EAAiBjiB,EAAe,GAC7C2T,EAAsB9Z,IAAWG,EAAAA,GAAAA,MAAsBjB,EAEvDiS,GAAgBC,EAAAA,EAAAA,MAChBuI,EAAc9a,EAAqBsT,MAAMhB,GACzCkX,EAAoC,IAAxBlgB,SAASpI,EAAS,IAC9BuoB,EAAU,IAAI/c,KAAK8c,GACnBE,EAAgBvoB,IAAWG,EAAAA,GAAAA,KAC3BqoB,GAA6B,OAAXrc,QAAW,IAAXA,GAAoB,QAApBA,EAAAA,EAAatC,eAAO,IAApBsC,OAAAA,EAAAA,EAAsB5E,SAAU,EA2DlDkhB,EAEAvoB,EADJsoB,EAAkB,EACZ,uCACA,sCADwC,CAAE9a,OAAQ8a,IAEdC,GAAiD,OAAjDA,EAAgB7gB,MAAM4gB,EAAgB3a,YAAW,GAAtF6a,EAAqCD,EAAiD,GAAzEE,EAAwBF,EAAiD,GAE7F,OACE,UAACZ,GAAU,C,WACT,SAACe,GAAAA,EAAU,CAACnjB,EAAE,Y,UACZ,UAAC1J,EAAAA,EAAI,CAACsJ,eAAe,gB,WACnB,SAAC6U,EAAAA,EAAO,CAAC5E,GAAG,O,SAAQpV,EAAE,gBACtB,UAAC0I,EAAAA,EAAI,C,UACFzJ,GAAoB,IAAoB,OA5B7Ca,IAAWG,EAAAA,GAAAA,KACN,GAAoB,OAAjBhB,EAAiB,MAEzBa,IAAWG,EAAAA,GAAAA,QACN,GAEFgI,SAAShJ,EAAkB,IAAM,GAsBW,IAAE0pB,QAAQ9oB,KAlBzDC,IAAWG,EAAAA,GAAAA,KACN,GAAiBmoB,OAAdpoB,EAAE,QAAQ,MAAoD,OAAhDooB,EAAQQ,eAAezd,EAAQI,KAElD,aAmBL,SAACsd,GAAAA,EAAQ,C,UACP,UAACnB,GAAI,C,WACH,SAAC7rB,EAAAA,EAAI,CAACsJ,eAAgB,CAAC,SAAU,KAAM,KAAM,c,UAC3C,SAAC6U,EAAAA,EAAO,C,SAAEha,EAAE,kBAEd,SAACnE,EAAAA,EAAI,CAAC2O,cAAc,SAASH,GAAG,O,SA7ElCvK,IAAWG,EAAAA,GAAAA,OAAuBH,IAAWG,EAAAA,GAAAA,WAE7C,UAAC+Z,EAAAA,EAAO,CAAC3U,MAAM,KAAKtB,MAAM,YAAYmU,UAAW,CAAC,SAAU,KAAM,KAAM,Q,UACrElY,EAAE,eAAe,UAKtB,sB,UACGyZ,EAAYlD,SACX,SAACN,EAAAA,EAAQ,CAACmE,GAAG,MAAM5f,OAAQ,GAAID,MAAO,OAEtC,SAACwe,EAAAA,EAAO,CACNpQ,SAAS,OACT5E,MAAM,YACNmU,UAAW,CAAC,SAAU,KAAM,KAAM,QAClC8K,WAAW,IACX3N,MAAI,EACJgF,OAAO,KACPxR,OAAO8Q,EAAAA,EAAAA,IAAiBF,EAAa,GACrCa,SAAU,IAGbb,EAAYlD,SACX,SAACN,EAAAA,EAAQ,CAACmE,GAAG,MAAM5f,OAAQ,GAAID,MAAO,MAEtC,SAACwe,EAAAA,EAAO,CACNpQ,SAAS,OACT5E,MAAM,aACNmU,UAAW,CAAC,SAAU,KAAM,KAAM,QAClC+K,KAAK,OACLpa,OAAO8Q,EAAAA,EAAAA,IAAiBhb,EAAsB,GAC9C2b,SAAU,UAgDZ,SAACngB,EAAAA,EAAG,CAACkc,QAAS,CAAC,OAAQ,KAAM,KAAM,Q,UACjC,SAAC2D,EAAAA,EAAO,C,SAAEha,EAAE,qBAEd,UAACnE,EAAAA,EAAI,CAAC2O,cAAe,CAAC,SAAU,KAAM,KAAM,OAAQ0K,WAAY,CAAC,SAAU,KAAM,KAAM,c,UACpFmT,IACC,UAACxsB,EAAAA,EAAI,CACH2O,cAAc,SACd4K,GAAI,CAAC,KAAM,KAAM,KAAM,QACvBF,WAAY,CAAC,SAAU,KAAM,KAAM,c,UAElC5U,IACC,UAACzE,EAAAA,EAAI,CAACsJ,eAAgB,CAAC,SAAU,KAAM,KAAM,c,WAC3C,UAACuD,EAAAA,EAAI,CAAC2N,QAAQ,S,UAAUmS,EAAY,OAClCvc,EAAY/G,WAGZ,SAAC+Q,EAAAA,EAAQ,CAAC3Q,GAAG,MAAM9K,OAAQ,GAAID,MAAO,MAFtC,SAACwe,EAAAA,EAAO,CAAClQ,MAAOyf,EAAiBhO,SAAU,EAAGjE,QAAQ,SAAShB,MAAI,EAAC/P,GAAG,SAIzE,UAACoD,EAAAA,EAAI,CAAC2N,QAAQ,S,UAAS,IAAEoS,SAG3Bxc,EAAY/G,WAAaojB,EAAkB,IAC3C,SAAC1kB,EAAAA,EAAM,CACLmB,QAASgjB,EACTvtB,OAAO,OACPD,MAAM,cACNgL,EAAE,IACF8E,GAAI,CAAC,OAAQ,KAAM,KAAM,KACzB7E,QAAQ,OACRH,MAAM,K,SAELrF,EAAE,2BAKX,SAACkZ,GAAgB,CAACpU,SAAU8U,EAAqBkP,SAAS,mBAIhE,UAACC,GAAAA,EAAU,CAACxjB,EAAE,I,UACX0iB,IACC,SAACJ,GAAe,C,UACd,SAACmB,GAAc,CAAChC,gBAAiBxoB,OAGnCsB,IAAWG,EAAAA,GAAAA,MAAsBH,IAAWG,EAAAA,GAAAA,SAC5C,SAACpE,EAAAA,EAAI,CAAC0J,EAAE,WAAW2P,WAAW,SAAS/P,eAAe,S,UACpD,SAAC8jB,GAAAA,EAAe,CAACC,SAAUjB,EAAYljB,QAAS,W,OAAMmjB,GAAeD,I,SACrDjoB,EAAbioB,EAAe,OAAY,sB,6SCrM1C,IAAMkB,IAAkBjvB,EAAAA,EAAAA,IAAO2B,EAAAA,GAAK,Y,6BAAZ3B,C,MACpB,Y,IAAGV,EAAK,EAALA,M,OAAkB,EAAX4vB,YAAiC,8BAAsD,OAAxB5vB,EAAMO,OAAOsvB,WAAW,KAAM,MAMrGC,IAAkBpvB,EAAAA,EAAAA,IAAO8f,EAAAA,GAAQ,Y,6BAAf9f,C,MACR,Y,OAAQ,EAALV,MAAkBO,OAAOmQ,UAAU8O,QA8CtD,GAzCsC,Y,IAAGpb,EAAO,EAAPA,QAASD,EAAK,EAALA,MAAOD,EAAI,EAAJA,KAAMP,EAAO,EAAPA,QAASosB,EAAgB,EAAhBA,iBAChE,GAAQxpB,EAAAA,EAAAA,MAANC,EAER,OACE,UAACmpB,GAAe,CAACjU,WAAW,WAAWnZ,UAAWwtB,E,UAC/CZ,QAAQjrB,KACP,sB,WACE,SAAC4rB,GAAe,CAACjf,GAAG,OAAOhF,MAAM,KAAK+P,GAAG,M,SACtC1X,KAEH,SAAC4rB,GAAe,CAAClU,GAAG,O,SAAQpV,EAAE,UAGjC2oB,QAAQhrB,KACP,sB,WACE,SAAC2rB,GAAe,CAACjf,GAAG,OAAOhF,MAAM,KAAK+P,GAAG,M,SACtCzX,KAEH,SAAC2rB,GAAe,CAAClU,GAAG,O,SAAQpV,EAAE,UAGjC2oB,QAAQ/qB,KACP,sB,WACE,SAAC0rB,GAAe,CAACjf,GAAG,OAAOhF,MAAM,KAAK+P,GAAG,M,SACtCxX,KAEH,SAAC0rB,GAAe,CAAClU,GAAG,O,SAAQpV,EAAE,UAGjC2oB,QAAQxrB,KACP,sB,WACE,SAACmsB,GAAe,CAACjf,GAAG,OAAOhF,MAAM,KAAK+P,GAAG,M,SACtCjY,KAEH,SAACmsB,GAAe,CAAClU,GAAG,O,SAAQpV,EAAE,cCxBxC,GA9B8B,SAACE,GAC7B,IAAMK,GAAWC,EAAAA,EAAAA,MAC+ByF,GAAAA,EAAAA,EAAAA,UAAS,MAAlDujB,EAAyCvjB,EAAc,GAArCwjB,EAAuBxjB,EAAc,GACxDyjB,GAAQjnB,EAAAA,EAAAA,QAAO,MACf,EAAuB7C,IAArBX,iBAuBR,OArBA0B,EAAAA,EAAAA,YAAU,WACRJ,GAASopB,EAAAA,EAAAA,IAA0B,CAAE3qB,iBAAiB,KACtD,IAAM4qB,EAAiBvsB,KAAKQ,MAAMwN,KAAKqM,MAAQ,KAgB/C,OAdA+R,EAD6BvpB,EAAgB0pB,GAG7CF,EAAMzmB,QAAUjC,aAAY,WAC1ByoB,GAAoB,SAACI,GAOnB,OALIA,GAAwB,IAC1B5oB,cAAcyoB,EAAMzmB,SACpB1C,GAASopB,EAAAA,EAAAA,IAA0B,CAAE3qB,iBAAiB,KACtDuB,GAASupB,EAAAA,EAAAA,IAAoB,CAAE7qB,iBAAAA,MAE1B4qB,EAAuB,OAE/B,KAEI,W,OAAM5oB,cAAcyoB,EAAMzmB,YAChC,CAACwmB,EAAqBvpB,EAAejB,EAAkByqB,EAAOnpB,IAE1DipB,GCMT,GA3B4C,Y,IAAGtpB,EAAa,EAAbA,cAAeC,EAAgB,EAAhBA,iBAAkBC,EAAiB,EAAjBA,kBACxEopB,EAAmBO,GAAsB7pB,GACd8pB,GAAAA,EAAAA,GAAAA,GAAeR,GAAxC9rB,EAAyBssB,EAAzBtsB,KAAMC,EAAmBqsB,EAAnBrsB,MAAOC,EAAYosB,EAAZpsB,QAErB,OACE,qB,SACG4rB,GACC,UAAC3tB,EAAAA,EAAI,CAACwa,QAAQ,cAAclR,eAAe,WAAW+P,WAAW,W,UAC9D/U,IACC,SAAC6Z,EAAAA,EAAO,CAAC5E,GAAG,OAAOrR,MAAM,Q,SACtB5D,KAGL,SAAC8pB,GAAK,CACJrsB,QAASA,EAAU,EACnBD,MAAOA,EACPD,KAAMA,IAEP0C,IAAqB,SAAC4Z,EAAAA,EAAO,CAACjW,MAAM,Q,SAAS3D,QAGhD,SAAC6V,EAAAA,EAAQ,CAACzb,OAAO,OAAOD,MAAM,a,wBClBtC,GAXuB,Y,IAAG2vB,EAAc,EAAdA,eAAgBC,EAAW,EAAXA,YAClC,GAAQpqB,EAAAA,EAAAA,MAANC,EAER,OACE,UAACoqB,GAAAA,EAAU,CAACD,YAAaA,EAAaE,YAAaH,EAAgB7kB,MAAM,KAAKG,QAAQ,S,WACpF,SAAC8kB,GAAAA,EAAc,C,SAAEtqB,EAAE,kBACnB,SAACsqB,GAAAA,EAAc,C,SAAEtqB,EAAE,sB,6SCIzB,IAAM0nB,IAAOxtB,EAAAA,EAAAA,IAAOC,EAAAA,GAAI,Y,6BAAXD,C,MAOPqwB,IAAqBrwB,EAAAA,EAAAA,IAAOswB,GAAAA,GAAa,Y,6BAApBtwB,C,MAEf,Y,OAAQ,EAALV,MAAkBO,OAAO0wB,gBAgDxC,GA5C0D,Y,IACxDzP,EAAO,EAAPA,QACAhJ,EAAa,EAAbA,cACAnS,EAAO,EAAPA,QACAkF,EAAO,EAAPA,QAAO,IACP2lB,OAAAA,OAAM,IAAG,GAAK,EAGZ5C,GACE/nB,EAAAA,EAAAA,MADF+nB,gBAAmB3c,OAEfC,EAAsC,IAAxBnD,SAASpI,EAAS,IAChC8qB,EAAgB,IAAItf,KAAKD,GAE/B,OACE,UAACsc,GAAI,CAAC3iB,QAAS,W,OAAMA,EAAQiW,I,WAC3B,SAACnf,EAAAA,EAAI,CAACqZ,WAAW,S,UACf,SAACxM,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,SACzBiX,OAGL,UAACnf,EAAAA,EAAI,CACHyJ,GAAG,MACH4P,WAAY,CAAC,aAAc,KAAM,UACjC/P,eAAgB,CAAC,SAAU,KAAM,cACjCqF,cAAe,CAAC,SAAU,KAAM,O,WAEhC,SAAC9B,EAAAA,EAAI,CAACC,SAAS,OAAOyM,GAAI,CAAC,IAAK,KAAM,O,SACnCuV,EAAcrf,mBAAmBH,EAAQK,OAE5C,SAAC9C,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,SACzB4mB,EAAcC,wBAAmB3lB,EAAW2G,UAGjD,UAAC/P,EAAAA,EAAI,CAACyJ,GAAG,MAAM4P,WAAW,SAAS/P,eAAe,gB,WAChD,SAACuD,EAAAA,EAAI,C,SAAEsJ,IACN0Y,GAAS,SAACG,GAAAA,EAAS,CAAC9mB,MAAM,aAAe,SAACwmB,GAAkB,QAE/D,SAAC1uB,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,S,UACvC,SAAClB,GAAAA,EAAgB,CAACF,MAAM,kB,sICzDhC,IAAM2jB,IAAOxtB,EAAAA,EAAAA,IAAOC,EAAAA,GAAI,Y,6BAAXD,C,MAgEb,GArD8D,Y,IAyCrDgF,EAxCP4rB,EAAmB,EAAnBA,oBACAC,EAAsB,EAAtBA,uBACAC,EAAqB,EAArBA,sBAEM,GAAQjrB,EAAAA,EAAAA,MAANC,EACFd,EAAkBI,IAClB2rB,EAAsC,OAAf/rB,QAAe,IAAfA,OAAAA,EAAAA,EAAiBud,OAAOpP,QAAO,SAACgQ,GAC3D,OAAOA,EAAMvd,OAAOsd,gBAAkBnd,EAAAA,GAAAA,aAGlCirB,EAAsC,OAApBD,QAAoB,IAApBA,OAAAA,EAAAA,EAAsBE,MAAK,SAACC,EAAQC,GAC1D,OAAOpjB,SAASojB,EAAO7rB,UAAW,IAAMyI,SAASmjB,EAAO5rB,UAAW,OAGrE,OACE,sB,WACE,UAACkoB,GAAI,CAAC4D,GAAG,OAAO1U,GAAG,OAAOvM,GAAG,M,WAC3B,SAAC3B,EAAAA,EAAI,CAAC2M,MAAI,EAAC1M,SAAS,OAAO5E,MAAM,Y,SAAY,OAG7C,SAAC2E,EAAAA,EAAI,CAAC2M,MAAI,EAAC1M,SAAS,OAAO5E,MAAM,YAAYqS,cAAc,Y,SACxDpW,EAAE,WAEL,SAAC0I,EAAAA,EAAI,CAAC2M,MAAI,EAAC1M,SAAS,OAAO5E,MAAM,YAAYqS,cAAc,Y,SACxDpW,EAAE,mBAEL,SAAC7F,EAAAA,EAAG,CAACI,MAAM,aAEb,UAACsB,EAAAA,EAAI,CAACyvB,GAAG,OAAOC,GAAG,OAAO/gB,cAAc,SAASghB,UAAU,SAAShxB,OAAO,Q,UACxE0E,GACCgsB,EAAgB5gB,KAAI,SAACmhB,G,OACnB,SAACC,GAAgB,CAEf1Q,QAASyQ,EAAcjsB,UACvBkrB,OAAQe,EAAcjO,QACtBxL,cAAeyZ,EAAchO,aAC7B5d,QAAS4rB,EAAc5rB,QACvBkF,QAASimB,GALJS,EAAcjsB,eAQT,OAAfN,QAAe,IAAfA,GAAuB,QAAvBA,EAAAA,EAAiBud,cAAM,IAAvBvd,OAAAA,EAAAA,EAAyBmI,UAAW0jB,IACnC,SAAClvB,EAAAA,EAAI,CAACsJ,eAAe,S,UACnB,SAACvB,EAAAA,EAAM,CAAC8G,GAAG,OAAOlF,QAAQ,OAAOjL,MAAM,cAAcwK,QAAS+lB,E,SAC3D9qB,EAAE,wB,slBCzCjB,IAAM2rB,IAAiBzxB,EAAAA,EAAAA,IAAO2uB,GAAAA,GAAS,Y,6BAAhB3uB,C,MAOjBwtB,GAAOxtB,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAIT,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAOhCioB,IAAmB1xB,EAAAA,EAAAA,IAAO2xB,GAAAA,GAAW,Y,6BAAlB3xB,C,MAIrB,Y,OAAQ,EAALV,MAAkB2C,aAAagd,MAwGtC,GAlG8F,Y,IAC5F6N,EAAe,EAAfA,gBACAxnB,EAAS,EAATA,UAEM,GAAQO,EAAAA,EAAAA,MAANC,EAIJJ,EAAAA,IAFFX,EAEEW,EAFFX,iBACAT,EACEoB,EADFpB,aAAgBsB,OAGZgsB,EADkBxsB,IACiBmd,OAAO/c,MAAK,SAACqsB,G,OAAqBA,EAAiBvsB,YAAcA,KAC5EwsB,GAAAA,EAAAA,GAAAA,KAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACdC,EAAiBH,GAAQC,GAAQC,EAEjCE,EAAwBpkB,SAAShJ,GAGjCqtB,GADJxsB,IAAWG,EAAAA,GAAAA,UAA0BosB,EAAwBA,EAAwB,GACvC1e,aAAenO,EAExDuoB,GAEN,QAFmC7Q,EAAAA,EAAAA,IAClC,SAAC8Q,GAAgB,CAAChN,QAASxb,EAAW4mB,YAA4B,OAAfY,QAAe,IAAfA,OAAAA,EAAAA,EAAiBlnB,UACrE,MAEKysB,EAAoBT,EAAmBA,EAAiBrO,aAAe,EACvE8K,EACJiE,OAAOD,GAAqB,EACxBvsB,EAAE,sCAAuC,CAAEwN,OAAQ+e,IACnDvsB,EAAE,qCAAsC,CAAEwN,OAAQ+e,IACbhE,GAAmD,OAAnDA,EAAgB7gB,MAAM6kB,EAAkB5e,YAAW,GAAvF8e,EAAoClE,EAAmD,GAA3EE,EAAwBF,EAAmD,GAE9F,OACE,UAACoD,GAAc,C,UACZW,IAAiB,SAACV,GAAgB,CAACc,KAAM1sB,EAAE,aAC5C,UAAC0nB,GAAI,C,WACH,SAAC7rB,EAAAA,EAAI,CAACsJ,eAAgB,CAAC,SAAU,KAAM,KAAM,c,UAC3C,SAAC6U,EAAAA,EAAO,CAAC3P,GAAG,O,SAAQrK,EAAE,uBAExB,SAACnE,EAAAA,EAAI,CAACitB,SAAU,CAAC,QAAS,KAAM,KAAM,QAAS3jB,eAAgB,CAAC,SAAU,KAAM,KAAM,c,SACnF3F,GACgB,OAAfwnB,QAAe,IAAfA,OAAAA,EAAAA,EAAiB1a,cACf,SAACwZ,GAAc,CACblG,WAAYwM,IAAkB,EAC9BvhB,OAAuB,OAAfmc,QAAe,IAAfA,OAAAA,EAAAA,EAAiB1a,YAAYqB,WACrCyH,GAAI,CAAC,KAAM,KAAM,KAAM,QACvBsK,KAAK,OACL/W,SAAUyjB,EAAiB,OAAS,UAGtC,SAACnW,EAAAA,EAAQ,CACP1b,MAAO,CAAC,QAAS,KAAM,KAAM,SAC7BC,OAAQ,CAAC,OAAQ,KAAM,KAAM,QAC7B4a,GAAI,CAAC,KAAM,KAAM,KAAM,WAI3B,qB,UACE,UAACvZ,EAAAA,EAAI,CAAC2O,cAAc,SAAS0K,WAAW,SAAS3a,MAAO,CAAC,QAAS,KAAM,KAAM,S,WAC5E,SAACmO,EAAAA,EAAI,CAAC2B,GAAG,M,SAAOrK,EAAE,2BAClB,SAAC2sB,GAAAA,EAAoB,CAACnyB,OAAO,OAAOD,MAAM,gBAKjDuxB,IACC,sB,WACE,SAAC3xB,EAAAA,EAAG,CAACkc,QAAS,CAAC,OAAQ,KAAM,KAAM,Q,UACjC,SAAC2D,EAAAA,EAAO,C,SAAEha,EAAE,qBAEd,UAACnE,EAAAA,EAAI,CACH2O,cAAc,SACd4K,GAAI,CAAC,KAAM,KAAM,KAAM,QACvBF,WAAY,CAAC,SAAU,KAAM,KAAM,c,WAEnC,UAAC/a,EAAAA,EAAG,CAACuQ,GAAI,CAAC,OAAQ,KAAM,KAAM,G,WAC5B,UAAChC,EAAAA,EAAI,CAAC2N,QAAQ,S,UAAUoW,EAAW,QACnC,SAAC/jB,EAAAA,EAAI,CAAC2N,QAAQ,SAAShB,MAAI,E,SACxByW,EAAiBrO,gBAEpB,SAAC/U,EAAAA,EAAI,CAAC2N,QAAQ,S,SAAUoS,QAE1B,SAAC7kB,EAAAA,EAAM,CACLmB,QAASgjB,EACTvtB,OAAO,OACPD,MAAM,cACNgL,EAAE,IACFC,QAAQ,OACRH,MAAM,K,SAELrF,EAAE,oC,wVC5HnB,IAAM6nB,IAAkB3tB,EAAAA,EAAAA,IAAO2B,EAAAA,GAAK,Y,6BAAZ3B,C,MACR,Y,OAAQ,EAALV,MAAkBO,OAAOC,cAQxC,Y,OAAQ,EAALR,MAAkB2C,aAAaC,MA2FtC,GAtFgG,Y,IAC9F4qB,EAAe,EAAfA,gBACAxnB,EAAS,EAATA,UAEM,GAAQO,EAAAA,EAAAA,MAANC,EACsDiG,GAAAA,EAAAA,EAAAA,YAAvD2mB,EAAuD3mB,EAAmC,GAAjE4mB,EAA8B5mB,EAAmC,GAC3F6mB,EAA4BvtB,EAA2BC,GACvDyR,GAAgBC,EAAAA,EAAAA,OACtBvQ,EAAAA,EAAAA,YAAU,WACR,IAAMosB,EAAe,W,OAAA,mB,IACbC,E,iEAAmB,O,GAAMC,EAAAA,GAAAA,SAAkBhoB,OAAWA,EAAW,CAAEioB,MAAO,CAAC1tB,M,cAA3EwtB,EAAmB,SACzBH,EAA2BG,EAAiB,I,6DAFzB,GAIhBF,GACHC,MAED,CAACD,EAA2BttB,IAE/B,IAAIia,EAAc,IAAInb,EAAAA,EAAU6uB,KAChC,GAAInG,EAAiB,CACnB,IAAM,EAA2BA,EAAzBroB,qBACR8a,EAAc9a,EAAqBsT,MAAMhB,GAwC3C,OACE,UAAC4W,GAAe,C,WACd,UAAChsB,EAAAA,EAAI,CAACuZ,GAAG,OAAO5K,cAAc,SAASrF,eAAe,gB,WACpD,UAAChL,EAAAA,EAAG,C,WACF,SAAC6f,EAAAA,EAAO,C,SAAEha,EAAE,gBA3BhB,sB,UACGyZ,EAAYlD,SACX,SAACN,EAAAA,EAAQ,CAACmE,GAAG,MAAM5f,OAAQ,GAAID,MAAO,OAEtC,UAACyf,EAAAA,EAAO,CAAC3U,MAAM,KAAK2d,WAAW,IAAIjf,MAAM,Y,UAAY,MAChDqpB,EAAAA,EAAAA,KAAazT,EAAAA,EAAAA,IAAiBF,EAAa,GAAI,EAAG,MAGxDA,EAAYlD,SACX,SAACN,EAAAA,EAAQ,CAACmE,GAAG,MAAM5f,OAAQ,GAAID,MAAO,MAEtC,SAACwe,EAAAA,EAAO,CACNpQ,SAAS,OACT5E,MAAM,aACNkf,KAAK,QACLpa,OAAO8Q,EAAAA,EAAAA,IAAgC,OAAfqN,QAAe,IAAfA,OAAAA,EAAAA,EAAiBroB,qBAAsB,GAC/D2b,SAAU,WAcd,SAACngB,EAAAA,EAAG,CAACkQ,GAAG,O,UACN,SAACxO,EAAAA,EAAI,C,UACH,UAAC6M,EAAAA,EAAI,CAACC,SAAS,OAAO0N,QAAQ,S,UAC3BrW,EAAE,4BAA4B,IAAE,IAChCgnB,IAAoB8F,GAA6BF,GAhDxC,W,IAEXA,EAIAE,EALT,OAAKA,GAA6BF,EACF,OAAvBA,QAAuB,IAAvBA,GAAmC,QAAnCA,EAAAA,EAAyBS,kBAAU,IAAnCT,OAAAA,EAAAA,EAAqChE,iBAG1CkE,EAC8B,OAAzBA,QAAyB,IAAzBA,GAAqC,QAArCA,EAAAA,EAA2BO,kBAAU,IAArCP,OAAAA,EAAAA,EAAuClE,iBAGzC,KAwCK0E,IAEA,SAACrX,EAAAA,EAAQ,CAACzb,OAAQ,GAAID,MAAO,gBAMvC,SAACyuB,GAAc,CAAChC,gBAAiBA,EAAiBL,iBAAe,QCpEvE,GA7BwE,Y,IAAGK,EAAe,EAAfA,gBAAiBxnB,EAAS,EAATA,UACpF,GAAQO,EAAAA,EAAAA,MAANC,EAC4BiG,GAAAA,EAAAA,EAAAA,WAAS,GAAtCgiB,EAA6BhiB,EAAe,GAAhCiiB,EAAiBjiB,EAAe,GAQnD,OANAtF,EAAAA,EAAAA,YAAU,WACHnB,GACH0oB,GAAc,KAEf,CAAC1oB,KAGF,UAACupB,GAAAA,EAAU,CAACxjB,EAAE,I,UACX0iB,IAAc,SAACsF,GAAc,CAACvG,gBAAiBA,EAAiBxnB,UAAWA,KAC5E,SAAC3D,EAAAA,EAAI,CAAC0J,EAAE,WAAW2P,WAAW,SAAS/P,eAAe,S,UACpD,SAAC8jB,GAAAA,EAAe,CACdC,SAAUjB,EACVljB,QAAS,WACHvF,GACF0oB,GAAeD,I,SAILjoB,EAAbioB,EAAe,OAAY,mB,oTCAtC,IAAMN,IAAaztB,EAAAA,EAAAA,IAAO0tB,GAAAA,GAAK,Y,6BAAZ1tB,C,MAGf,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAKhCgoB,IAAiBzxB,EAAAA,EAAAA,IAAO2uB,GAAAA,GAAS,Y,6BAAhB3uB,C,MAkIvB,GA1HwD,Y,IAAG4wB,EAAmB,EAAnBA,oBAAqBC,EAAsB,EAAtBA,uBAI1EhrB,GAAAA,EAAAA,EAAAA,MAFFC,EAEED,EAFFC,EACA8nB,EACE/nB,EADF+nB,gBAAmB3c,OAEf,GAAc9K,EAAAA,EAAAA,MAAZC,QACkD2F,GAAAA,EAAAA,EAAAA,WAAS,GAA5DunB,EAAmDvnB,EAAe,GAA3CwnB,EAA4BxnB,EAAe,GACXA,GAAAA,EAAAA,EAAAA,UAAuB,MAA9EynB,EAAuDznB,EAA4B,GAA1D0nB,EAA8B1nB,EAA4B,GACxCA,GAAAA,EAAAA,EAAAA,UAAiB,MAA5D2nB,EAA2C3nB,EAAsB,GAA9C4nB,EAAwB5nB,EAAsB,GAKpErG,EAAAA,IAFFZ,EAEEY,EAFFZ,gBACAR,EACEoB,EADFpB,aAAgBsB,OAEZZ,EAAkBI,IAClBsa,EAAsB9Z,IAAWG,EAAAA,GAAAA,MAAsBjB,EAEvDgsB,EAAwB,W,OAAA,iBAAOxrB,G,IAG7BwM,EACAsZ,E,iEADc,OAFpBmI,GAAyB,GACzBI,EAAqBruB,GACD,C,GAAMkmB,EAAAA,GAAAA,IAAalmB,I,cAAjCwM,EAAc,SACdsZ,EAAuBvZ,GAAuBC,GACpD2hB,EAA2BrI,G,2BALQ9lB,G,gCAAP,GAQxBsuB,GAAajrB,EAAAA,EAAAA,cAAY,WAC7B4qB,GAAyB,GACzBE,EAA2B,MAC3BE,EAAqB,QACpB,IAoFH,OACE,UAAClG,GAAU,C,WACT,SAACe,GAAAA,EAAU,C,SAnFT8E,GAEA,UAAC3xB,EAAAA,EAAI,CAACqZ,WAAW,S,WACf,SAACvK,GAAAA,EAAa,CAACojB,OAAO,UAAUhpB,QAAS+oB,EAAY1Y,GAAG,UACxD,UAACvZ,EAAAA,EAAI,CAAC2O,cAAc,SAAS0K,WAAW,aAAa/P,eAAe,S,WAClE,UAAC6U,EAAAA,EAAO,CAAC3U,MAAM,KAAKgF,GAAG,M,UACpBrK,EAAE,SAAS,IAAE4tB,GAAqB,OAEb,OAAvBF,QAAuB,IAAvBA,OAAAA,EAAAA,EAAyB7tB,UACxB,UAAC6I,EAAAA,EAAI,CAACC,SAAS,O,UACZ3I,EAAE,SAAS,IAAEkL,GAAaC,EAAQuiB,EAAwB7tB,aAG7D,SAACoW,EAAAA,EAAQ,CAAC1b,MAAM,QAAQC,OAAO,gBAOlC,SAACwf,EAAAA,EAAO,CAAC3U,MAAM,K,SAAMrF,EAAE,cAGhB,WACd,GAAIwtB,EACF,OAAO,SAACQ,GAAqB,CAAChH,gBAAiB0G,EAAyBluB,UAAWouB,IAGrF,IAAMjR,EAAiC,OAAfzd,QAAe,IAAfA,OAAAA,EAAAA,EAAiBud,OAAOpP,QAAO,SAACgQ,GACtD,OAAOA,EAAMvd,OAAOsd,gBAAkBnd,EAAAA,GAAAA,aAGxC,OAAKK,EAU0B,IAA3Bqc,EAAgBtV,QAEhB,SAACskB,GAAc,C,UACb,UAACxxB,EAAAA,EAAG,CAAC2uB,SAAS,Q,WACZ,UAACjtB,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,SAASkF,GAAG,O,WACnD,SAAC4jB,GAAU,CAACzzB,OAAO,OAAO4a,GAAG,QAAQ,KAAC,SAAC1M,EAAAA,EAAI,CAACwP,UAAU,O,SAAQlY,EAAE,kCAElE,SAAC0I,EAAAA,EAAI,CAACwP,UAAU,SAASnU,MAAM,aAAasG,GAAG,O,SAC5CrK,EAAE,sCAEL,SAACkZ,GAAgB,CAACpU,SAAU8U,EAAqBrf,MAAM,eAM7D,SAAC2zB,GAAkB,CACjBlD,sBAAuBA,EACvBF,oBAAqBA,EACrBC,uBAAwBA,KA3BxB,UAACY,GAAc,C,WACb,SAACjjB,EAAAA,EAAI,CAACwP,UAAU,SAASnU,MAAM,aAAasG,GAAG,O,SAC5CrK,EAAE,gDAEL,SAACgX,GAAAA,EAAmB,OA8CvBmX,GAjBCT,GACK,SAACU,GAAuB,CAACpH,gBAAiB0G,EAAyBluB,UAAWouB,KAGrF,SAAC7E,GAAAA,EAAU,C,UACT,SAACltB,EAAAA,EAAI,CAAC2O,cAAc,SAASrF,eAAe,SAAS+P,WAAW,S,UAC9D,SAACxM,EAAAA,EAAI,CAACC,SAAS,OAAO5E,MAAM,a,SACzB/D,EAAE,8C,qXCvJf,IAAMquB,IAAcn0B,EAAAA,EAAAA,IAAOo0B,GAAAA,GAAM,Y,6BAAbp0B,C,MAMdq0B,IAAmBr0B,EAAAA,EAAAA,IAAOs0B,GAAAA,GAAW,Y,6BAAlBt0B,C,MAOX,Y,OAAQ,EAALV,MAAkBO,OAAO0wB,gBAG1B,Y,OAAQ,EAALjxB,MAAkBO,OAAO0wB,gBA6E5C,GA/DoD,Y,IAClDvlB,EAAS,EAATA,UACAupB,EAAe,EAAfA,gBACAC,EAAe,EAAfA,gBACAC,EAAiB,EAAjBA,kBACAC,EAAsB,EAAtBA,uBAEM,GAAQ7uB,EAAAA,EAAAA,MAANC,EACF6uB,EAAuB5mB,SAASwmB,EAAiB,IAQvD,OACE,UAAC5yB,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,gB,WACvC,UAACtJ,EAAAA,EAAI,CAACqZ,WAAW,S,WACf,SAAC8E,EAAAA,EAAO,CAAC5E,GAAG,M,SAAOpV,EAAE,YACrB,SAACquB,GAAW,CACVS,QAAQ,WACR1lB,UAAU,UACVtE,SAAUI,EACVxK,GAAG,WACHwgB,KAAK,WACLrS,MAAO4lB,EACPppB,MAAM,KACN2D,SAlBe,SAAChC,GAClBA,EAAE+nB,cAAcC,SAASC,OAC3BN,EAAkB3nB,UAmBlB,UAACnL,EAAAA,EAAI,CAACqZ,WAAW,S,WACf,SAACqZ,GAAgB,CACfzpB,UAAW+pB,GAAwBA,GAAwB,EAC3D9pB,QAAS,W,OAAM6pB,EAAuBC,EAAuB,IAC7DrpB,QAAQ,OACRH,MAAM,KACN+P,GAAG,M,UAEH,SAACzK,GAAAA,EAAa,OAEhB,SAAC4jB,GAAgB,CACfzpB,SAAU+pB,GAAwBH,EAClC3pB,QAAS,W,OAAM6pB,EAAuBC,EAAuB,IAC7DrpB,QAAQ,OACRH,MAAM,KACN+P,GAAG,M,UAEH,SAAC2B,GAAAA,EAAgB,OAEnB,SAACwX,GAAgB,CACfzpB,SAAU+pB,GAAwBH,EAClC3pB,QAAS,W,OAAM6pB,EAAuBF,IACtClpB,QAAQ,OACRH,MAAM,K,UAEN,SAAC6pB,GAAAA,EAAa,a,kQC7ExB,IAAMvH,IAAaztB,EAAAA,EAAAA,IAAO0tB,GAAAA,GAAK,Y,6BAAZ1tB,C,MAGf,Y,OAAQ,EAALV,MAAkB2C,aAAawH,MAKhCwrB,IAAmBj1B,EAAAA,EAAAA,IAAOwuB,GAAAA,GAAW,Y,6BAAlBxuB,C,MAGF,Y,OAAQ,EAALV,MAAkBO,OAAOyP,cAwGnD,GArGuB,WACrB,IAGIzJ,GAAAA,EAAAA,EAAAA,MAFFC,EAEED,EAFFC,EACA8nB,EACE/nB,EADF+nB,gBAAmB3c,OAEf5K,GAAWC,EAAAA,EAAAA,MAKbZ,EAAAA,IAHFX,EAGEW,EAHFX,iBACAhB,EAEE2B,EAFF3B,cAAa,EAEX2B,EADFpB,aAAgBsB,EAAM,EAANA,OAAQoF,EAAS,EAATA,UAEgBe,GAAAA,EAAAA,EAAAA,UAAS,MAA5CmpB,EAAmCnpB,EAAc,GAAlCopB,EAAoBppB,EAAc,GACVA,GAAAA,EAAAA,EAAAA,UAAS,IAAhDwoB,EAAuCxoB,EAAY,GAAlCqpB,EAAsBrpB,EAAY,GACIA,GAAAA,EAAAA,EAAAA,UAAS,MAAhEynB,EAAuDznB,EAAc,GAA5C0nB,EAA8B1nB,EAAc,GACtEyjB,GAAQjnB,EAAAA,EAAAA,QAAO,MAEf8sB,EAAgC,OAAbtxB,QAAa,IAAbA,OAAAA,EAAAA,EAAeoJ,QAExC1G,EAAAA,EAAAA,YAAU,WACR,GAAI1B,EAAkB,CACpB,IAAMotB,EAAwBptB,EAAmBgJ,SAAShJ,GAAoB,KACxEuwB,EACJ1vB,IAAWG,EAAAA,GAAAA,UAA0BosB,EAAwBA,EAAwB,EACvFgD,EAAiBG,GACjBF,EAAmBE,EAA0B7hB,eAE9C,CAAC1O,EAAkBa,KAEtBa,EAAAA,EAAAA,YAAU,WACRgtB,EAA2B,MAE3B,IAAM8B,EAAmB,W,OAAA,mB,IACjBzjB,EACAsZ,E,iEADc,O,GAAMI,EAAAA,GAAAA,IAAa+I,I,cAAjCziB,EAAc,SACdsZ,EAAuBvZ,GAAuBC,GACpD2hB,EAA2BrI,G,6DAHJ,GAazB,OAPAoE,EAAMzmB,QAAUjC,aAAY,WACtBytB,GACFgB,IAEFxuB,cAAcyoB,EAAMzmB,WACnB,KAEI,W,OAAMhC,cAAcyoB,EAAMzmB,YAChC,CAACwrB,EAAiBxvB,EAAkBswB,EAAkBhvB,IA4BzD,OACE,UAAConB,GAAU,C,WACT,UAACwH,GAAgB,C,WACf,SAACO,GAAa,CACZxqB,UAAWA,EACXupB,gBAAiBA,EACjBC,gBAAiBU,EACjBT,kBAjCkB,SAAC7mB,GACzB,IACE6nB,EACE7nB,EADF6nB,OAAU9mB,MAERA,GACFymB,EAAmBzmB,GACfZ,SAASY,EAAO,KAAO,GACzBymB,EAAmB,IAEjBrnB,SAASY,EAAO,KAAOumB,GACzBE,EAAmBF,EAAczhB,aAGnC2hB,EAAmB,KAqBfV,uBAjBuB,SAACtS,GAE5BgT,EADEhT,EACiBA,EAAY3O,WAGZ,SAcjB,SAACxT,EAAAA,EAAG,CAACuQ,GAAG,M,SACL+jB,GACwB,OAAvBf,QAAuB,IAAvBA,OAAAA,EAAAA,EAAyB7tB,UACvB,UAAC6I,EAAAA,EAAI,CAACC,SAAS,O,UACZ3I,EAAE,SAAS,IAAEkL,GAAaC,EAAQuiB,EAAwB7tB,aAG7D,SAACoW,EAAAA,EAAQ,CAAC1b,MAAM,QAAQC,OAAO,SAE/B,WAGR,SAACwzB,GAAqB,CAAChH,gBAAiB0G,EAAyBluB,UAAWivB,KAC5E,SAACL,GAAuB,CAACpH,gBAAiB0G,EAAyBluB,UAAWivB,QCzFpF,GA5B+B,WAC7B,IAAM,GAAcpuB,EAAAA,EAAAA,MAAZC,QACsCV,EAAAA,IAAtCZ,EAAsCY,EAAtCZ,gBAAiBC,EAAqBW,EAArBX,iBACnBC,EAAkBI,IAClBrB,GxCSCoB,EAAAA,EAAAA,KAAY,SAACtB,G,OAAiBA,EAAMC,QAAQC,iBwCRHgI,GAAAA,EAAAA,EAAAA,UAAS,IAAlD2pB,EAAyC3pB,EAAY,GAAnC4pB,EAAuB5pB,EAAY,GACtBA,GAAAA,EAAAA,EAAAA,UAASmL,EAAAA,GAAAA,MAAxCR,EAA+B3K,EAA0B,GAA5C6pB,EAAkB7pB,EAA0B,IAEhEtF,EAAAA,EAAAA,YAAU,WAERmvB,EAAe1e,EAAAA,GAAAA,QACd,CAAC9Q,EAAStB,IAEb,IAAM+wB,EAAkB,W,OAAA,mB,IAEhBC,E,iEAA2B,OADjCF,EAAe1e,EAAAA,GAAAA,UACkB,C,EAAMoL,GACrClc,EACApB,EACAjB,EACAgB,I,cAJI+wB,EAA2B,SAMjCH,EAAoBG,GACpBF,EAAe1e,EAAAA,GAAAA,S,6DATO,GAYxB,MAAO,CAAE2e,gBAAAA,EAAiBH,iBAAAA,EAAkBhf,YAAAA,I,+OCpB9C,IAAMqf,GAAc/1B,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAEhB,Y,OAAQ,EAALV,MAAkB2C,aAAaC,MAKhC8zB,GAAkBh2B,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAEpB,Y,OAAQ,EAALV,MAAkB2C,aAAaC,MA8HtC,GAzH2B,WACzB,IAAM,GAAQ2D,EAAAA,EAAAA,MAANC,EACF,GAAcK,EAAAA,EAAAA,MAAZC,QAIJV,EAAAA,IAFFZ,EAEEY,EAFFZ,gBACAR,EACEoB,EADFpB,aAAgBsB,OAEyCqwB,EAAAA,KAAnDJ,EAAmDI,EAAnDJ,gBAAiBH,EAAkCO,EAAlCP,iBAAkBhf,EAAgBuf,EAAhBvf,YACrC1R,EAAkBI,IACgC2G,GAAAA,EAAAA,EAAAA,WAAS,GAA1DmqB,EAAiDnqB,EAAe,GAA1CoqB,EAA2BpqB,EAAe,GACrBA,GAAAA,EAAAA,EAAAA,WAAS,GAApDqqB,EAA2CrqB,EAAe,GAAvCsqB,EAAwBtqB,EAAe,GAC1Dkf,GAA6F,QAAtEjO,EAAAA,EAAAA,IAAS,SAACkO,GAAgB,CAAC1E,cAAekP,KAAsB,GAAM,MAC9FY,EAAoB5f,IAAgBQ,EAAAA,GAAAA,SACpCqf,EAAwB3wB,IAAWG,EAAAA,GAAAA,MACnCywB,GAAsBxxB,EAAgBoB,SAAWmwB,GAEvD9vB,EAAAA,EAAAA,YAAU,WACJiQ,IAAgBQ,EAAAA,GAAAA,UAEdwe,EAAiBvoB,OAAS,IAAM+oB,IAClCG,GAAqB,GACrBF,GAAwB,GACxBlL,KAG8B,IAA5ByK,EAAiBvoB,QAAiB+oB,IACpCG,GAAqB,GACrBF,GAAwB,OAG3B,CAACT,EAAkBQ,EAAsBxf,EAAauU,KAEzDxkB,EAAAA,EAAAA,YAAU,WAER4vB,GAAqB,GACrBF,GAAwB,KACvB,CAAC/vB,EAAStB,IAkFb,OAAO,SAACnD,EAAAA,EAAI,C,SAhFI,WACd,IAAKyE,EACH,OACE,UAACzE,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,S,WACvC,SAAC8qB,GAAW,CAAC1a,IAAI,iDAAiDC,IAAI,oBACtE,UAAC3Z,EAAAA,EAAI,CAACyJ,GAAI,CAAC,MAAO,KAAM,QAASkF,cAAc,SAAS0K,WAAW,S,WACjE,SAAC8E,EAAAA,EAAO,CAAC9B,UAAU,SAASnU,MAAM,U,SAC/B/D,EAAE,0BAEL,SAACga,EAAAA,EAAO,CAAC9B,UAAU,SAASnU,MAAM,UAAUsG,GAAG,O,SAC5CrK,EAAE,8BAEL,SAACgX,GAAAA,EAAmB,CAACzc,MAAM,cAE7B,SAAC01B,GAAW,CAAC1a,IAAI,iDAAiDC,IAAI,sBAI5E,GAAI4a,IAAyBE,EAC3B,OACE,UAACz0B,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,S,WACvC,SAAC+qB,GAAe,CAAC3a,IAAI,6CAA6CC,IAAI,yBACtE,UAAC3Z,EAAAA,EAAI,CAACyJ,GAAI,CAAC,MAAO,KAAM,QAASkF,cAAc,S,WAC7C,UAACwP,EAAAA,EAAO,CAAC9B,UAAU,SAASnU,MAAM,U,UAC/B/D,EAAE,wBAAwB,UAE7B,SAACga,EAAAA,EAAO,CAAC9B,UAAU,SAASnU,MAAM,U,SAC/B/D,EAAE,gCAGP,SAACkwB,GAAe,CAAC3a,IAAI,6CAA6CC,IAAI,2BAI5E,GAAI4a,GAAwBE,EAC1B,OACE,UAACz0B,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,S,WACvC,SAAC8qB,GAAW,CAAC1a,IAAI,iDAAiDC,IAAI,oBACtE,UAAC3Z,EAAAA,EAAI,CAACyJ,GAAI,CAAC,MAAO,KAAM,QAASkF,cAAc,S,WAC7C,SAACwP,EAAAA,EAAO,CAAC9B,UAAU,SAASnU,MAAM,U,SAC/B/D,EAAE,uBAEL,SAACga,EAAAA,EAAO,CAAC9B,UAAU,SAASnU,MAAM,U,SAC/B/D,EAAE,4BAGP,SAACiwB,GAAW,CAAC1a,IAAI,iDAAiDC,IAAI,sBAa5E,OACE,UAAC3Z,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,S,WACvC,SAAC8qB,GAAW,CAAC1a,IAAI,iDAAiDC,IAAI,oBACtE,UAAC3Z,EAAAA,EAAI,CAACyJ,GAAI,CAAC,MAAO,KAAM,QAASkF,cAAc,S,WAC7C,SAACwP,EAAAA,EAAO,CAAC9B,UAAU,SAASnU,MAAM,UAAUsG,GAAG,O,SAC5CrK,EAAE,wBAEL,SAAC4D,EAAAA,EAAM,CACLkB,SAAU4rB,EACV3rB,QAASgrB,EACT7qB,UAAWsrB,EACXxrB,QAASwrB,GAAoB,SAACnsB,GAAAA,EAAa,CAACN,MAAM,eAAeO,MAAI,IAAM,K,SAnB7EmsB,EACK,GAA4B,OAAzBzwB,EAAE,uBAAuB,OAG5BA,EADLwwB,EACO,WAEF,mBAkBP,SAACP,GAAW,CAAC1a,IAAI,iDAAiDC,IAAI,sBAK9D2Y,M,YC5HhB,GAb8B,WAC5B,IAAM,GAAc9tB,EAAAA,EAAAA,MAAZC,QACFC,GAAWC,EAAAA,EAAAA,MAC2CyF,GAAAA,EAAAA,EAAAA,UAAS0qB,GAAAA,IAA9D5F,EAAqD9kB,EAAyC,GAAtE2qB,EAA6B3qB,EAAyC,GAOrG,MAAO,CAAE8kB,uBAAAA,EAAwB8F,yBALA,WAC/BtwB,GAASuwB,EAAAA,EAAAA,IAA6B,CAAExwB,QAAAA,EAASywB,KAAMhG,KACvD6F,EAA0B7F,EAAyB4F,GAAAA,O,oHCevD,IAAM1Y,GAA+B,CACnC5B,QAAS,OACT7L,cAAe,SACf0K,WAAY,SACZ/P,eAAgB,SAChB+S,UAAW,SACXC,gBAAiB,2BACjBC,aAAc,OACdC,OAAQ,sBACRrc,QAAS,MACTsc,OAAQ,OACR0Y,UAAW,kCAGPC,GAAc/2B,EAAAA,GAAAA,IAAAA,WAAU,C,6BAAVA,C,MAgHpB,GA5GgB,Y3CnBe,W,IAACg3B,EAAsB,UAAH,8CAC3C,GAAc7wB,EAAAA,EAAAA,MAAZC,QACFC,GAAWC,EAAAA,EAAAA,MACXvB,EAAmBG,KAEzBuB,EAAAA,EAAAA,YAAU,WAERJ,GAASO,EAAAA,EAAAA,SACR,CAACP,KAEJ4wB,EAAAA,EAAAA,IAAqB,WACflyB,IACFmyB,EAAAA,EAAAA,KAAM,WAEJ7wB,GAASK,EAAAA,EAAAA,IAAqB,CAAE3B,iBAAAA,KAEhCsB,GAASupB,EAAAA,EAAAA,IAAoB,CAAE7qB,iBAAAA,UAGlC,CAACsB,EAAUtB,KAEd0B,EAAAA,EAAAA,YAAU,WAEJL,GAAWrB,IAAqBiyB,GAClC3wB,GAASuU,EAAAA,EAAAA,IAA6B,CAAExU,QAAAA,EAASrB,iBAAAA,OAElD,CAACsB,EAAUtB,EAAkBqB,EAAS4wB,I2CNzCG,GACAC,IACA,IAAM,GAAQvxB,EAAAA,EAAAA,MAANC,EACkB8J,GAAAA,EAAAA,EAAAA,MAAlBlQ,EAAkBkQ,EAAlBlQ,OAGQ,GAHUkQ,EAAVtQ,MAGZoG,IADFpB,cAAgBsB,EAAM,EAANA,OAAQD,EAAO,EAAPA,QAE4BoG,GAAAA,EAAAA,EAAAA,UAAS,GAAxDsrB,EAA+CtrB,EAAW,GAArCurB,EAA0BvrB,EAAW,GAC3D4T,EAAe5R,SAASpI,EAAS,IACwBia,EAAAA,EAAuBD,EAAc/Z,GAA5FI,EAAuD4Z,EAAvD5Z,cAAeE,EAAwC0Z,EAAxC1Z,kBAAmBD,EAAqB2Z,EAArB3Z,iBACmBsxB,EAAAA,KAArD1G,EAAqD0G,EAArD1G,uBAAwB8F,EAA6BY,EAA7BZ,yBAEhC,OACE,sB,WACE,SAACa,GAAAA,EAAQ,KACT,UAACT,GAAW,C,WACV,SAACU,EAAAA,EAAW,CAAC33B,WC/DG,qDD+DmBmB,MAAO,EAAGqB,kBAAkB,E,UAC7D,SAACo1B,GAAI,OAEP,SAACD,EAAAA,EAAW,CACVj1B,eAAgB,CAAEqb,MAAO,CAAE8Z,UAAW,UACtC73B,WCnEoB,oDDoEpBmB,MAAO,EACPqB,kBAAkB,E,UAElB,UAACX,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,SAASqF,cAAc,SAASoM,GAAG,O,UACzE9W,IAAWG,EAAAA,GAAAA,OACV,SAACmS,MAAG,CAAC2F,MAAO,CAAEgC,aAAc,OAAQxf,MAAO,mB,UACzC,SAAC6X,MAAG,CAAC2F,MAAOE,G,UACV,SAAC+B,EAAAA,EAAO,CAAC3U,MAAM,KAAKtB,MAAM,UAAUsG,GAAG,MAAM6N,UAAU,S,SACpDlY,EAAE,gCAKX,SAACoS,MAAG,CAAC2F,MAAO,CAAEO,OAAQ,SAAU/d,MAAO,mB,UACrC,SAAC+a,MAAG,CAACC,IAAI,2CAA2CC,IAAI,GAAGuC,MAAO,CAAEK,aAAc,OAAQ4Y,UAAW,iCAErG,SAAC5e,MAAG,CAAC2F,MAAO,CAAEgC,aAAc,OAAQxf,MAAO,mB,UACzC,UAAC6X,MAAG,CAAC2F,MAAOE,G,WACV,SAAC7F,MAAG,CAAC2F,MAAO,CAAEO,OAAQ,OAAQ/d,MAAO,mB,UACnC,SAAC+a,MAAG,CAACC,IAAI,qCAAqCC,IAAI,GAAGuC,MAAO,CAAEK,aAAc,OAAQ4Y,UAAW,iCAEjG,SAAC5e,MAAG,CAAC2F,MAAOE,G,UACV,SAACpc,EAAAA,EAAI,CAACqZ,WAAW,SAAS/P,eAAe,SAASkF,GAAG,OAAOqM,GAAG,OAAOtB,GAAG,O,SACtElV,IAAkBE,GAAqBD,IACtC,SAAC2xB,GAAS,CACR5xB,cAAeA,EACfE,kBAAmBA,EACnBD,iBAAkBA,KAGpB,SAAC8V,EAAAA,EAAQ,CAACzb,OAAO,OAAOD,MAAM,oBAM1C,SAACw3B,GAAY,UAGjB,SAACJ,EAAAA,EAAW,CAAC33B,WC1GU,uDD0GmBwC,kBAAkB,EAAOrB,MAAO,E,UACxE,SAACiX,MAAG,CAAC2F,MAAOE,G,UACV,UAAC7F,MAAG,CAAC2F,MAAO,CAAEO,OAAQ,YAAa/d,MAAO,mB,WACxC,SAAC+a,MAAG,CAACC,IAAI,6BAA6BC,IAAI,GAAGuC,MAAO,CAAEK,aAAc,OAAQ4Y,UAAW,+BACvF,SAACgB,GAAkB,YAIzB,UAACL,EAAAA,EAAW,CACVh1B,WAAY,CAAEob,MAAO,CAAEO,OAAQ,IAAK/d,MAAO,SAC3CP,WAAYJ,EClHiB,oDADL,oDDoHxB4C,kBAAkB,EAClBrB,MAAO,E,WAEP,SAACiX,MAAG,CAAC2F,MAAO,CAAEO,OAAQ,YAAa/d,MAAO,mB,UACxC,SAAC+a,MAAG,CAACC,IAAI,sCAAsCC,IAAI,GAAGuC,MAAO,CAAEK,aAAc,OAAQ4Y,UAAW,iCAElG,UAACn1B,EAAAA,EAAI,CAACtB,MAAM,OAAOiQ,cAAc,SAAS0K,WAAW,SAAS/P,eAAe,S,WAC3E,SAAC6U,EAAAA,EAAO,CAAC3P,GAAG,OAAOhF,MAAM,K,SACtBrF,EAAE,sBAEL,SAAC7F,EAAAA,EAAG,CAACkQ,GAAG,O,UACN,SAAC4nB,GAAc,CACb9H,YAAaoH,EACbrH,eAAgB,SAAC/uB,G,OAAUq2B,EAAuBr2B,QAG7B,IAAxBo2B,GACC,SAACW,GAAc,KAEf,SAACC,GAAe,CACdrH,oBAAqB+F,EACrB9F,uBAAwBA,WAKhC,SAAC4G,EAAAA,EAAW,CACVx2B,MAAO","sources":["webpack://_N_E/./src/components/PageSection/svg/CurvedSvg.tsx","webpack://_N_E/./src/components/PageSection/CurvedDivider.tsx","webpack://_N_E/./src/components/PageSection/index.tsx","webpack://_N_E/./src/utils/getTimePeriods.ts","webpack://_N_E/./src/components/ApproveConfirmButtons.tsx","webpack://_N_E/./src/state/lottery/selectors.ts","webpack://_N_E/./src/state/lottery/hooks.ts","webpack://_N_E/./src/views/Lottery/hooks/useGetNextLotteryEvent.ts","webpack://_N_E/./src/views/Lottery/hooks/useStatusTransitions.tsx","webpack://_N_E/./src/utils/requiresApproval.ts","webpack://_N_E/./src/hooks/useApproveConfirmTransaction.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/NumTicketsToBuyButton.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/TicketInput.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/EditNumbersModal.tsx","webpack://_N_E/./src/views/Lottery/helpers.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/generateTicketNumbers.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/useTicketsReducer.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsModal/BuyTicketsModal.tsx","webpack://_N_E/./src/views/Lottery/components/BuyTicketsButton.tsx","webpack://_N_E/./src/views/Lottery/components/RoundClock.tsx","webpack://_N_E/./src/views/Lottery/components/Hero.tsx","webpack://_N_E/./src/state/lottery/fetchUnclaimedUserRewards.ts","webpack://_N_E/./src/views/Lottery/svgs/WhiteBunny.tsx","webpack://_N_E/./src/views/Lottery/svgs/Balls.tsx","webpack://_N_E/./src/views/Lottery/components/WinningNumbers.tsx","webpack://_N_E/./src/views/Lottery/components/TicketNumber.tsx","webpack://_N_E/./src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx","webpack://_N_E/./src/views/Lottery/components/ClaimPrizesModal/index.tsx","webpack://_N_E/./src/views/Lottery/components/ViewTicketsModal/PreviousRoundTicketsInner.tsx","webpack://_N_E/./src/views/Lottery/components/ViewTicketsModal/CurrentRoundTicketsInner.tsx","webpack://_N_E/./src/views/Lottery/components/ViewTicketsModal/index.tsx","webpack://_N_E/./src/views/Lottery/components/RewardBracketDetail.tsx","webpack://_N_E/./src/views/Lottery/components/RewardBrackets.tsx","webpack://_N_E/./src/views/Lottery/components/NextDrawCard.tsx","webpack://_N_E/./src/views/Lottery/components/Countdown/Timer.tsx","webpack://_N_E/./src/views/Lottery/hooks/useNextEventCountdown.ts","webpack://_N_E/./src/views/Lottery/components/Countdown/index.tsx","webpack://_N_E/./src/views/Lottery/components/HistoryTabMenu.tsx","webpack://_N_E/./src/views/Lottery/components/YourHistoryCard/FinishedRoundRow.tsx","webpack://_N_E/./src/views/Lottery/components/YourHistoryCard/FinishedRoundTable.tsx","webpack://_N_E/./src/views/Lottery/components/PreviousRoundCard/Body.tsx","webpack://_N_E/./src/views/Lottery/components/PreviousRoundCard/FooterExpanded.tsx","webpack://_N_E/./src/views/Lottery/components/PreviousRoundCard/Footer.tsx","webpack://_N_E/./src/views/Lottery/components/YourHistoryCard/index.tsx","webpack://_N_E/./src/views/Lottery/components/AllHistoryCard/RoundSwitcher.tsx","webpack://_N_E/./src/views/Lottery/components/AllHistoryCard/index.tsx","webpack://_N_E/./src/views/Lottery/hooks/useGetUnclaimedRewards.ts","webpack://_N_E/./src/views/Lottery/components/CheckPrizesSection.tsx","webpack://_N_E/./src/views/Lottery/hooks/useShowMoreUserRounds.ts","webpack://_N_E/./src/views/Lottery/index.tsx","webpack://_N_E/./src/views/Lottery/pageSectionStyles.tsx"],"sourcesContent":["import styled, { css, DefaultTheme } from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport { ClipFill } from '../types'\n\ninterface CurveProps {\n  clipFill?: ClipFill\n}\n\ninterface ContainerProps extends CurveProps {\n  clipPath: string\n}\n\nconst sharedStyles = (theme: DefaultTheme, clipPath: string, clipFill?: ClipFill) => css`\n  width: 100%;\n  height: 20px;\n  clip-path: url(${clipPath});\n\n  background: ${() => {\n    if (theme.isDark) {\n      return clipFill?.dark || clipFill?.light || theme.colors.background\n    }\n    return clipFill?.light || theme.colors.background\n  }};\n\n  & svg {\n    display: block;\n  }\n`\n\nconst ConcaveContainer = styled(Box)<ContainerProps>`\n  ${({ theme, clipPath, clipFill }) => sharedStyles(theme, clipPath, clipFill)}\n  transform: ${({ clipPath }) => (clipPath === '#bottomConcaveCurve' ? 'translate(0, -13px)' : 'translate(0, 1px)')};\n`\n\nconst ConvexContainer = styled(Box)<ContainerProps>`\n  ${({ theme, clipPath, clipFill }) => sharedStyles(theme, clipPath, clipFill)}\n  transform: ${({ clipPath }) => (clipPath === '#bottomConvexCurve' ? 'translate(0, -13px)' : 'translate(0, -1px)')};\n`\n\nexport const ConvexTop: React.FC<React.PropsWithChildren<CurveProps>> = ({ clipFill }) => (\n  <ConvexContainer clipFill={clipFill} clipPath=\"#topConvexCurve\">\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <clipPath id=\"topConvexCurve\" clipPathUnits=\"objectBoundingBox\">\n          <path d=\"M 0,1 L 0,0 L 1,0 L 1,1 C 0.75 0, .25 0, 0 1 Z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  </ConvexContainer>\n)\n\nexport const ConvexBottom: React.FC<React.PropsWithChildren<CurveProps>> = ({ clipFill }) => (\n  <ConvexContainer clipFill={clipFill} clipPath=\"#bottomConvexCurve\">\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <clipPath id=\"bottomConvexCurve\" clipPathUnits=\"objectBoundingBox\">\n          <path d=\"M 0,0 L 0,1 L 1,1 L 1,0 C .75 1, .25 1, 0 0 Z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  </ConvexContainer>\n)\n\nexport const ConcaveTop: React.FC<React.PropsWithChildren<CurveProps>> = ({ clipFill }) => (\n  <ConcaveContainer clipFill={clipFill} clipPath=\"#topConcaveCurve\">\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <clipPath id=\"topConcaveCurve\" clipPathUnits=\"objectBoundingBox\">\n          <path d=\"M 0,0 L 0,1 L 1,1 L 1,0 C .75 1, .25 1, 0 0 Z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  </ConcaveContainer>\n)\n\nexport const ConcaveBottom: React.FC<React.PropsWithChildren<CurveProps>> = ({ clipFill }) => (\n  <ConcaveContainer clipFill={clipFill} clipPath=\"#bottomConcaveCurve\">\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <clipPath id=\"bottomConcaveCurve\" clipPathUnits=\"objectBoundingBox\">\n          <path d=\"M 0,1 L 0,0 L 1,0 L 1,1 C .75 0.1, .25 0.1, 0 1 Z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  </ConcaveContainer>\n)\n","import styled from 'styled-components'\nimport { ConcaveTop, ConcaveBottom, ConvexTop, ConvexBottom } from './svg/CurvedSvg'\nimport { DividerFill, ClipFill } from './types'\n\ninterface CurvedDividerProps extends WrapperProps {\n  svgFill?: string\n  dividerComponent?: React.ReactNode\n  dividerPosition?: 'top' | 'bottom'\n  concave?: boolean\n  clipFill?: ClipFill\n}\ninterface WrapperProps {\n  index: number\n  dividerFill?: DividerFill\n}\n\nconst Wrapper = styled.div<WrapperProps>`\n  background: ${({ theme, dividerFill }) => {\n    if (theme.isDark) {\n      return dividerFill?.dark || dividerFill?.light || 'none'\n    }\n    return dividerFill?.light || dividerFill?.dark || 'none'\n  }};\n  z-index: ${({ index }) => index};\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n`\n\nconst ComponentWrapper = styled.div<WrapperProps>`\n  z-index: ${({ index }) => index + 1};\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst CurvedDivider: React.FC<React.PropsWithChildren<CurvedDividerProps>> = ({\n  index,\n  dividerPosition,\n  dividerComponent,\n  concave,\n  clipFill,\n  dividerFill,\n}) => {\n  const showConvexTop = dividerPosition === 'top' && !concave\n  const showConvexBottom = dividerPosition === 'bottom' && !concave\n  const showConcaveTop = dividerPosition === 'top' && concave\n  const showConcaveBottom = dividerPosition === 'bottom' && concave\n\n  return (\n    <Wrapper index={index} dividerFill={dividerFill}>\n      {dividerComponent && <ComponentWrapper index={index}>{dividerComponent}</ComponentWrapper>}\n      <>\n        {showConcaveTop && <ConcaveTop clipFill={clipFill} />}\n        {showConcaveBottom && <ConcaveBottom clipFill={clipFill} />}\n      </>\n      <>\n        {showConvexTop && <ConvexTop clipFill={clipFill} />}\n        {showConvexBottom && <ConvexBottom clipFill={clipFill} />}\n      </>\n    </Wrapper>\n  )\n}\n\nexport default CurvedDivider\n","import { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { BoxProps, Box, Flex, FlexProps } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport CurvedDivider from './CurvedDivider'\nimport { ClipFill, DividerFill } from './types'\n\ninterface PageSectionProps extends BackgroundColorProps {\n  svgFill?: string\n  dividerComponent?: React.ReactNode\n  hasCurvedDivider?: boolean\n  dividerPosition?: 'top' | 'bottom'\n  concaveDivider?: boolean\n  containerProps?: BoxProps\n  innerProps?: BoxProps\n  clipFill?: ClipFill\n  dividerFill?: DividerFill\n}\n\ninterface BackgroundColorProps extends FlexProps {\n  index: number\n  padding?: string\n}\n\nconst BackgroundColor = styled(Flex).attrs({ className: 'page-bg' as string })<BackgroundColorProps>`\n  position: relative;\n  flex-direction: column;\n  align-items: center;\n  z-index: ${({ index }) => index - 1};\n  padding: ${({ padding }) => padding};\n`\n\nconst ChildrenWrapper = styled(Container)`\n  min-height: auto;\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n`\n\nconst PageSection: React.FC<React.PropsWithChildren<PageSectionProps>> = ({\n  children,\n  svgFill,\n  index = 1,\n  dividerComponent,\n  dividerPosition = 'bottom',\n  hasCurvedDivider = true,\n  concaveDivider = false,\n  clipFill,\n  dividerFill,\n  containerProps,\n  innerProps,\n  ...props\n}) => {\n  const padding = useMemo(() => {\n    // No curved divider\n    if (!hasCurvedDivider) {\n      return '48px 0'\n    }\n    // Bottom curved divider\n    // Less bottom padding, as the divider is present there\n    if (dividerPosition === 'bottom') {\n      return '48px 0 14px'\n    }\n    // Top curved divider\n    // Less top padding, as the divider is present there\n    if (dividerPosition === 'top') {\n      return '14px 0 48px'\n    }\n    return '48px 0'\n  }, [dividerPosition, hasCurvedDivider])\n\n  return (\n    <Box {...containerProps}>\n      {hasCurvedDivider && dividerPosition === 'top' && (\n        <CurvedDivider\n          svgFill={svgFill}\n          index={index}\n          concave={concaveDivider}\n          dividerPosition={dividerPosition}\n          dividerComponent={dividerComponent}\n          clipFill={clipFill}\n          dividerFill={dividerFill}\n        />\n      )}\n      <BackgroundColor index={index} padding={padding} {...props}>\n        <ChildrenWrapper {...innerProps}>{children}</ChildrenWrapper>\n      </BackgroundColor>\n      {hasCurvedDivider && dividerPosition === 'bottom' && (\n        <CurvedDivider\n          svgFill={svgFill}\n          index={index}\n          concave={concaveDivider}\n          dividerPosition={dividerPosition}\n          dividerComponent={dividerComponent}\n          clipFill={clipFill}\n          dividerFill={dividerFill}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport default PageSection\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nexport const DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<React.PropsWithChildren<ApproveConfirmButtonsProps>> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import BigNumber from 'bignumber.js'\nimport { createSelector } from '@reduxjs/toolkit'\nimport { State } from '../types'\n\nconst selectCurrentLotteryId = (state: State) => state.lottery.currentLotteryId\nconst selectIsTransitioning = (state: State) => state.lottery.isTransitioning\nconst selectCurrentRound = (state: State) => state.lottery.currentRound\nconst selectUserLotteryData = (state: State) => state.lottery.userLotteryData\nconst selectLotteriesData = (state: State) => state.lottery.lotteriesData\nconst selectMaxNumberTicketsPerBuyOrClaim = (state: State) => state.lottery.maxNumberTicketsPerBuyOrClaim\n\nexport const makeLotteryGraphDataByIdSelector = (lotteryId: string) =>\n  createSelector([selectLotteriesData], (lotteriesData) => lotteriesData?.find((lottery) => lottery.id === lotteryId))\n\nexport const maxNumberTicketsPerBuyOrClaimSelector = createSelector(\n  [selectMaxNumberTicketsPerBuyOrClaim],\n  (maxNumberTicketsPerBuyOrClaimAsString) => {\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString)\n  },\n)\n\nexport const currentRoundSelector = createSelector([selectCurrentRound], (currentRound) => {\n  const {\n    priceTicketInXfn: priceTicketInXfnAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInXfn: amountCollectedInXfnAsString,\n  } = currentRound\n\n  return {\n    ...currentRound,\n    priceTicketInXfn: new BigNumber(priceTicketInXfnAsString),\n    discountDivisor: new BigNumber(discountDivisorAsString),\n    amountCollectedInXfn: new BigNumber(amountCollectedInXfnAsString),\n  }\n})\n\nexport const lotterySelector = createSelector(\n  [\n    currentRoundSelector,\n    selectIsTransitioning,\n    selectCurrentLotteryId,\n    selectUserLotteryData,\n    selectLotteriesData,\n    maxNumberTicketsPerBuyOrClaimSelector,\n  ],\n  (\n    processedCurrentRound,\n    isTransitioning,\n    currentLotteryId,\n    userLotteryData,\n    lotteriesData,\n    maxNumberTicketsPerBuyOrClaim,\n  ) => {\n    return {\n      currentLotteryId,\n      maxNumberTicketsPerBuyOrClaim,\n      isTransitioning,\n      userLotteryData,\n      lotteriesData,\n      currentRound: processedCurrentRound,\n    }\n  },\n)\n","import { useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { useSelector, batch } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useFastRefreshEffect } from 'hooks/useRefreshEffect'\nimport { State } from '../types'\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.'\nimport { makeLotteryGraphDataByIdSelector, lotterySelector } from './selectors'\n\n// Lottery\nexport const useGetCurrentLotteryId = () => {\n  return useSelector((state: State) => state.lottery.currentLotteryId)\n}\n\nexport const useGetUserLotteriesGraphData = () => {\n  return useSelector((state: State) => state.lottery.userLotteryData)\n}\n\nexport const useGetLotteriesGraphData = () => {\n  return useSelector((state: State) => state.lottery.lotteriesData)\n}\n\nexport const useGetLotteryGraphDataById = (lotteryId: string) => {\n  const lotteryGraphDataByIdSelector = useMemo(() => makeLotteryGraphDataByIdSelector(lotteryId), [lotteryId])\n  return useSelector(lotteryGraphDataByIdSelector)\n}\n\nexport const useFetchLottery = (fetchPublicDataOnly = false) => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const currentLotteryId = useGetCurrentLotteryId()\n\n  useEffect(() => {\n    // get current lottery ID & max ticket buy\n    dispatch(fetchCurrentLotteryId())\n  }, [dispatch])\n\n  useFastRefreshEffect(() => {\n    if (currentLotteryId) {\n      batch(() => {\n        // Get historical lottery data from nodes +  last 100 subgraph entries\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n        // get public data for current lottery\n        dispatch(fetchCurrentLottery({ currentLotteryId }))\n      })\n    }\n  }, [dispatch, currentLotteryId])\n\n  useEffect(() => {\n    // get user tickets for current lottery, and user lottery subgraph data\n    if (account && currentLotteryId && !fetchPublicDataOnly) {\n      dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\n    }\n  }, [dispatch, currentLotteryId, account, fetchPublicDataOnly])\n}\n\nexport const useLottery = () => {\n  return useSelector(lotterySelector)\n}\n","import { LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useMemo } from 'react'\n\ninterface LotteryEvent {\n  nextEventTime: number\n  postCountdownText?: string\n  preCountdownText?: string\n}\n\nconst vrfRequestTime = 180 // 3 mins\nconst secondsBetweenRounds = 300 // 5 mins\nconst transactionResolvingBuffer = 30 // Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\n\nconst useGetNextLotteryEvent = (endTime: number, status: LotteryStatus): LotteryEvent => {\n  const { t } = useTranslation()\n  return useMemo(() => {\n    // Current lottery is active\n    if (status === LotteryStatus.OPEN) {\n      return {\n        nextEventTime: endTime + transactionResolvingBuffer,\n        preCountdownText: null,\n        postCountdownText: t('until the draw'),\n      }\n    }\n    // Current lottery has finished but not yet claimable\n    if (status === LotteryStatus.CLOSE) {\n      return {\n        nextEventTime: endTime + transactionResolvingBuffer + vrfRequestTime,\n        preCountdownText: t('Winners announced in'),\n        postCountdownText: null,\n      }\n    }\n    // Current lottery claimable. Next lottery has not yet started\n    if (status === LotteryStatus.CLAIMABLE) {\n      return {\n        nextEventTime: endTime + transactionResolvingBuffer + secondsBetweenRounds,\n        preCountdownText: t('Tickets on sale in'),\n        postCountdownText: null,\n      }\n    }\n    return { nextEventTime: null, preCountdownText: null, postCountdownText: null }\n  }, [endTime, status, t])\n}\n\nexport default useGetNextLotteryEvent\n","import { useWeb3React } from '@pancakeswap/wagmi'\nimport { LotteryStatus } from 'config/constants/types'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery'\n\nconst useStatusTransitions = () => {\n  const {\n    currentLotteryId,\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const previousStatus = usePreviousValue(status)\n\n  useEffect(() => {\n    // Only run if there is a status state change\n    if (previousStatus !== status && currentLotteryId) {\n      // Current lottery transitions from CLOSE > CLAIMABLE\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n        if (account) {\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\n        }\n      }\n      // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n        if (account) {\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\n        }\n      }\n    }\n  }, [currentLotteryId, status, previousStatus, account, dispatch])\n\n  useEffect(() => {\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\n      dispatch(fetchCurrentLotteryId())\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\n      const interval = setInterval(async () => {\n        dispatch(fetchCurrentLotteryId())\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n      }, 10000)\n      return () => clearInterval(interval)\n    }\n    return () => null\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch])\n}\n\nexport default useStatusTransitions\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Cake, Erc20 } from 'config/abi/types'\n\nexport const requiresApproval = async (\n  contract: Erc20 | Cake,\n  account: string,\n  spenderAddress: string,\n  minimumRequired: number | BigNumber = 0,\n) => {\n  try {\n    const response = await contract.allowance(account, spenderAddress)\n    const hasMinimumRequired =\n      (typeof minimumRequired === 'number' && minimumRequired > 0) ||\n      (BigNumber.isBigNumber(minimumRequired) && minimumRequired.gt(0))\n    if (hasMinimumRequired) {\n      return response.lt(minimumRequired)\n    }\n    return response.lte(0)\n  } catch (error) {\n    return true\n  }\n}\n","import { useEffect, useReducer, useRef, useCallback } from 'react'\nimport noop from 'lodash/noop'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { TransactionReceipt, TransactionResponse } from '@ethersproject/providers'\nimport useCatchTxError from './useCatchTxError'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<TransactionResponse>\n  onConfirm: (params?) => Promise<TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { fetchWithCatchTxError } = useCatchTxError()\n\n  const handleApprove = useCallback(async () => {\n    const receipt = await fetchWithCatchTxError(() => {\n      dispatch({ type: 'approve_sending' })\n      return onApprove()\n    })\n    if (receipt?.status) {\n      dispatch({ type: 'approve_receipt' })\n      onApproveSuccess({ state, receipt })\n    } else {\n      dispatch({ type: 'approve_error' })\n    }\n  }, [onApprove, onApproveSuccess, state, fetchWithCatchTxError])\n\n  const handleConfirm = useCallback(\n    async (params = {}) => {\n      const receipt = await fetchWithCatchTxError(() => {\n        dispatch({ type: 'confirm_sending' })\n        return onConfirm(params)\n      })\n      if (receipt?.status) {\n        dispatch({ type: 'confirm_receipt' })\n        onSuccess({ state, receipt })\n      } else {\n        dispatch({ type: 'confirm_error' })\n      }\n    },\n    [onConfirm, dispatch, onSuccess, state, fetchWithCatchTxError],\n  )\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((requiresApproval) => {\n        if (!requiresApproval) {\n          dispatch({ type: 'approve_receipt' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    hasApproveFailed: state.approvalState === 'fail',\n    hasConfirmFailed: state.confirmState === 'fail',\n    handleApprove,\n    handleConfirm,\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import styled from 'styled-components'\nimport { Button } from '@pancakeswap/uikit'\n\ninterface NumTicketsToBuyButtonProps {\n  onClick: () => void\n  disabled?: boolean\n  children: any\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst NumTicketsToBuyButton: React.FC<NumTicketsToBuyButtonProps> = ({ children, onClick, disabled = false }) => {\n  return (\n    <StyledButton disabled={disabled} scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default NumTicketsToBuyButton\n","import { useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Ticket, UpdateTicketAction } from './useTicketsReducer'\n\nconst InputsContainer = styled.div<{ focused: boolean; isDuplicate: boolean }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 36px;\n  box-sizing: border-box;\n  border: 1px solid #d7caec;\n  background-color: #eeeaf4;\n  border-radius: 6px;\n  margin-bottom: 8px;\n  ${({ isDuplicate }) =>\n    isDuplicate &&\n    `\n    border: 1px solid #FFB237;\n    box-shadow: 0px 0px 0px 2px #FFB237;\n  `}\n  ${({ focused }) =>\n    focused &&\n    `\n    border: 1px solid #7645D9;\n    box-shadow: 0px 0px 0px 2px #E4DAF7;\n  `}\n`\n\nconst DigitInput = styled.input`\n  color: ${({ theme }) => theme.colors.primaryDark};\n  border: none;\n  height: 32px;\n  padding: 0 12px;\n  font-size: 16px;\n  flex: 1;\n  width: 16px;\n  text-align: center;\n  min-width: 0;\n  background-color: transparent;\n  caret-color: #7a6faa;\n\n  &::placeholder {\n    text-align: center;\n  }\n\n  &:placeholder-shown {\n    text-align: left;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    /* display: none; <- Crashes Chrome on hover */\n    -webkit-appearance: none;\n    margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n  }\n\n  -moz-appearance: textfield; /* Firefox */\n`\n\nconst getIdLabel = (id: number): string => {\n  if (id < 10) return `#00${id}`\n  if (id < 100) return `#0${id}`\n  return `#${id}`\n}\n\nconst TicketContainer: React.FC<{\n  ticket: Ticket\n  duplicateWith: number[]\n  updateTicket: UpdateTicketAction\n  disabled: boolean\n}> = ({ ticket, duplicateWith, updateTicket, disabled }) => {\n  const [focused, setFocused] = useState(false)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const digit1 = useRef<HTMLInputElement>(null)\n  const digit2 = useRef<HTMLInputElement>(null)\n  const digit3 = useRef<HTMLInputElement>(null)\n  const digit4 = useRef<HTMLInputElement>(null)\n  const digit5 = useRef<HTMLInputElement>(null)\n  const digit6 = useRef<HTMLInputElement>(null)\n\n  const { t } = useTranslation()\n\n  const digitRefs = [digit1, digit2, digit3, digit4, digit5, digit6]\n\n  const scrollInputIntoView = () => {\n    if (containerRef.current) {\n      containerRef.current.scrollIntoView({ block: 'center', behavior: 'smooth' })\n    }\n  }\n\n  const onPasteHandler = (e: React.ClipboardEvent) => {\n    e.preventDefault()\n    const pasteContent = e.clipboardData.getData('Text')\n    if (pasteContent.length <= 6 && /^\\d+$/.test(pasteContent)) {\n      const filler = Array(6 - pasteContent.length).fill('')\n      updateTicket(ticket.id, [...pasteContent.split(''), ...filler])\n    }\n  }\n\n  const onFocusHandler = () => {\n    scrollInputIntoView()\n    setFocused(true)\n  }\n\n  const onBlurHandler = () => {\n    setFocused(false)\n  }\n\n  const onChangeHandler = (event: React.KeyboardEvent, digitId: number) => {\n    const currentKey = parseInt(event.key, 10)\n\n    if (['e', 'E', '.', ',', '-', 'Unidentified'].includes(event.key)) {\n      event.preventDefault()\n      return\n    }\n\n    // Handling numeric inputs\n    if (currentKey >= 0 && currentKey <= 9) {\n      event.preventDefault()\n      const newNumbers = [...ticket.numbers]\n      newNumbers[digitId] = `${currentKey}`\n      updateTicket(ticket.id, newNumbers)\n      const nextDigitId = digitId + 1\n      // if we're not on the last digit - auto-tab\n      const nextInput = digitRefs[nextDigitId]\n      if (nextDigitId !== 6 && nextInput.current) {\n        nextInput.current.focus()\n      }\n    }\n\n    if (event.key === 'Backspace') {\n      event.preventDefault()\n      // If some number is there - delete the number\n      if (ticket.numbers[digitId]) {\n        const newNumbers = [...ticket.numbers]\n        newNumbers[digitId] = ''\n        updateTicket(ticket.id, newNumbers)\n      } else {\n        // if the cell is empty and user presses backspace - remove previous\n        const prevDigitId = digitId - 1\n        const nextInput = digitRefs[prevDigitId]\n        // prevent focusing on non-existent input\n        if (prevDigitId !== -1 && nextInput.current) {\n          nextInput.current.focus()\n          const newNumbers = [...ticket.numbers]\n          newNumbers[prevDigitId] = ''\n          updateTicket(ticket.id, newNumbers)\n        }\n      }\n    }\n\n    if (event.key === 'Delete') {\n      event.preventDefault()\n      if (ticket.numbers[digitId]) {\n        const newNumbers = [...ticket.numbers]\n        newNumbers[digitId] = ''\n        updateTicket(ticket.id, newNumbers)\n      } else {\n        // if the cell is empty and user presses delete - remove next\n        const nextDigitId = digitId + 1\n        const nextInput = digitRefs[nextDigitId]\n        // prevent focusing on non-existent input\n        if (nextDigitId !== 6 && nextInput.current) {\n          nextInput.current.focus()\n          const newNumbers = [...ticket.numbers]\n          newNumbers[nextDigitId] = ''\n          updateTicket(ticket.id, newNumbers)\n        }\n      }\n    }\n\n    if (event.key === 'ArrowLeft') {\n      event.preventDefault()\n      const prevDigitId = digitId - 1\n      const nextInput = digitRefs[prevDigitId]\n      // prevent focusing on non-existent input\n      if (prevDigitId !== -1 && nextInput.current) {\n        nextInput.current.focus()\n      }\n    }\n\n    if (event.key === 'ArrowRight') {\n      event.preventDefault()\n      const nextDigitId = digitId + 1\n      const nextInput = digitRefs[nextDigitId]\n      // prevent focusing on non-existent input\n      if (nextDigitId !== 6 && nextInput.current) {\n        nextInput.current.focus()\n      }\n    }\n  }\n  return (\n    <>\n      <Flex justifyContent=\"space-between\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {getIdLabel(ticket.id)}\n        </Text>\n        <Text fontSize=\"12px\" color=\"warning\">\n          {duplicateWith.length !== 0 && t('Duplicate')}\n        </Text>\n      </Flex>\n      <InputsContainer\n        ref={containerRef}\n        onClick={scrollInputIntoView}\n        focused={focused}\n        isDuplicate={duplicateWith.length !== 0}\n      >\n        <DigitInput\n          ref={digit1}\n          type=\"number\"\n          value={ticket.numbers[0]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 0)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit2}\n          type=\"number\"\n          value={ticket.numbers[1]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 1)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit3}\n          type=\"number\"\n          value={ticket.numbers[2]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 2)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit4}\n          type=\"number\"\n          value={ticket.numbers[3]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 3)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit5}\n          type=\"number\"\n          value={ticket.numbers[4]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 4)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n        <DigitInput\n          ref={digit6}\n          type=\"number\"\n          value={ticket.numbers[5]}\n          onKeyDown={(e: React.KeyboardEvent) => onChangeHandler(e, 5)}\n          placeholder=\"_\"\n          onChange={(e) => e.preventDefault()}\n          disabled={disabled}\n          onFocus={onFocusHandler}\n          onBlur={onBlurHandler}\n          onPaste={onPasteHandler}\n          inputMode=\"numeric\"\n        />\n      </InputsContainer>\n    </>\n  )\n}\n\nexport default TicketContainer\n","import { useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Button, ArrowBackIcon, AutoRenewIcon } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport TicketInput from './TicketInput'\nimport { UpdateTicketAction, Ticket } from './useTicketsReducer'\n\nconst StyledModal = styled(Modal)`\n  max-height: 552px;\n  & div:nth-child(2) {\n    padding: 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 280px;\n  }\n`\n\nconst ScrollableContainer = styled.div`\n  height: 310px;\n  overflow-y: scroll;\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n  padding: 24px;\n`\n\nconst EditNumbersModal: React.FC<{\n  totalCost: string\n  updateTicket: UpdateTicketAction\n  randomize: () => void\n  tickets: Ticket[]\n  allComplete: boolean\n  onConfirm: () => void\n  isConfirming: boolean\n  onDismiss?: () => void\n}> = ({ totalCost, updateTicket, randomize, tickets, allComplete, onConfirm, isConfirming, onDismiss }) => {\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const handleOnConfirm = useCallback(() => onConfirm(), [onConfirm])\n  return (\n    <StyledModal\n      title={t('Edit numbers')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n      onBack={onDismiss}\n    >\n      <ScrollableContainer>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          <Text color=\"textSubtle\">{t('Total cost')}:</Text>\n          <Text>~{totalCost} DEP</Text>\n        </Flex>\n        <Text fontSize=\"12px\" color=\"textSubtle\" mb=\"16px\">\n          {t(\n            'Numbers are randomized, with no duplicates among your tickets. Tap a number to edit it. Available digits: 0-9',\n          )}\n        </Text>\n        <Button disabled={isConfirming} mb=\"16px\" variant=\"secondary\" width=\"100%\" height=\"32px\" onClick={randomize}>\n          {t('Randomize')}\n        </Button>\n        {tickets.map((ticket) => (\n          <TicketInput\n            key={ticket.id}\n            ticket={ticket}\n            duplicateWith={ticket.duplicateWith}\n            updateTicket={updateTicket}\n            disabled={isConfirming}\n          />\n        ))}\n      </ScrollableContainer>\n      <Flex flexDirection=\"column\" justifyContent=\"center\" m=\"24px\">\n        <Button\n          id=\"lotteryBuyEdited\"\n          disabled={!allComplete || isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n          onClick={handleOnConfirm}\n        >\n          {isConfirming ? t('Confirming') : t('Confirm and buy')}\n        </Button>\n        <Button mt=\"8px\" variant={isConfirming ? 'secondary' : 'text'} disabled={isConfirming} onClick={onDismiss}>\n          <ArrowBackIcon color={isConfirming ? 'disabled' : 'primary'} height=\"24px\" width=\"24px\" /> {t('Go back')}\n        </Button>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default EditNumbersModal\n","import BigNumber from 'bignumber.js'\nimport { LotteryResponse, LotteryRound, LotteryRoundUserTickets } from 'state/types'\n\n/**\n * Remove the '1' and reverse the digits in a lottery number retrieved from the smart contract\n */\nexport const parseRetrievedNumber = (number: string): string => {\n  const numberAsArray = number.split('')\n  numberAsArray.splice(0, 1)\n  numberAsArray.reverse()\n  return numberAsArray.join('')\n}\n\nexport const getDrawnDate = (locale: string, endTime: string) => {\n  const endTimeInMs = parseInt(endTime, 10) * 1000\n  const endTimeAsDate = new Date(endTimeInMs)\n  return endTimeAsDate.toLocaleDateString(locale, dateTimeOptions)\n}\n\nexport const dateOptions: Intl.DateTimeFormatOptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n}\n\nexport const timeOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n  minute: 'numeric',\n}\n\nexport const dateTimeOptions: Intl.DateTimeFormatOptions = {\n  ...dateOptions,\n  ...timeOptions,\n}\n\nexport const processLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInXfn: priceTicketInXfnAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInXfn: amountCollectedInXfnAsString,\n  } = lotteryData\n\n  const discountDivisor = new BigNumber(discountDivisorAsString)\n  const priceTicketInXfn = new BigNumber(priceTicketInXfnAsString)\n  const amountCollectedInXfn = new BigNumber(amountCollectedInXfnAsString)\n\n  return {\n    isLoading: lotteryData.isLoading,\n    lotteryId: lotteryData.lotteryId,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInXfn,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInXfn,\n    finalNumber: lotteryData.finalNumber,\n    xfnPerBracket: lotteryData.xfnPerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n","import { LotteryTicket } from 'config/constants/types'\nimport random from 'lodash/random'\n\n/**\n * Generate a specific number of unique, randomised 7-digit lottery numbers between 1000000 & 1999999\n */\nconst generateTicketNumbers = (\n  numberOfTickets: number,\n  userCurrentTickets?: LotteryTicket[],\n  minNumber = 1000000,\n  maxNumber = 1999999,\n): number[] => {\n  // Populate array with existing tickets (if they have them) to ensure no duplicates when generating new numbers\n  const existingTicketNumbers =\n    userCurrentTickets?.length > 0\n      ? userCurrentTickets.map((ticket) => {\n          return parseInt(ticket?.number)\n        })\n      : []\n  const generatedTicketNumbers = [...existingTicketNumbers]\n\n  for (let count = 0; count < numberOfTickets; count++) {\n    let randomNumber = random(minNumber, maxNumber)\n    while (generatedTicketNumbers.includes(randomNumber)) {\n      // Catch for duplicates - generate a new number until the array doesn't include the random number generated\n      randomNumber = random(minNumber, maxNumber)\n    }\n    generatedTicketNumbers.push(randomNumber)\n  }\n\n  // Filter out the users' existing tickets\n  const ticketsToBuy =\n    userCurrentTickets?.length > 0\n      ? generatedTicketNumbers.filter((ticketNumber) => {\n          return !existingTicketNumbers.includes(ticketNumber)\n        })\n      : generatedTicketNumbers\n\n  return ticketsToBuy\n}\n\nexport default generateTicketNumbers\n","import { LotteryTicket } from 'config/constants/types'\nimport { useEffect, useReducer } from 'react'\nimport { parseRetrievedNumber } from '../../helpers'\nimport generateTicketNumbers from './generateTicketNumbers'\n\nexport interface Ticket {\n  id: number\n  numbers: string[]\n  duplicateWith: number[]\n  isComplete: boolean\n}\n\nexport interface TicketsState {\n  tickets: Ticket[]\n  allComplete: boolean\n}\n\nconst getInitialState = ({\n  amount,\n  userCurrentTickets,\n}: {\n  amount: number\n  userCurrentTickets: LotteryTicket[]\n}): TicketsState => {\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets)\n  const randomTicketsAsStringArray = randomTickets.map((ticket) => parseRetrievedNumber(ticket.toString()).split(''))\n  const tickets = Array.from({ length: amount }, (_, i) => i + 1).map((index) => ({\n    id: index,\n    numbers: randomTicketsAsStringArray[index - 1],\n    duplicateWith: [],\n    isComplete: true,\n  }))\n  return {\n    tickets,\n    allComplete: true,\n  }\n}\n\nconst reducer = (state: TicketsState, action: any) => {\n  switch (action.type) {\n    case 'updateTicket': {\n      const tickets = [...state.tickets]\n      const { ticketId, newNumbers } = action.payload\n\n      const newDuplicates = state.tickets.filter(\n        (ticket) => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''),\n      )\n\n      // If ticket was duplicate but not duplicate anymore with this update\n      // go through previously considered duplicates and remove id of this ticket\n      // from their duplicateWith array\n      const prevDuplicates = tickets[ticketId - 1].duplicateWith\n      prevDuplicates.forEach((prevTicketId) => {\n        if (!newDuplicates.map(({ id }) => id).includes(prevTicketId)) {\n          const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith]\n          const indexToRemove = dupsToUpdate.findIndex((id) => id === ticketId)\n          dupsToUpdate.splice(indexToRemove, 1)\n          tickets[prevTicketId - 1] = {\n            ...tickets[prevTicketId - 1],\n            duplicateWith: dupsToUpdate,\n          }\n        }\n      })\n\n      // If found duplicates - update their duplicateWith array\n      if (newDuplicates.length !== 0) {\n        newDuplicates.forEach((duplicate) => {\n          tickets[duplicate.id - 1] = {\n            ...duplicate,\n            duplicateWith: [...duplicate.duplicateWith, ticketId],\n          }\n        })\n      }\n\n      const updatedTicket = {\n        id: ticketId,\n        numbers: newNumbers,\n        duplicateWith: newDuplicates.map((ticket) => ticket.id),\n        isComplete: newNumbers.join('').length === 6,\n      }\n      tickets[ticketId - 1] = updatedTicket\n\n      // Check if all tickets are filled\n      const allComplete = tickets.every((ticket) => ticket.isComplete)\n\n      return {\n        tickets,\n        allComplete,\n      }\n    }\n    case 'reset':\n      return getInitialState({ amount: action.payload.amount, userCurrentTickets: action.payload.userCurrentTickets })\n    default:\n      throw new Error()\n  }\n}\n\nexport type UpdateTicketAction = (ticketId: number, newNumbers: string[]) => void\n\nexport const useTicketsReducer = (\n  amount: number,\n  userCurrentTickets: LotteryTicket[],\n): [UpdateTicketAction, () => void, Ticket[], boolean, () => number[]] => {\n  const [state, dispatch] = useReducer(reducer, { amount, userCurrentTickets }, getInitialState)\n\n  useEffect(() => {\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\n  }, [amount, userCurrentTickets])\n\n  const updateTicket = (ticketId: number, newNumbers: string[]) => {\n    dispatch({ type: 'updateTicket', payload: { ticketId, newNumbers } })\n  }\n\n  const randomize = () => {\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\n  }\n\n  const getTicketsForPurchase = () => {\n    return state.tickets.map((ticket) => {\n      const reversedTicket = [...ticket.numbers].map((num) => parseInt(num, 10)).reverse()\n      reversedTicket.unshift(1)\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10)\n      return ticketAsNumber\n    })\n  }\n\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase]\n}\n","import { useEffect, useState, useMemo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { requiresApproval } from 'utils/requiresApproval'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport {\n  Modal,\n  Text,\n  Flex,\n  HelpIcon,\n  BalanceInput,\n  Ticket,\n  useTooltip,\n  Skeleton,\n  Button,\n  ArrowForwardIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { bscTokens } from 'config/constants/tokens'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useAppDispatch } from 'state'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserTicketsAndLotteries } from 'state/lottery'\nimport useTheme from 'hooks/useTheme'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { FetchStatus } from 'config/constants/types'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useLotteryV2Contract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useToast from 'hooks/useToast'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons, { ButtonArrangement } from 'components/ApproveConfirmButtons'\nimport NumTicketsToBuyButton from './NumTicketsToBuyButton'\nimport EditNumbersModal from './EditNumbersModal'\nimport { useTicketsReducer } from './useTicketsReducer'\nimport { pulseChainTokens } from '@pancakeswap/tokens'\n\nconst StyledModal = styled(Modal)`\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 280px;\n  }\n`\n\nconst ShortcutButtonsWrapper = styled(Flex)<{ isVisible: boolean }>`\n  justify-content: space-between;\n  margin-top: 8px;\n  margin-bottom: 24px;\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\n`\n\ninterface BuyTicketsModalProps {\n  onDismiss?: () => void\n}\n\nenum BuyingStage {\n  BUY = 'Buy',\n  EDIT = 'Edit',\n}\n\nconst BuyTicketsModal: React.FC<BuyTicketsModalProps> = ({ onDismiss }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const {\n    maxNumberTicketsPerBuyOrClaim,\n    currentLotteryId,\n    currentRound: {\n      priceTicketInXfn,\n      discountDivisor,\n      userTickets: { tickets: userCurrentTickets },\n    },\n  } = useLottery()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const [ticketsToBuy, setTicketsToBuy] = useState('')\n  const [discountValue, setDiscountValue] = useState('')\n  const [totalCost, setTotalCost] = useState('')\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('')\n  const [buyingStage, setBuyingStage] = useState<BuyingStage>(BuyingStage.BUY)\n  const [maxPossibleTicketPurchase, setMaxPossibleTicketPurchase] = useState(BIG_ZERO)\n  const [maxTicketPurchaseExceeded, setMaxTicketPurchaseExceeded] = useState(false)\n  const [userNotEnoughCake, setUserNotEnoughCake] = useState(false)\n  const lotteryContract = useLotteryV2Contract()\n  const { reader: cakeContractReader, signer: cakeContractApprover } = useCake()\n  const { toastSuccess } = useToast()\n  const { balance: userCake, fetchStatus } = useTokenBalance(pulseChainTokens.xfn.address)\n  // balance from useTokenBalance causes rerenders in effects as a new BigNumber is instantiated on each render, hence memoising it using the stringified value below.\n  const stringifiedUserCake = userCake.toJSON()\n  const memoisedUserCake = useMemo(() => new BigNumber(stringifiedUserCake), [stringifiedUserCake])\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const hasFetchedBalance = fetchStatus === FetchStatus.Fetched\n  const userCakeDisplayBalance = getFullDisplayBalance(userCake, 9, 3)\n\n  const TooltipComponent = () => (\n    <>\n      <Text mb=\"16px\">\n        {t(\n          'Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:',\n        )}\n      </Text>\n      <Text>{t('2 tickets: 0.05%')}</Text>\n      <Text>{t('50 tickets: 2.45%')}</Text>\n      <Text>{t('100 tickets: 4.95%')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10],\n  })\n\n  const limitNumberByMaxTicketsPerBuy = useCallback(\n    (number: BigNumber) => {\n      return number.gt(maxNumberTicketsPerBuyOrClaim) ? maxNumberTicketsPerBuyOrClaim : number\n    },\n    [maxNumberTicketsPerBuyOrClaim],\n  )\n\n  const getTicketCostAfterDiscount = useCallback(\n    (numberTickets: BigNumber) => {\n      const totalAfterDiscount = priceTicketInXfn\n        .times(numberTickets)\n        .times(discountDivisor.plus(1).minus(numberTickets))\n        .div(discountDivisor)\n      return totalAfterDiscount\n    },\n    [discountDivisor, priceTicketInXfn],\n  )\n\n  const getMaxTicketBuyWithDiscount = useCallback(\n    (numberTickets: BigNumber) => {\n      const costAfterDiscount = getTicketCostAfterDiscount(numberTickets)\n      const costBeforeDiscount = priceTicketInXfn.times(numberTickets)\n      const discountAmount = costBeforeDiscount.minus(costAfterDiscount)\n      const ticketsBoughtWithDiscount = discountAmount.div(priceTicketInXfn)\n      const overallTicketBuy = numberTickets.plus(ticketsBoughtWithDiscount)\n      return { overallTicketBuy, ticketsBoughtWithDiscount }\n    },\n    [getTicketCostAfterDiscount, priceTicketInXfn],\n  )\n\n  const validateInput = useCallback(\n    (inputNumber: BigNumber) => {\n      const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputNumber)\n      const cakeCostAfterDiscount = getTicketCostAfterDiscount(limitedNumberTickets)\n\n      if (cakeCostAfterDiscount.gt(userCake)) {\n        setUserNotEnoughCake(true)\n      } else if (limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)) {\n        setMaxTicketPurchaseExceeded(true)\n      } else {\n        setUserNotEnoughCake(false)\n        setMaxTicketPurchaseExceeded(false)\n      }\n    },\n    [limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, maxNumberTicketsPerBuyOrClaim, userCake],\n  )\n\n  useEffect(() => {\n    const getMaxPossiblePurchase = () => {\n      const maxBalancePurchase = memoisedUserCake.div(priceTicketInXfn)\n      const limitedMaxPurchase = limitNumberByMaxTicketsPerBuy(maxBalancePurchase)\n      let maxPurchase\n\n      // If the users' max DEP balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\n      if (limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)) {\n        // Get max tickets purchasable with the users' balance, as well as using the discount to buy tickets\n        const { overallTicketBuy: maxPlusDiscountTickets } = getMaxTicketBuyWithDiscount(limitedMaxPurchase)\n\n        // Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\n        const { ticketsBoughtWithDiscount: secondTicketDiscountBuy } =\n          getMaxTicketBuyWithDiscount(maxPlusDiscountTickets)\n\n        // Add the additional tickets that can be bought with the discount, to the original max purchase\n        maxPurchase = limitedMaxPurchase.plus(secondTicketDiscountBuy)\n      } else {\n        maxPurchase = limitedMaxPurchase\n      }\n\n      if (hasFetchedBalance && maxPurchase.lt(1)) {\n        setUserNotEnoughCake(true)\n      } else {\n        setUserNotEnoughCake(false)\n      }\n\n      setMaxPossibleTicketPurchase(maxPurchase)\n    }\n    getMaxPossiblePurchase()\n  }, [\n    maxNumberTicketsPerBuyOrClaim,\n    priceTicketInXfn,\n    memoisedUserCake,\n    limitNumberByMaxTicketsPerBuy,\n    getTicketCostAfterDiscount,\n    getMaxTicketBuyWithDiscount,\n    hasFetchedBalance,\n  ])\n\n  useEffect(() => {\n    const numberOfTicketsToBuy = new BigNumber(ticketsToBuy)\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy)\n    const costBeforeDiscount = priceTicketInXfn.times(numberOfTicketsToBuy)\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount)\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount, 9) : '0')\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount, 9) : '0')\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, 9) : '0')\n  }, [ticketsToBuy, priceTicketInXfn, discountDivisor, getTicketCostAfterDiscount])\n\n  const getNumTicketsByPercentage = (percentage: number): number => {\n    const percentageOfMaxTickets = maxPossibleTicketPurchase.gt(0)\n      ? maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage))\n      : BIG_ZERO\n    return Math.floor(percentageOfMaxTickets.toNumber())\n  }\n\n  const tenPercentOfBalance = getNumTicketsByPercentage(10)\n  const twentyFivePercentOfBalance = getNumTicketsByPercentage(25)\n  const fiftyPercentOfBalance = getNumTicketsByPercentage(50)\n  const oneHundredPercentOfBalance = getNumTicketsByPercentage(100)\n\n  const handleInputChange = (input: string) => {\n    // Force input to integer\n    const inputAsInt = parseInt(input, 10)\n    const inputAsBN = new BigNumber(inputAsInt)\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputAsBN)\n    validateInput(inputAsBN)\n    setTicketsToBuy(inputAsInt ? limitedNumberTickets.toString() : '')\n  }\n\n  const handleNumberButtonClick = (number: number) => {\n    setTicketsToBuy(number.toFixed())\n    setUserNotEnoughCake(false)\n    setMaxTicketPurchaseExceeded(false)\n  }\n\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(\n    parseInt(ticketsToBuy, 10),\n    userCurrentTickets,\n  )\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        return requiresApproval(cakeContractReader, account, lotteryContract.address)\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContractApprover, 'approve', [lotteryContract.address, MaxUint256])\n      },\n      onApproveSuccess: async ({ receipt }) => {\n        toastSuccess(\n          t('Contract enabled - you can now purchase tickets'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n        )\n      },\n      onConfirm: () => {\n        const ticketsForPurchase = getTicketsForPurchase()\n        return callWithGasPrice(lotteryContract, 'buyTickets', [currentLotteryId, ticketsForPurchase])\n      },\n      onSuccess: async ({ receipt }) => {\n        onDismiss?.()\n        dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\n        toastSuccess(t('Lottery tickets purchased!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      },\n    })\n\n  const getErrorMessage = () => {\n    if (userNotEnoughCake) return t('Insufficient DEP balance')\n    return t('The maximum number of tickets you can buy in one transaction is %maxTickets%', {\n      maxTickets: maxNumberTicketsPerBuyOrClaim.toString(),\n    })\n  }\n\n  const percentageDiscount = () => {\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100)\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\n      return 0\n    }\n    return percentageAsBn.toNumber().toFixed(2)\n  }\n\n  const disableBuying =\n    !isApproved ||\n    isConfirmed ||\n    userNotEnoughCake ||\n    !ticketsToBuy ||\n    new BigNumber(ticketsToBuy).lte(0) ||\n    getTicketsForPurchase().length !== parseInt(ticketsToBuy, 10)\n\n  if (buyingStage === BuyingStage.EDIT) {\n    return (\n      <EditNumbersModal\n        totalCost={totalCost}\n        updateTicket={updateTicket}\n        randomize={randomize}\n        tickets={tickets}\n        allComplete={allComplete}\n        onConfirm={handleConfirm}\n        isConfirming={isConfirming}\n        onDismiss={() => setBuyingStage(BuyingStage.BUY)}\n      />\n    )\n  }\n\n  return (\n    <StyledModal title={t('Buy Tickets')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      {tooltipVisible && tooltip}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text color=\"textSubtle\">{t('Buy')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Text mr=\"4px\" bold>\n            {t('Tickets')}\n          </Text>\n            <img src=\"/images/lottery/xfortune_small_ticket.png\" alt=\"\" width=\"48px\" height=\"24px\"/>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        isWarning={account && (userNotEnoughCake || maxTicketPurchaseExceeded)}\n        placeholder=\"0\"\n        value={ticketsToBuy}\n        onUserInput={handleInputChange}\n        currencyValue={\n          cakePriceBusd.gt(0) &&\n          `~${\n            ticketsToBuy ? getFullDisplayBalance(priceTicketInXfn.times(new BigNumber(ticketsToBuy)), 9) : '0.00'\n          } SOMI`\n        }\n      />\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\" mt=\"4px\" mb=\"12px\">\n        <Flex justifyContent=\"flex-end\" flexDirection=\"column\">\n          {account && (userNotEnoughCake || maxTicketPurchaseExceeded) && (\n            <Text fontSize=\"12px\" color=\"failure\">\n              {getErrorMessage()}\n            </Text>\n          )}\n          {account && (\n            <Flex justifyContent=\"flex-end\">\n              <Text fontSize=\"12px\" color=\"textSubtle\" mr=\"4px\">\n              SOMI {t('Balance')}:\n              </Text>\n              {hasFetchedBalance ? (\n                <Text fontSize=\"12px\" color=\"textSubtle\">\n                  {userCakeDisplayBalance}\n                </Text>\n              ) : (\n                <Skeleton width={50} height={12} />\n              )}\n            </Flex>\n          )}\n        </Flex>\n      </Flex>\n\n      {account && !hasFetchedBalance ? (\n        <Skeleton width=\"100%\" height={20} mt=\"8px\" mb=\"24px\" />\n      ) : (\n        <ShortcutButtonsWrapper isVisible={account && hasFetchedBalance && oneHundredPercentOfBalance >= 1}>\n          {tenPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(tenPercentOfBalance)}>\n              {hasFetchedBalance ? tenPercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {twentyFivePercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(twentyFivePercentOfBalance)}>\n              {hasFetchedBalance ? twentyFivePercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {fiftyPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(fiftyPercentOfBalance)}>\n              {hasFetchedBalance ? fiftyPercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {oneHundredPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(oneHundredPercentOfBalance)}>\n              <Text small color=\"currentColor\" textTransform=\"uppercase\">\n                {t('Max')}\n              </Text>\n            </NumTicketsToBuyButton>\n          )}\n        </ShortcutButtonsWrapper>\n      )}\n      <Flex flexDirection=\"column\">\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {t('Cost')} (DEP)\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {priceTicketInXfn && getFullDisplayBalance(priceTicketInXfn.times(ticketsToBuy || 0), 9)} DEP\n          </Text>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Flex>\n            <Text display=\"inline\" bold fontSize=\"14px\" mr=\"4px\">\n              {discountValue && totalCost ? percentageDiscount() : 0}%\n            </Text>\n            <Text display=\"inline\" color=\"textSubtle\" fontSize=\"14px\">\n              {t('Bulk discount')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"center\" ref={targetRef}>\n              <HelpIcon ml=\"4px\" width=\"14px\" height=\"14px\" color=\"textSubtle\" />\n            </Flex>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            ~{discountValue} DEP\n          </Text>\n        </Flex>\n        <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} pt=\"8px\" mb=\"24px\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" fontSize=\"16px\">\n            {t('You pay')}\n          </Text>\n          <Text fontSize=\"16px\" bold>\n            ~{totalCost} DEP\n          </Text>\n        </Flex>\n\n        {account ? (\n          <>\n            <ApproveConfirmButtons\n              isApproveDisabled={isApproved}\n              isApproving={isApproving}\n              isConfirmDisabled={disableBuying}\n              isConfirming={isConfirming}\n              onApprove={handleApprove}\n              onConfirm={handleConfirm}\n              buttonArrangement={ButtonArrangement.SEQUENTIAL}\n              confirmLabel={t('Buy Instantly')}\n              confirmId=\"lotteryBuyInstant\"\n            />\n            {isApproved && (\n              <Button\n                variant=\"secondary\"\n                mt=\"8px\"\n                endIcon={\n                  <ArrowForwardIcon\n                    ml=\"2px\"\n                    color={disableBuying || isConfirming ? 'disabled' : 'primary'}\n                    height=\"24px\"\n                    width=\"24px\"\n                  />\n                }\n                disabled={disableBuying || isConfirming}\n                onClick={() => {\n                  setBuyingStage(BuyingStage.EDIT)\n                }}\n              >\n                {t('View/Edit Numbers')}\n              </Button>\n            )}\n          </>\n        ) : (\n          <ConnectWalletButton />\n        )}\n\n        <Text mt=\"24px\" fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            '\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.',\n          )}\n        </Text>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default BuyTicketsModal\n","import { Button, useModal, WaitIcon, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLottery } from 'state/lottery/hooks'\nimport { LotteryStatus } from 'config/constants/types'\nimport BuyTicketsModal from './BuyTicketsModal/BuyTicketsModal'\n\ninterface BuyTicketsButtonProps extends ButtonProps {\n  disabled?: boolean\n}\n\nconst BuyTicketsButton: React.FC<BuyTicketsButtonProps> = ({ disabled, ...props }) => {\n  const { t } = useTranslation()\n  const [onPresentBuyTicketsModal] = useModal(<BuyTicketsModal />)\n  const {\n    currentRound: { status },\n  } = useLottery()\n\n  const getBuyButtonText = () => {\n    if (status === LotteryStatus.OPEN) {\n      return t('Buy Tickets')\n    }\n    return (\n      <>\n        <WaitIcon mr=\"4px\" color=\"textDisabled\" /> {t('Not Available')}\n      </>\n    )\n  }\n\n  return (\n    <Button {...props} disabled={disabled} onClick={onPresentBuyTicketsModal}>\n      {getBuyButtonText()}\n    </Button>\n  )\n}\n\nexport default BuyTicketsButton\n","import React, {useState, useEffect} from 'react';\nimport styled from \"styled-components\";\n\nconst ClockContainer = styled.div`\n    .clock {\n        position: relative;\n    }\n    \n    .clock::after {\n        content: '';\n        background-image: url('/images/safemars.png');\n        background-size: contain;\n        background-repeat: no-repeat;\n        width: 11%;\n        height: 11%;\n        position: absolute;\n        left: 48%;\n        top: 45%;\n        border-radius: 50%;\n        filter: drop-shadow(0px 0px 6px #000);\n    }\n    \n    .first-hand {\n        background-image: url('/images/lottery/clock_key_head.png?v=5');\n        background-size: contain;\n        background-repeat: no-repeat;\n        width: 11%;\n        height: 100%;\n        position: absolute;\n        left: 45%;\n        top: 50%;\n        transform-origin: top center;\n    }\n    \n    .second-hand {\n        background-image: url('/images/lottery/clock_key_body.png?v=5');\n        background-size: contain;\n        background-repeat: no-repeat;\n        width: 11%;\n        height: 100%;\n        position: absolute;\n        left: 45%;\n        top: 50%;\n        transform-origin: top center;\n    }\n`;\n\nconst RoundClock = ({nextEventTime}) => {\n    const [hoursLeft, setHoursLeft] = useState(0);\n     \n    // Calculate hours left until the next event and update state every second.\n    useEffect(() => {\n      let interval; \n      \n      if (typeof nextEventTime === 'number'){\n        const calculateAndSetRemainingHours = () => {\n          const currentUnixTimestampInSeconds = Math.floor(Date.now() / 1000); // Get the current Unix timestamp in seconds.\n          let remainingSecondsUntilNextEvent =  nextEventTime - currentUnixTimestampInSeconds;  \n          if (remainingSecondsUntilNextEvent > 0) {\n            const hoursLeft = remainingSecondsUntilNextEvent / 3600; // Convert the seconds to hours.\n            setHoursLeft(hoursLeft);\n          }\n          else {\n            clearInterval(interval);\n          }\n        };\n          \n        calculateAndSetRemainingHours();\n        interval = setInterval(() => { \n          calculateAndSetRemainingHours() \n        }, 1000);\n      }\n      return () => clearInterval(interval);\n    }, [nextEventTime]);\n\n  const position = -hoursLeft * 15;\n  const first = position;\n  const second = position + 180;\n     \n  return(\n    <>\n      <ClockContainer>\n        <div className=\"play-details\">\n          <div className=\"analong-clock-container\">\n            <div className=\"clock\">\n              <img src=\"/images/lottery/clock_background.png?v=5\" alt=\"\"/>\n              <div \n                className=\"first-hand\" \n                style = {{transform: 'rotate('+ first +'deg)'}}/> \n              <div \n                className=\"second-hand\" \n                style = {{transform: 'rotate('+ second +'deg)'}}/> \n            </div>\n          </div>\n        </div>  \n      </ClockContainer>       \n    </>\n  );\n};\n\nexport default RoundClock;\n","import styled, { keyframes } from 'styled-components'\nimport { Box, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { TicketPurchaseCard } from '../svgs'\nimport BuyTicketsButton from './BuyTicketsButton'\nimport Spinner from '../../Swap/Spinner'\nimport Image from 'next/image';\nimport useGetNextLotteryEvent from '../hooks/useGetNextLotteryEvent'\nimport RoundClock from './RoundClock';\n\nconst textBox: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  textAlign: 'center',\n  backgroundColor: 'rgba(100, 100, 100, 0.3)',\n  borderRadius: '25px',\n  border: '1px solid lightgray',\n  padding: '5px',\n  margin: '12px',\n};\n\nconst floatingStarsLeft = keyframes`\n  from {\n    transform: translate(0,  0px);\n  }\n  50% {\n    transform: translate(10px, 10px);\n  }\n  to {\n    transform: translate(0, -0px);\n  }  \n`\n\nconst floatingStarsRight = keyframes`\n  from {\n    transform: translate(0,  0px);\n  }\n  50% {\n    transform: translate(-10px, 10px);\n  }\n  to {\n    transform: translate(0, -0px);\n  }  \n`\n\nconst floatingTicketLeft = keyframes`\n  from {\n    transform: translate(0,  0px);\n  }\n  50% {\n    transform: translate(-10px, 15px);\n  }\n  to {\n    transform: translate(0, -0px);\n  }  \n`\n\nconst floatingTicketRight = keyframes`\n  from {\n    transform: translate(0,  0px);\n  }\n  50% {\n    transform: translate(10px, 15px);\n  }\n  to {\n    transform: translate(0, -0px);\n  }  \n`\n\nconst mainTicketAnimation = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(6deg);\n  }\n  to {\n    transform: rotate(0deg);\n  }  \n`\n\nconst TicketContainer = styled(Flex)`\n  animation: ${mainTicketAnimation} 3s ease-in-out infinite;\n`\n\nconst PrizeTotalBalance = styled(Balance)`\n  background: ${({ theme }) => theme.colors.gradients.gold};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`\n\nconst StyledBuyTicketButton = styled(BuyTicketsButton)<{ disabled: boolean }>`\n  background: ${({ theme, disabled }) =>\n    disabled ? theme.colors.disabled : 'linear-gradient(180deg, #3675D9 0%, #153a7a 100%)'};\n  width: 200px;\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 240px;\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  z-index: 1;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) rotate(-4deg);\n`\n\nconst TicketSvgWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: rotate(-4deg);\n`\n\nconst Decorations = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: url(/images/decorations/bg-star.svg);\n  background-repeat: no-repeat;\n  background-position: center 0;\n`\n\nconst StarsDecorations = styled(Box)`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n\n  & img {\n    position: absolute;\n  }\n\n  & :nth-child(1) {\n    animation: ${floatingStarsLeft} 3s ease-in-out infinite;\n    animation-delay: 0.25s;\n  }\n  & :nth-child(2) {\n    animation: ${floatingStarsLeft} 3.5s ease-in-out infinite;\n    animation-delay: 0.5s;\n  }\n  & :nth-child(3) {\n    animation: ${floatingStarsRight} 4s ease-in-out infinite;\n    animation-delay: 0.75s;\n  }\n  & :nth-child(4) {\n    animation: ${floatingTicketLeft} 6s ease-in-out infinite;\n    animation-delay: 0.2s;\n  }\n  & :nth-child(5) {\n    animation: ${floatingTicketRight} 6s ease-in-out infinite;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & :nth-child(1) {\n      left: 3%;\n      top: 42%;\n    }\n    & :nth-child(2) {\n      left: 9%;\n      top: 23%;\n    }\n    & :nth-child(3) {\n      right: 2%;\n      top: 24%;\n    }\n    & :nth-child(4) {\n      left: 8%;\n      top: 67%;\n    }\n    & :nth-child(5) {\n      right: 8%;\n      top: 67%;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    & :nth-child(1) {\n      left: 10%;\n      top: 42%;\n    }\n    & :nth-child(2) {\n      left: 17%;\n      top: 23%;\n    }\n    & :nth-child(3) {\n      right: 10%;\n      top: 24%;\n    }\n    & :nth-child(4) {\n      left: 17%;\n      top: 67%;\n    }\n    & :nth-child(5) {\n      right: 17%;\n      top: 67%;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    & :nth-child(1) {\n      left: 19%;\n      top: 42%;\n    }\n    & :nth-child(2) {\n      left: 25%;\n      top: 23%;\n    }\n    & :nth-child(3) {\n      right: 19%;\n      top: 24%;\n    }\n    & :nth-child(4) {\n      left: 24%;\n      top: 67%;\n    }\n    & :nth-child(5) {\n      right: 24%;\n      top: 67%;\n    }\n  }\n`\n\nconst Hero = () => {\n  const { t } = useTranslation()\n  const {\n    currentRound: { amountCollectedInXfn, status, endTime },\n    isTransitioning,\n  } = useLottery()\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const prizeInBusd = amountCollectedInXfn.times(cakePriceBusd)\n  const prizeTotal = getBalanceNumber(prizeInBusd, 9)\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning  \n  const endTimeAsInt = parseInt(endTime, 10)\n  const { nextEventTime, postCountdownText, preCountdownText } = useGetNextLotteryEvent(endTimeAsInt, status)\n\n  const getHeroHeading = () => {\n    if (status === LotteryStatus.OPEN) {\n      return (\n        <>\n          <div style={{ marginBottom: '25px' }}>\n            <div style={textBox}>\n              <div style={{ marginLeft: '75px', marginRight: '75px' }}>\n                {prizeInBusd.isNaN() ? (\n                  <Skeleton my=\"7px\" height={60} width={190} />\n                ) : (\n                  <PrizeTotalBalance fontSize=\"64px\" bold prefix=\"$\" value={prizeTotal} mb=\"8px\" decimals={0} />\n                )}\n                <Heading mb=\"32px\" scale=\"lg\" color=\"#ffffff\">\n                  {t('in prizes!')}\n                </Heading>\n              </div>\n            </div>\n          </div>\n        </>\n      )\n    }\n    return (\n      <Heading mb=\"24px\" scale=\"xl\" color=\"#ffffff\">\n        {t('Xfortune closed')}\n      </Heading>\n    )\n  }\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n      <Decorations />\n      <StarsDecorations display={['none', 'none', 'block']}>\n        <img src=\"/images/home/lunar-bunny/logo.gif?v=2\" width=\"0px\" height=\"0px\" />\n        <img src=\"/images/home/lunar-bunny/pulse-safemars.png?v=2\" width=\"0px\" height=\"0px\" />\n        <img src=\"/images/home/lunar-bunny/logo.gif?v=2\" width=\"0px\" height=\"0px\" />\n        <img src=\"/images/home/lunar-bunny/logo.gif?v=2\" width=\"144px\" height=\"144px\" />\n        <img src=\"/images/home/lunar-bunny/pulse-safemars.png?v=2\" width=\"109px\" height=\"109px\" />\n      </StarsDecorations>\n      <div style={{ marginBottom: '25px', width: 'min(90%, 640px)' }}>\n        <div style={textBox}>\n          <Heading m=\"8px\" scale=\"xl\" color=\"#ffffff\" id=\"lottery-hero-title\">\n            {t('Win Big With Xfortune')}\n          </Heading>\n        </div>\n        <div style={{ margin: '0 auto', width: 'min(90%, 640px)' }}>\n          <RoundClock nextEventTime={nextEventTime} />\n        </div> \n      </div>\n      {getHeroHeading()}\n      <TicketContainer\n        position=\"relative\"\n        width={['240px', '288px']}\n        height={['94px', '113px']}\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        style={{ marginBottom: '50px' }}\n      >\n        <ButtonWrapper style={{ filter: 'drop-shadow(5px 5px 8px #222)' }}>\n          <StyledBuyTicketButton disabled={ticketBuyIsDisabled} />\n        </ButtonWrapper>\n        <TicketSvgWrapper>\n           <img src=\"/images/lottery/xfuzion_ticket.png?v=2\" width=\"480px\" height=\"240px\" style={{ filter: 'drop-shadow(5px 5px 8px #222)' }} />\n        </TicketSvgWrapper>\n      </TicketContainer>\n    </Flex>\n  )\n}\n\nexport default Hero\n","import BigNumber from 'bignumber.js'\nimport { BigNumber as EthersBigNumber } from '@ethersproject/bignumber'\nimport { LotteryStatus, LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { LotteryUserGraphEntity, LotteryRoundGraphEntity } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\nimport { NUM_ROUNDS_TO_CHECK_FOR_REWARDS } from 'config/constants/lottery'\nimport { getLotteryV2Address } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { fetchUserTicketsForMultipleRounds } from './getUserTicketsData'\nimport { MAX_LOTTERIES_REQUEST_SIZE } from './getLotteriesData'\n\ninterface RoundDataAndUserTickets {\n  roundId: string\n  userTickets: LotteryTicket[]\n  finalNumber: string\n}\n\nconst lotteryAddress = getLotteryV2Address()\n\nconst fetchCakeRewardsForTickets = async (\n  winningTickets: LotteryTicket[],\n): Promise<{ ticketsWithUnclaimedRewards: LotteryTicket[]; cakeTotal: BigNumber }> => {\n  const calls = winningTickets.map((winningTicket) => {\n    const { roundId, id, rewardBracket } = winningTicket\n    return {\n      name: 'viewRewardsForTicketId',\n      address: lotteryAddress,\n      params: [roundId, id, rewardBracket],\n    }\n  })\n\n  try {\n    const cakeRewards = await multicallv2({ abi: lotteryV2Abi, calls })\n\n    const cakeTotal = cakeRewards.reduce((accum: BigNumber, cakeReward: EthersBigNumber[]) => {\n      return accum.plus(new BigNumber(cakeReward[0].toString()))\n    }, BIG_ZERO)\n\n    const ticketsWithUnclaimedRewards = winningTickets.map((winningTicket, index) => {\n      return { ...winningTicket, cakeReward: cakeRewards[index] }\n    })\n    return { ticketsWithUnclaimedRewards, cakeTotal }\n  } catch (error) {\n    console.error(error)\n    return { ticketsWithUnclaimedRewards: null, cakeTotal: null }\n  }\n}\n\nconst getRewardBracketByNumber = (ticketNumber: string, finalNumber: string): number => {\n  // Winning numbers are evaluated right-to-left in the smart contract, so we reverse their order for validation here:\n  // i.e. '1123456' should be evaluated as '6543211'\n  const ticketNumAsArray = ticketNumber.split('').reverse()\n  const winningNumsAsArray = finalNumber.split('').reverse()\n  const matchingNumbers = []\n\n  // The number at index 6 in all tickets is 1 and will always match, so finish at index 5\n  for (let index = 0; index < winningNumsAsArray.length - 1; index++) {\n    if (ticketNumAsArray[index] !== winningNumsAsArray[index]) {\n      break\n    }\n    matchingNumbers.push(ticketNumAsArray[index])\n  }\n\n  // Reward brackets refer to indexes, 0 = 1 match, 5 = 6 matches. Deduct 1 from matchingNumbers' length to get the reward bracket\n  const rewardBracket = matchingNumbers.length - 1\n  return rewardBracket\n}\n\nexport const getWinningTickets = async (\n  roundDataAndUserTickets: RoundDataAndUserTickets,\n): Promise<LotteryTicketClaimData> => {\n  const { roundId, userTickets, finalNumber } = roundDataAndUserTickets\n\n  const ticketsWithRewardBrackets = userTickets.map((ticket) => {\n    return {\n      roundId,\n      id: ticket.id,\n      number: ticket.number,\n      status: ticket.status,\n      rewardBracket: getRewardBracketByNumber(ticket.number, finalNumber),\n    }\n  })\n\n  // A rewardBracket of -1 means no matches. 0 and above means there has been a match\n  const allWinningTickets = ticketsWithRewardBrackets.filter((ticket) => {\n    return ticket.rewardBracket >= 0\n  })\n\n  // If ticket.status is true, the ticket has already been claimed\n  const unclaimedWinningTickets = allWinningTickets.filter((ticket) => {\n    return !ticket.status\n  })\n\n  if (unclaimedWinningTickets.length > 0) {\n    const { ticketsWithUnclaimedRewards, cakeTotal } = await fetchCakeRewardsForTickets(unclaimedWinningTickets)\n    return { ticketsWithUnclaimedRewards, allWinningTickets, cakeTotal, roundId }\n  }\n\n  if (allWinningTickets.length > 0) {\n    return { ticketsWithUnclaimedRewards: null, allWinningTickets, cakeTotal: null, roundId }\n  }\n\n  return null\n}\n\nconst getWinningNumbersForRound = (targetRoundId: string, lotteriesData: LotteryRoundGraphEntity[]) => {\n  const targetRound = lotteriesData.find((pastLottery) => pastLottery.id === targetRoundId)\n  return targetRound?.finalNumber\n}\n\nconst fetchUnclaimedUserRewards = async (\n  account: string,\n  userLotteryData: LotteryUserGraphEntity,\n  lotteriesData: LotteryRoundGraphEntity[],\n  currentLotteryId: string,\n): Promise<LotteryTicketClaimData[]> => {\n  const { rounds } = userLotteryData\n\n  // If there is no user round history - return an empty array\n  if (rounds.length === 0) {\n    return []\n  }\n\n  // If the web3 provider account doesn't equal the userLotteryData account, return an empty array - this is effectively a loading state as the user switches accounts\n  if (userLotteryData.account.toLowerCase() !== account.toLowerCase()) {\n    return []\n  }\n\n  // Filter out rounds without subgraph data (i.e. >100 rounds ago)\n  const roundsInRange = rounds.filter((round) => {\n    const lastCheckableRoundId = parseInt(currentLotteryId, 10) - MAX_LOTTERIES_REQUEST_SIZE\n    const roundId = parseInt(round.lotteryId, 10)\n    return roundId >= lastCheckableRoundId\n  })\n\n  // Filter out non-claimable rounds\n  const claimableRounds = roundsInRange.filter((round) => {\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\n  })\n\n  // Rounds with no tickets claimed OR rounds where a user has over 100 tickets, could have prizes\n  const roundsWithPossibleWinnings = claimableRounds.filter((round) => {\n    return !round.claimed || parseInt(round.totalTickets, 10) > 100\n  })\n\n  // Check the X  most recent rounds, where X is NUM_ROUNDS_TO_CHECK_FOR_REWARDS\n  const roundsToCheck = roundsWithPossibleWinnings.slice(0, NUM_ROUNDS_TO_CHECK_FOR_REWARDS)\n\n  if (roundsToCheck.length > 0) {\n    const idsToCheck = roundsToCheck.map((round) => round.lotteryId)\n    const userTicketData = await fetchUserTicketsForMultipleRounds(idsToCheck, account)\n    const roundsWithTickets = userTicketData.filter((roundData) => roundData?.userTickets?.length > 0)\n\n    const roundDataAndWinningTickets = roundsWithTickets.map((roundData) => {\n      return { ...roundData, finalNumber: getWinningNumbersForRound(roundData.roundId, lotteriesData) }\n    })\n\n    const winningTicketsForPastRounds = await Promise.all(\n      roundDataAndWinningTickets.map((roundData) => getWinningTickets(roundData)),\n    )\n\n    // Filter out null values (returned when no winning tickets found for past round)\n    const roundsWithWinningTickets = winningTicketsForPastRounds.filter(\n      (winningTicketData) => winningTicketData !== null,\n    )\n\n    // Filter to only rounds with unclaimed tickets\n    const roundsWithUnclaimedWinningTickets = roundsWithWinningTickets.filter(\n      (winningTicketData) => winningTicketData.ticketsWithUnclaimedRewards,\n    )\n\n    return roundsWithUnclaimedWinningTickets\n  }\n  // All rounds claimed, return empty array\n  return []\n}\n\nexport default fetchUnclaimedUserRewards\n","import { Svg, SvgProps } from '@pancakeswap/uikit'\n\nconst WhiteBunny: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 27 26\" {...props}>\n      <mask\n        id=\"white-bunny-path-1-outside-1\"\n        maskUnits=\"userSpaceOnUse\"\n        x=\"0.5\"\n        y=\"-0.0263672\"\n        width=\"26\"\n        height=\"26\"\n        fill=\"black\"\n      >\n        <rect fill=\"white\" x=\"0.5\" y=\"-0.0263672\" width=\"26\" height=\"26\" />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M6.909 3.56941C7.03125 1.79519 8.76206 0.588231 10.4692 1.08677C11.9461 1.51808 12.7937 3.06497 12.3624 4.54184L11.1683 8.63073C11.9225 8.53996 12.7022 8.49237 13.5 8.49237C14.6339 8.49237 15.731 8.58848 16.7708 8.76808L18.74 2.99564C19.2367 1.53947 20.8199 0.761724 22.2761 1.25849C23.9593 1.83269 24.6807 3.81559 23.7601 5.3372L20.9057 10.0551C23.7031 11.3976 25.5 13.4834 25.5 15.8257L25.5 15.8267V17.6934C25.5 21.7435 20.1274 25.0267 13.5 25.0267C6.87258 25.0267 1.5 21.7435 1.5 17.6934V15.8267V15.8257C1.5 13.379 3.46066 11.2122 6.47417 9.88004L6.909 3.56941Z\"\n        />\n      </mask>\n      <path\n        d=\"M10.4692 1.08677L10.7142 0.247673V0.247673L10.4692 1.08677ZM6.909 3.56941L7.78108 3.6295V3.62949L6.909 3.56941ZM12.3624 4.54184L13.2015 4.78689V4.78689L12.3624 4.54184ZM11.1683 8.63073L10.3292 8.38568L9.95792 9.65684L11.2727 9.49862L11.1683 8.63073ZM16.7708 8.76808L16.622 9.62947L17.3572 9.75647L17.5981 9.05032L16.7708 8.76808ZM18.74 2.99564L19.5673 3.27788V3.27788L18.74 2.99564ZM22.2761 1.25849L22.5583 0.431153V0.431153L22.2761 1.25849ZM23.7601 5.3372L23.0122 4.88469V4.88469L23.7601 5.3372ZM20.9057 10.0551L20.1578 9.60256L19.6593 10.4265L20.5275 10.8432L20.9057 10.0551ZM25.5 15.8257H24.6258L24.6259 15.8274L25.5 15.8257ZM25.5 15.8267H26.3742L26.3742 15.8251L25.5 15.8267ZM6.47417 9.88004L6.82762 10.6796L7.31 10.4663L7.34626 9.94013L6.47417 9.88004ZM10.7142 0.247673C8.47144 -0.407305 6.19752 1.17838 6.03691 3.50932L7.78108 3.62949C7.86497 2.412 9.05268 1.58377 10.2241 1.92587L10.7142 0.247673ZM13.2015 4.78689C13.7681 2.84659 12.6545 0.814314 10.7142 0.247673L10.2241 1.92587C11.2376 2.22184 11.8192 3.28334 11.5233 4.2968L13.2015 4.78689ZM12.0074 8.87578L13.2015 4.78689L11.5233 4.2968L10.3292 8.38568L12.0074 8.87578ZM13.5 7.61822C12.6675 7.61822 11.853 7.66787 11.0638 7.76284L11.2727 9.49862C11.9921 9.41204 12.7369 9.36652 13.5 9.36652V7.61822ZM16.9195 7.90668C15.8299 7.71847 14.683 7.61822 13.5 7.61822V9.36652C14.5847 9.36652 15.632 9.45848 16.622 9.62947L16.9195 7.90668ZM17.5981 9.05032L19.5673 3.27788L17.9127 2.7134L15.9434 8.48584L17.5981 9.05032ZM19.5673 3.27788C19.9082 2.27864 20.9946 1.74493 21.9938 2.08582L22.5583 0.431153C20.6452 -0.221485 18.5653 0.800311 17.9127 2.7134L19.5673 3.27788ZM21.9938 2.08582C23.1489 2.47985 23.644 3.84054 23.0122 4.88469L24.5081 5.7897C25.7175 3.79064 24.7697 1.18554 22.5583 0.431153L21.9938 2.08582ZM23.0122 4.88469L20.1578 9.60256L21.6536 10.5076L24.5081 5.7897L23.0122 4.88469ZM26.3741 15.8257C26.3741 12.9967 24.2198 10.676 21.284 9.26698L20.5275 10.8432C23.1864 12.1193 24.6259 13.9701 24.6259 15.8257H26.3741ZM26.3742 15.8251L26.3741 15.8241L24.6259 15.8274L24.6259 15.8284L26.3742 15.8251ZM26.3742 17.6934V15.8267H24.6259V17.6934H26.3742ZM13.5 25.9009C16.9478 25.9009 20.1111 25.0486 22.4411 23.6247C24.7561 22.21 26.3742 20.1382 26.3742 17.6934H24.6259C24.6259 19.2987 23.5576 20.8935 21.5295 22.1329C19.5163 23.3632 16.6797 24.1526 13.5 24.1526V25.9009ZM0.62585 17.6934C0.62585 20.1382 2.24387 22.21 4.55889 23.6247C6.88892 25.0486 10.0523 25.9009 13.5 25.9009V24.1526C10.3203 24.1526 7.48367 23.3632 5.47054 22.1329C3.44242 20.8935 2.37415 19.2987 2.37415 17.6934H0.62585ZM0.62585 15.8267V17.6934H2.37415V15.8267H0.62585ZM0.62585 15.8257V15.8267H2.37415V15.8257H0.62585ZM6.12073 9.08053C2.97211 10.4725 0.62585 12.8707 0.62585 15.8257H2.37415C2.37415 13.8874 3.94921 11.952 6.82762 10.6796L6.12073 9.08053ZM6.03691 3.50932L5.60209 9.81995L7.34626 9.94013L7.78108 3.6295L6.03691 3.50932Z\"\n        fill=\"#08060B\"\n        mask=\"url(#path-1-outside-1)\"\n      />\n      <path\n        d=\"M25.5 17.6933C25.5 21.7434 20.1274 25.0267 13.5 25.0267C6.87258 25.0267 1.5 21.7434 1.5 17.6933V15.8267H25.5V17.6933Z\"\n        fill=\"#F4EEFF\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M6.909 3.56941C7.03125 1.79519 8.76206 0.588231 10.4692 1.08677C11.9461 1.51808 12.7937 3.06497 12.3624 4.54184L11.1683 8.63073C11.9225 8.53996 12.7022 8.49237 13.5 8.49237C14.6339 8.49237 15.731 8.58848 16.7708 8.76808L18.74 2.99564C19.2367 1.53947 20.8199 0.761724 22.2761 1.25849C23.9593 1.83269 24.6807 3.81559 23.7601 5.3372L20.9057 10.0551C23.7031 11.3976 25.5 13.4834 25.5 15.8257C25.5 19.8758 20.1274 23.159 13.5 23.159C6.87258 23.159 1.5 19.8758 1.5 15.8257C1.5 13.379 3.46066 11.2122 6.47417 9.88004L6.909 3.56941Z\"\n        fill=\"white\"\n      />\n      <ellipse cx=\"10.4334\" cy=\"15.292\" rx=\"1.33333\" ry=\"2\" fill=\"#08060B\" />\n      <ellipse cx=\"19.6331\" cy=\"15.292\" rx=\"1.33333\" ry=\"2\" fill=\"#08060B\" />\n    </Svg>\n  )\n}\n\nexport default WhiteBunny\n","import styled from 'styled-components'\nimport { Svg, SvgProps, Text, Flex } from '@pancakeswap/uikit'\n\nexport const PinkBall: React.FC<SvgProps> = (props) => {\n  return (\n    <img src=\"/images/lottery/ball_pink.png\" alt=\"\" width=\"128px\" height=\"128px\"/>\n  )\n}\n\nexport const LilacBall: React.FC<SvgProps> = (props) => {\n  return (\n    <img src=\"/images/lottery/ball_lilac.png\" alt=\"\" width=\"128px\" height=\"128px\"/>\n  )\n}\n\nexport const TealBall: React.FC<SvgProps> = (props) => {\n  return (\n    <img src=\"/images/lottery/ball_teal.png\" alt=\"\" width=\"128px\" height=\"128px\"/>\n  )\n}\n\nexport const AquaBall: React.FC<SvgProps> = (props) => {\n  return (\n    <img src=\"/images/lottery/ball_aqua.png\" alt=\"\" width=\"128px\" height=\"128px\"/>\n  )\n}\n\nexport const GreenBall: React.FC<SvgProps> = (props) => {\n  return (\n    <img src=\"/images/lottery/ball_green.png\" alt=\"\" width=\"128px\" height=\"128px\"/>\n  )\n}\n\nexport const YellowBall: React.FC<SvgProps> = (props) => {\n  return (\n    <img src=\"/images/lottery/ball_yellow.png\" alt=\"\" width=\"128px\" height=\"128px\"/>\n  )\n}\n\nexport const BallTextWrapper = styled.div`\n  top: 45%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  position: absolute;\n`\n\nexport const BallText = styled(Text)<{ rotationTransform?: number }>`\n  color: rgba(255, 255, 255, 0.8);\n  transform: rotate(${({ rotationTransform }) => rotationTransform || 0}deg);\n`\n\nexport type BallColor = 'pink' | 'lilac' | 'teal' | 'aqua' | 'green' | 'yellow'\n\ninterface BallWithNumberProps {\n  color: BallColor\n  number: string\n  size?: string\n  fontSize?: string\n  rotationTransform?: number\n}\n\nconst ballsMap = {\n  pink: PinkBall,\n  lilac: LilacBall,\n  teal: TealBall,\n  aqua: AquaBall,\n  green: GreenBall,\n  yellow: YellowBall,\n}\n\nexport const BallWithNumber: React.FC<BallWithNumberProps> = ({ color, number, size, fontSize, rotationTransform }) => {\n  const BallComponent = ballsMap[color]\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" position=\"relative\" mx=\"2px\">\n      <BallComponent width={size ?? '32px'} height={size ?? '32px'} />\n      <BallTextWrapper>\n        <BallText rotationTransform={rotationTransform} bold fontSize={fontSize ?? '16px'}>\n          {number}\n        </BallText>\n      </BallTextWrapper>\n    </Flex>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { Flex, FlexProps } from '@pancakeswap/uikit'\nimport random from 'lodash/random'\nimport uniqueId from 'lodash/uniqueId'\nimport { parseRetrievedNumber } from '../helpers'\nimport { BallWithNumber } from '../svgs'\nimport { BallColor } from '../svgs/Balls'\n\ninterface WinningNumbersProps extends FlexProps {\n  number: string\n  size?: string\n  fontSize?: string\n  rotateText?: boolean\n}\n\nconst WinningNumbers: React.FC<WinningNumbersProps> = ({\n  number,\n  size = '32px',\n  fontSize = '16px',\n  rotateText,\n  ...containerProps\n}) => {\n  const [rotationValues, setRotationValues] = useState([])\n  const reversedNumber = parseRetrievedNumber(number)\n  const numAsArray = reversedNumber.split('')\n  const colors: BallColor[] = ['pink', 'lilac', 'teal', 'aqua', 'green', 'yellow']\n\n  useEffect(() => {\n    if (rotateText && numAsArray && rotationValues.length === 0) {\n      setRotationValues(numAsArray.map(() => random(-30, 30)))\n    }\n  }, [rotateText, numAsArray, rotationValues])\n\n  return (\n    <Flex justifyContent=\"space-between\" {...containerProps}>\n      {numAsArray.map((num, index) => {\n        return (\n          <BallWithNumber\n            key={uniqueId()}\n            rotationTransform={rotateText && rotationValues[index]}\n            size={size}\n            fontSize={fontSize}\n            color={colors[index]}\n            number={num}\n          />\n        )\n      })}\n    </Flex>\n  )\n}\n\nexport default WinningNumbers\n","import { LotteryTicket } from 'config/constants/types'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport _uniqueId from 'lodash/uniqueId'\nimport { parseRetrievedNumber } from '../helpers'\n\nconst StyledNumberWrapper = styled(Flex)`\n  position: relative;\n  padding: 4px 16px;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.default};\n  background: ${({ theme }) => theme.colors.background};\n  justify-content: space-between;\n`\n\nconst RewardHighlighter = styled.div<{ numberMatches: number }>`\n  z-index: 1;\n  width: ${({ numberMatches }) => `${numberMatches < 6 ? numberMatches * 17.66 : 100}%`};\n  height: 34px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  top: 0;\n  left: 0;\n  position: absolute;\n  border: 2px ${({ theme }) => theme.colors.primary} solid;\n`\n\ninterface TicketNumberProps extends LotteryTicket {\n  localId?: number\n  rewardBracket?: number\n}\n\nconst TicketNumber: React.FC<TicketNumberProps> = ({ localId, id, number, rewardBracket }) => {\n  const { t } = useTranslation()\n  const reversedNumber = parseRetrievedNumber(number)\n  const numberAsArray = reversedNumber.split('')\n  const numberMatches = rewardBracket + 1\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"12px\">\n      <Flex justifyContent=\"space-between\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          #{localId || id}\n        </Text>\n        {rewardBracket >= 0 && (\n          <Text fontSize=\"12px\">\n            {t('Matched first')} {numberMatches}\n          </Text>\n        )}\n      </Flex>\n      <StyledNumberWrapper>\n        {rewardBracket >= 0 && <RewardHighlighter numberMatches={numberMatches} />}\n        {numberAsArray.map((digit) => (\n          <Text key={`${localId || id}-${digit}-${_uniqueId()}`} fontSize=\"16px\">\n            {digit}\n          </Text>\n        ))}\n      </StyledNumberWrapper>\n    </Flex>\n  )\n}\n\nexport default TicketNumber\n","import { useState } from 'react'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { callWithEstimateGas } from 'utils/calls'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserLotteries } from 'state/lottery'\nimport { useGasPrice } from 'state/user/hooks'\nimport { useAppDispatch } from 'state'\nimport Balance from 'components/Balance'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport useCatchTxError from 'hooks/useCatchTxError'\nimport { useERC20, useLotteryV2Contract } from 'hooks/useContract'\nimport { pulseChainTokens } from '@pancakeswap/tokens'\nimport { BURN_ADDRESS } from 'config/constants'\n\ninterface ClaimInnerProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onSuccess?: () => void\n}\n\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { maxNumberTicketsPerBuyOrClaim, currentLotteryId } = useLottery()\n  const gasPrice = useGasPrice()\n  const { toastSuccess } = useToast()\n  const { fetchWithCatchTxError, loading: pendingTx } = useCatchTxError()\n  const { fetchWithCatchTxError: fetchWithCatchTxErrorBurn, loading: pendingBurnTx } = useCatchTxError()\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(\n    Math.ceil(\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\n    ),\n  )\n  const lotteryContract = useLotteryV2Contract()\n  const xfnContract = useERC20(pulseChainTokens.xfn.address)\n  const activeClaimData = roundsToClaim[activeClaimIndex]\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const cakeReward = activeClaimData.cakeTotal\n  const dollarReward = cakeReward.times(cakePriceBusd)\n  const rewardAsBalance = getBalanceAmount(cakeReward, 9).toNumber()\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward,9).toNumber()\n\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.id\n    })\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.rewardBracket\n    })\n    return { lotteryId, ticketIds, brackets }\n  }\n\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\n    activeClaimData.ticketsWithUnclaimedRewards,\n    activeClaimData.roundId,\n  )\n\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\n\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1)\n      dispatch(fetchUserLotteries({ account, currentLotteryId }))\n    } else {\n      onSuccess()\n    }\n  }\n\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\n    const requests = []\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\n\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\n    }\n\n    return requests\n  }\n\n  const handleClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    const receipt = await fetchWithCatchTxError(() => {\n      return callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets], {\n        gasPrice,\n      })\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        t('Prizes Collected!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your DEP prizes for round %lotteryId% have been sent to your wallet', { lotteryId })}\n        </ToastDescriptionWithTx>,\n      )\n      handleProgressToNextClaim()\n    }\n  }\n\n  const handleBurn = async () => {\n    const { lotteryId } = claimTicketsCallData\n    const receipt = await fetchWithCatchTxErrorBurn(() => {\n      return callWithEstimateGas(xfnContract, 'transfer', [BURN_ADDRESS, cakeReward.toString()], {\n        gasPrice,\n      })\n    })\n    if (receipt?.status) {\n      toastSuccess(\n        t('You have burnt'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your DEP prizes for round %lotteryId% have been burnt to DEAD address', { lotteryId })}\n        </ToastDescriptionWithTx>,\n      )\n      handleProgressToNextClaim()\n    }\n  }\n\n  const handleBatchClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\n    const transactionsToFire = ticketBatches.length\n    const receipts = []\n    // eslint-disable-next-line no-restricted-syntax\n    for (const ticketBatch of ticketBatches) {\n      /* eslint-disable no-await-in-loop */\n      const receipt = await fetchWithCatchTxError(() => {\n        return callWithEstimateGas(\n          lotteryContract,\n          'claimTickets',\n          [lotteryId, ticketBatch.ticketIds, ticketBatch.brackets],\n          { gasPrice },\n        )\n      })\n      if (receipt?.status) {\n        // One transaction within batch has succeeded\n        receipts.push(receipt)\n        setPendingBatchClaims(transactionsToFire - receipts.length)\n\n        // More transactions are to be done within the batch. Issue toast to give user feedback.\n        if (receipts.length !== transactionsToFire) {\n          toastSuccess(\n            t('Prizes Collected!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t(\n                'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transaction',\n                {\n                  claimNum: receipts.length,\n                  claimTotal: transactionsToFire,\n                  lotteryId,\n                },\n              )}\n            </ToastDescriptionWithTx>,\n          )\n        }\n      } else {\n        break\n      }\n    }\n\n    // Batch is finished\n    if (receipts.length === transactionsToFire) {\n      toastSuccess(\n        t('Prizes Collected!'),\n        t('Your DEP prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\n      )\n      handleProgressToNextClaim()\n    }\n  }\n\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\n          {t('You won')}\n        </Text>\n        <Flex\n          alignItems={['flex-start', null, 'center']}\n          justifyContent={['flex-start', null, 'space-between']}\n          flexDirection={['column', null, 'row']}\n        >\n          <Balance\n            textAlign={['center', null, 'left']}\n            lineHeight=\"1.1\"\n            value={rewardAsBalance}\n            fontSize=\"44px\"\n            bold\n            color=\"secondary\"\n            unit=\" XFNs!\"\n          />\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\n        </Flex>\n        <Balance\n          mt={['12px', null, '0']}\n          textAlign={['center', null, 'left']}\n          value={dollarRewardAsBalance}\n          fontSize=\"12px\"\n          color=\"textSubtle\"\n          unit=\" USD\"\n          prefix=\"~\"\n        />\n      </Flex>\n\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\n          {t('Round')} #{activeClaimData.roundId}\n        </Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\" style={{gap:\"10px\"}}>\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          mt=\"20px\"\n          width=\"100%\"\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\n        >\n          {pendingTx ? t('Claiming') : t('Claim')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\n        </Button>\n        <Button\n          isLoading={pendingBurnTx}\n          endIcon={pendingBurnTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          mt=\"20px\"\n          width=\"100%\"\n          onClick={() => (handleBurn())}\n        >\n          {pendingBurnTx ? t('Burning') : t('Burn')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ClaimInnerContainer\n","import { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Heading, ModalContainer, ModalHeader, ModalTitle, ModalBody, ModalCloseButton } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { useTranslation } from 'contexts/Localization'\nimport delay from 'lodash/delay'\nimport confetti from 'canvas-confetti'\nimport { LotteryTicketClaimData } from 'config/constants/types'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserLotteries } from 'state/lottery'\nimport ClaimPrizesInner from './ClaimPrizesInner'\n\nconst StyledModal = styled(ModalContainer)`\n  position: relative;\n  overflow: visible;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 380px;\n  }\n`\n\nconst StyledModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  border-top-right-radius: 32px;\n  border-top-left-radius: 32px;\n`\n\nconst FoxDecoration = styled.div`\n  position: absolute;\n  top: -155px; // line up fox at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst showConfetti = () => {\n  confetti({\n    particleCount: 200,\n    startVelocity: 30,\n    gravity: 0.5,\n    spread: 350,\n    origin: {\n      x: 0.5,\n      y: 0.3,\n    },\n  })\n}\n\ninterface ClaimPrizesModalModalProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onDismiss?: () => void\n}\n\nconst ClaimPrizesModal: React.FC<ClaimPrizesModalModalProps> = ({ onDismiss, roundsToClaim }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { currentLotteryId } = useLottery()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    delay(showConfetti, 100)\n  }, [])\n\n  return (\n    <StyledModal $minWidth=\"280px\" >\n      <FoxDecoration>\n        <img src=\"/images/lottery/fox.png\" alt=\"fox decoration\" height=\"153px\" width=\"168px\" />\n      </FoxDecoration>\n      <StyledModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </StyledModalHeader>\n      <ModalBody p=\"24px\">\n        <ClaimPrizesInner\n          onSuccess={() => {\n            dispatch(fetchUserLotteries({ account, currentLotteryId }))\n            onDismiss?.()\n          }}\n          roundsToClaim={roundsToClaim}\n        />\n      </ModalBody>\n    </StyledModal>\n    \n  )\n}\n\nexport default ClaimPrizesModal\n","import { useEffect, useState } from 'react'\nimport {\n  Box,\n  Text,\n  Flex,\n  Button,\n  Skeleton,\n  Ticket,\n  PresentWonIcon,\n  TooltipText,\n  InfoIcon,\n  useTooltip,\n  useModal,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { getWinningTickets } from 'state/lottery/fetchUnclaimedUserRewards'\nimport { fetchUserTicketsForOneRound } from 'state/lottery/getUserTicketsData'\nimport { LotteryRound } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport orderBy from 'lodash/orderBy'\nimport WinningNumbers from '../WinningNumbers'\nimport { processLotteryResponse } from '../../helpers'\nimport TicketNumber from '../TicketNumber'\nimport ClaimPrizesModal from '../ClaimPrizesModal'\n\nconst TopBox = styled(Flex)`\n  flex-direction: column;\n  margin: -24px;\n  padding: 24px;\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst ScrollBox = styled(Box)`\n  margin-right: -20px;\n  padding-right: 24px;\n  max-height: 300px;\n  overflow-y: scroll;\n  margin-top: 24px;\n`\n\nconst TicketSkeleton = () => {\n  return (\n    <>\n      <Skeleton width=\"32px\" height=\"12px\" mt=\"2px\" mb=\"4px\" />\n      <Skeleton width=\"100%\" height=\"34px\" mb=\"12px\" />\n    </>\n  )\n}\n\nconst PreviousRoundTicketsInner: React.FC<{ roundId: string }> = ({ roundId }) => {\n  const [lotteryInfo, setLotteryInfo] = useState<LotteryRound>(null)\n  const [allUserTickets, setAllUserTickets] = useState<LotteryTicket[]>(null)\n  const [userWinningTickets, setUserWinningTickets] = useState<{\n    allWinningTickets: LotteryTicket[]\n    ticketsWithUnclaimedRewards: LotteryTicket[]\n    isFetched: boolean\n    claimData: LotteryTicketClaimData\n  }>({ allWinningTickets: null, ticketsWithUnclaimedRewards: null, isFetched: false, claimData: null })\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { account } = useWeb3React()\n  const [onPresentClaimModal] = useModal(<ClaimPrizesModal roundsToClaim={[userWinningTickets.claimData]} />, false)\n\n  const TooltipComponent = () => (\n    <>\n      <Text mb=\"16px\">\n        {t('Tickets must match the winning number in the exact same order, starting from the first digit.')}\n      </Text>\n      <Text mb=\"16px\">{t('If the winning number is “123456”:')}</Text>\n      <Text mb=\"4px\">{t('“120000” matches the first 2 digits.')}</Text>\n      <Text>\n        {t('“000006” matches the last digit, but since the first five digits are wrong, it doesn’t win any prizes.')}\n      </Text>\n    </>\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10],\n  })\n\n  useEffect(() => {\n    const addWinningTicketInfoToAllTickets = (\n      _allTickets: LotteryTicket[],\n      _allWinningTickets: LotteryTicket[],\n    ): LotteryTicket[] => {\n      const allTicketsWithWinningTickets = _allTickets.map((ticket) => {\n        const winningTicketEquivalent = _allWinningTickets.find((winningTicket) => winningTicket.id === ticket.id)\n        if (winningTicketEquivalent) {\n          return winningTicketEquivalent\n        }\n        return ticket\n      })\n      return allTicketsWithWinningTickets\n    }\n\n    const sortTicketsByWinningBracket = (tickets) => {\n      return orderBy(tickets, (ticket) => (ticket.rewardBracket === undefined ? 0 : ticket.rewardBracket + 1), 'desc')\n    }\n\n    const fetchData = async () => {\n      const [userTickets, lotteryData] = await Promise.all([\n        fetchUserTicketsForOneRound(account, roundId),\n        fetchLottery(roundId),\n      ])\n      const processedLotteryData = processLotteryResponse(lotteryData)\n      const winningTickets = await getWinningTickets({\n        roundId,\n        userTickets,\n        finalNumber: processedLotteryData.finalNumber.toString(),\n      })\n\n      setUserWinningTickets({\n        isFetched: true,\n        allWinningTickets: winningTickets?.allWinningTickets,\n        ticketsWithUnclaimedRewards: winningTickets?.ticketsWithUnclaimedRewards,\n        claimData: winningTickets,\n      })\n      setLotteryInfo(processedLotteryData)\n\n      // If the user has some winning tickets - modify the userTickets response to include that data\n      if (winningTickets?.allWinningTickets) {\n        const allTicketsWithWinningTicketInfo = addWinningTicketInfoToAllTickets(\n          userTickets,\n          winningTickets.allWinningTickets,\n        )\n        const ticketsSortedByWinners = sortTicketsByWinningBracket(allTicketsWithWinningTicketInfo)\n        setAllUserTickets(ticketsSortedByWinners)\n      } else {\n        setAllUserTickets(userTickets)\n      }\n    }\n\n    fetchData()\n  }, [roundId, account])\n\n  const getFooter = () => {\n    if (userWinningTickets?.ticketsWithUnclaimedRewards?.length > 0) {\n      return (\n        <Button onClick={onPresentClaimModal} mt=\"24px\" width=\"100%\">\n          {t('Collect Prizes')}\n        </Button>\n      )\n    }\n    if (!userWinningTickets.allWinningTickets) {\n      return (\n        <div ref={targetRef}>\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"20px\">\n            <InfoIcon height=\"20px\" width=\"20px\" color=\"textSubtle\" mr=\"8px\" />\n            <TooltipText color=\"textSubtle\">{t(\"Why didn't I win?\")}</TooltipText>\n          </Flex>\n        </div>\n      )\n    }\n    return null\n  }\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TopBox>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" mb=\"4px\">\n          {t('Winning number')}\n        </Text>\n        {lotteryInfo?.finalNumber ? (\n          <WinningNumbers number={lotteryInfo.finalNumber.toString()} />\n        ) : (\n          <Skeleton width=\"230px\" height=\"34px\" />\n        )}\n      </TopBox>\n      <ScrollBox>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" my=\"16px\">\n          {t('Your tickets')}\n        </Text>\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Flex>\n            <Ticket width=\"24px\" height=\"24px\" mr=\"8px\" />\n            <Text bold color=\"text\">\n              {t('Total tickets')}:\n            </Text>\n          </Flex>\n          <Text bold color=\"text\">\n            {allUserTickets ? allUserTickets.length : <Skeleton width=\"56px\" height=\"24px\" />}\n          </Text>\n        </Flex>\n        <Flex mb=\"24px\" justifyContent=\"space-between\">\n          <Flex>\n            <PresentWonIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n            <Text bold color=\"text\">\n              {t('Winning tickets')}:\n            </Text>\n          </Flex>\n          <Text bold color=\"text\">\n            {userWinningTickets.isFetched ? (\n              userWinningTickets?.allWinningTickets?.length || '0'\n            ) : (\n              <Skeleton width=\"40px\" height=\"24px\" />\n            )}\n          </Text>\n        </Flex>\n        {allUserTickets ? (\n          allUserTickets.map((ticket) => {\n            return (\n              <TicketNumber\n                key={ticket.id}\n                id={ticket.id}\n                number={ticket.number}\n                rewardBracket={ticket.rewardBracket}\n                status={ticket.status}\n              />\n            )\n          })\n        ) : (\n          <>\n            <TicketSkeleton />\n            <TicketSkeleton />\n            <TicketSkeleton />\n            <TicketSkeleton />\n          </>\n        )}\n      </ScrollBox>\n      <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} alignItems=\"center\" justifyContent=\"center\">\n        {userWinningTickets.isFetched && getFooter()}\n      </Flex>\n    </>\n  )\n}\n\nexport default PreviousRoundTicketsInner\n","import styled from 'styled-components'\nimport { Flex, Box, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useLottery } from 'state/lottery/hooks'\nimport useTheme from 'hooks/useTheme'\nimport TicketNumber from '../TicketNumber'\nimport BuyTicketsButton from '../BuyTicketsButton'\n\nconst ScrollBox = styled(Box)`\n  max-height: 300px;\n  overflow-y: scroll;\n  margin-left: -24px;\n  margin-right: -24px;\n  padding-left: 24px;\n  padding-right: 20px;\n`\n\nconst CurrentRoundTicketsInner = () => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const {\n    isTransitioning,\n    currentRound: { status, userTickets },\n  } = useLottery()\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" mb=\"16px\">\n          {t('Your tickets')}\n        </Text>\n        <ScrollBox>\n          {userTickets.tickets.map((ticket, index) => {\n            return (\n              <TicketNumber\n                key={ticket.id}\n                localId={index + 1}\n                id={ticket.id}\n                number={ticket.number}\n                status={ticket.status}\n              />\n            )\n          })}\n        </ScrollBox>\n      </Flex>\n      <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} alignItems=\"center\" justifyContent=\"center\">\n        <BuyTicketsButton disabled={ticketBuyIsDisabled} mt=\"24px\" width=\"100%\" />\n      </Flex>\n    </>\n  )\n}\n\nexport default CurrentRoundTicketsInner\n","import styled from 'styled-components'\nimport { Modal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useLottery } from 'state/lottery/hooks'\nimport useTheme from 'hooks/useTheme'\nimport PreviousRoundTicketsInner from './PreviousRoundTicketsInner'\nimport CurrentRoundTicketsInner from './CurrentRoundTicketsInner'\n\nconst StyledModal = styled(Modal)`\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 280px;\n  }\n`\n\ninterface ViewTicketsModalProps {\n  roundId: string\n  roundStatus?: LotteryStatus\n  onDismiss?: () => void\n}\n\nconst ViewTicketsModal: React.FC<ViewTicketsModalProps> = ({ onDismiss, roundId, roundStatus }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { currentLotteryId } = useLottery()\n  const isPreviousRound = roundStatus?.toLowerCase() === LotteryStatus.CLAIMABLE || roundId !== currentLotteryId\n\n  return (\n    <StyledModal\n      title={`${t('Round')} ${roundId}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {isPreviousRound ? <PreviousRoundTicketsInner roundId={roundId} /> : <CurrentRoundTicketsInner />}\n    </StyledModal>\n  )\n}\n\nexport default ViewTicketsModal\n","import BigNumber from 'bignumber.js'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getLanguageCodeFromLS } from 'contexts/Localization/helpers'\n\nconst codeFromStorage = getLanguageCodeFromLS()\n\nconst getNumberForMobile = (number) => {\n  return new Intl.NumberFormat(codeFromStorage, {\n      notation: 'compact',\n      compactDisplay: 'long',\n      maximumSignificantDigits: 2,\n     }).format(number)\n}\n\ninterface RewardBracketDetailProps {\n  cakeAmount: BigNumber\n  rewardBracket?: number\n  numberWinners?: string\n  isBurn?: boolean\n  isHistoricRound?: boolean\n  isLoading?: boolean\n}\n\nconst RewardBracketDetail: React.FC<RewardBracketDetailProps> = ({\n  rewardBracket,\n  cakeAmount,\n  numberWinners,\n  isHistoricRound,\n  isBurn,\n  isLoading,\n}) => {\n  const { t } = useTranslation()\n  const cakePriceBusd = usePriceCakeBusd()\n\n  const getRewardText = () => {\n    const numberMatch = rewardBracket + 1\n    if (isBurn) {\n      return t('Staking')\n    }\n    if (rewardBracket === 5) {\n      return t('Match all %numberMatch%', { numberMatch })\n    }\n    return t('Match first %numberMatch%', { numberMatch })\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      {isLoading ? (\n        <Skeleton mb=\"4px\" mt=\"8px\" height={16} width={80} />\n      ) : (\n        <Text bold color={isBurn ? 'failure' : 'secondary'}>\n          {getRewardText()}\n        </Text>\n      )}\n      <>\n        {isLoading || cakeAmount.isNaN() ? (\n          <Skeleton my=\"4px\" mr=\"10px\" height={20} width={110} />\n        ) : (\n          <Balance fontSize=\"20px\" bold unit=\"B DEP\" value={getBalanceNumber(cakeAmount, 18)} decimals={0} />\n        )}\n        {isLoading || cakeAmount.isNaN() ? (\n          <>\n            <Skeleton mt=\"4px\" mb=\"16px\" height={12} width={70} />\n          </>\n        ) : (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            prefix=\"~$\"\n            value={getBalanceNumber(cakeAmount.times(cakePriceBusd), 9)}\n            decimals={0}\n          />\n        )}\n        {isHistoricRound && cakeAmount && (\n          <>\n            {numberWinners !== '0' && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                {getFullDisplayBalance(cakeAmount.div(parseInt(numberWinners, 10)), 18, 2)}B DEP {t('each')}\n              </Text>\n            )}\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {numberWinners} {t('Winning Tickets')}\n            </Text>\n          </>\n        )}\n      </>\n    </Flex>\n  )\n}\n\nexport default RewardBracketDetail\n","import { useState, useEffect } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound } from 'state/types'\nimport RewardBracketDetail from './RewardBracketDetail'\n\nconst Wrapper = styled(Flex)`\n  width: 100%;\n  flex-direction: column;\n`\n\nconst RewardsInner = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n  row-gap: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`\n\ninterface RewardMatchesProps {\n  lotteryNodeData: LotteryRound\n  isHistoricRound?: boolean\n}\n\ninterface RewardsState {\n  isLoading: boolean\n  cakeToBurn: BigNumber\n  rewardsLessTreasuryFee: BigNumber\n  rewardsBreakdown: string[]\n  countWinnersPerBracket: string[]\n}\n\nconst RewardBrackets: React.FC<RewardMatchesProps> = ({ lotteryNodeData, isHistoricRound }) => {\n  const { t } = useTranslation()\n  const [state, setState] = useState<RewardsState>({\n    isLoading: true,\n    cakeToBurn: BIG_ZERO,\n    rewardsLessTreasuryFee: BIG_ZERO,\n    rewardsBreakdown: null,\n    countWinnersPerBracket: null,\n  })\n\n  useEffect(() => {\n    if (lotteryNodeData) {\n      const { treasuryFee, amountCollectedInXfn, rewardsBreakdown, countWinnersPerBracket } = lotteryNodeData\n\n      const feeAsPercentage = new BigNumber(treasuryFee).div(100)\n      const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInXfn))\n      const amountLessTreasuryFee = new BigNumber(amountCollectedInXfn).minus(cakeToBurn)\n      setState({\n        isLoading: false,\n        cakeToBurn,\n        rewardsLessTreasuryFee: amountLessTreasuryFee,\n        rewardsBreakdown,\n        countWinnersPerBracket,\n      })\n    } else {\n      setState({\n        isLoading: true,\n        cakeToBurn: BIG_ZERO,\n        rewardsLessTreasuryFee: BIG_ZERO,\n        rewardsBreakdown: null,\n        countWinnersPerBracket: null,\n      })\n    }\n  }, [lotteryNodeData])\n\n  const getCakeRewards = (bracket: number) => {\n    const shareAsPercentage = new BigNumber(state.rewardsBreakdown[bracket]).div(100)\n    return state.rewardsLessTreasuryFee.div(100).times(shareAsPercentage)\n  }\n\n  const { isLoading, countWinnersPerBracket, cakeToBurn } = state\n\n  const rewardBrackets = [0, 1, 2, 3, 4, 5]\n\n  return (\n    <Wrapper>\n      <Text fontSize=\"14px\" mb=\"24px\">\n        {t('Match the winning number in the same order to share prizes.')}{' '}\n        {!isHistoricRound && t('Current prizes up for grabs:')}\n      </Text>\n      <RewardsInner>\n        {rewardBrackets.map((bracketIndex) => (\n          <RewardBracketDetail\n            key={bracketIndex}\n            rewardBracket={bracketIndex}\n            cakeAmount={!isLoading && getCakeRewards(bracketIndex)}\n            numberWinners={!isLoading && countWinnersPerBracket[bracketIndex]}\n            isHistoricRound={isHistoricRound}\n            isLoading={isLoading}\n          />\n        ))}\n        <RewardBracketDetail rewardBracket={0} cakeAmount={cakeToBurn} isBurn isLoading={isLoading} />\n      </RewardsInner>\n    </Wrapper>\n  )\n}\n\nexport default RewardBrackets\n","import { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Flex,\n  Heading,\n  Text,\n  Skeleton,\n  Button,\n  useModal,\n  Box,\n  CardFooter,\n  ExpandableLabel,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport ViewTicketsModal from './ViewTicketsModal'\nimport BuyTicketsButton from './BuyTicketsButton'\nimport { dateTimeOptions } from '../helpers'\nimport RewardBrackets from './RewardBrackets'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: auto;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-column-gap: 32px;\n    grid-template-columns: auto 1fr;\n  }\n`\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 520px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst NextDrawWrapper = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  background-image: url('/images/lottery/background_wide.jpg?v=2');\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center center;\n  padding: 24px;\n`\n\nconst NextDrawCard = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { account } = useWeb3React()\n  const { currentLotteryId, isTransitioning, currentRound } = useLottery()\n  const { endTime, amountCollectedInXfn, userTickets, status } = currentRound\n\n  const [onPresentViewTicketsModal] = useModal(<ViewTicketsModal roundId={currentLotteryId} roundStatus={status} />)\n  const [isExpanded, setIsExpanded] = useState(false)\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const prizeInBusd = amountCollectedInXfn.times(cakePriceBusd)\n  const endTimeMs = parseInt(endTime, 10) * 1000\n  const endDate = new Date(endTimeMs)\n  const isLotteryOpen = status === LotteryStatus.OPEN\n  const userTicketCount = userTickets?.tickets?.length || 0\n\n  const getPrizeBalances = () => {\n    if (status === LotteryStatus.CLOSE || status === LotteryStatus.CLAIMABLE) {\n      return (\n        <Heading scale=\"xl\" color=\"secondary\" textAlign={['center', null, null, 'left']}>\n          {t('Calculating')}...\n        </Heading>\n      )\n    }\n    return (\n      <>\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"7px\" height={40} width={160} />\n        ) : (\n          <Balance\n            fontSize=\"40px\"\n            color=\"secondary\"\n            textAlign={['center', null, null, 'left']}\n            lineHeight=\"1\"\n            bold\n            prefix=\"~$\"\n            value={getBalanceNumber(prizeInBusd, 9)}\n            decimals={0}\n          />\n        )}\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"2px\" height={14} width={90} />\n        ) : (\n          <Balance\n            fontSize=\"14px\"\n            color=\"textSubtle\"\n            textAlign={['center', null, null, 'left']}\n            unit=\" DEP\"\n            value={getBalanceNumber(amountCollectedInXfn, 9)}\n            decimals={0}\n          />\n        )}\n      </>\n    )\n  }\n\n  const getNextDrawId = () => {\n    if (status === LotteryStatus.OPEN) {\n      return `${currentLotteryId} |`\n    }\n    if (status === LotteryStatus.PENDING) {\n      return ''\n    }\n    return parseInt(currentLotteryId, 10) + 1\n  }\n\n  const getNextDrawDateTime = () => {\n    if (status === LotteryStatus.OPEN) {\n      return `${t('Draw')}: ${endDate.toLocaleString(locale, dateTimeOptions)}`\n    }\n    return ''\n  }\n\n  const ticketRoundText =\n    userTicketCount > 1\n      ? t('You have %amount% tickets this round', { amount: userTicketCount })\n      : t('You have %amount% ticket this round', { amount: userTicketCount })\n  const [youHaveText, ticketsThisRoundText] = ticketRoundText.split(userTicketCount.toString())\n\n  return (\n    <StyledCard>\n      <CardHeader p=\"16px 24px\">\n        <Flex justifyContent=\"space-between\">\n          <Heading mr=\"12px\">{t('Next Draw')}</Heading>\n          <Text>\n            {currentLotteryId && `#${getNextDrawId()}`} {Boolean(endTime) && getNextDrawDateTime()}\n          </Text>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        <Grid>\n          <Flex justifyContent={['center', null, null, 'flex-start']}>\n            <Heading>{t('Prize Pot')}</Heading>\n          </Flex>\n          <Flex flexDirection=\"column\" mb=\"18px\">\n            {getPrizeBalances()}\n          </Flex>\n          <Box display={['none', null, null, 'flex']}>\n            <Heading>{t('Your tickets')}</Heading>\n          </Box>\n          <Flex flexDirection={['column', null, null, 'row']} alignItems={['center', null, null, 'flex-start']}>\n            {isLotteryOpen && (\n              <Flex\n                flexDirection=\"column\"\n                mr={[null, null, null, '24px']}\n                alignItems={['center', null, null, 'flex-start']}\n              >\n                {account && (\n                  <Flex justifyContent={['center', null, null, 'flex-start']}>\n                    <Text display=\"inline\">{youHaveText} </Text>\n                    {!userTickets.isLoading ? (\n                      <Balance value={userTicketCount} decimals={0} display=\"inline\" bold mx=\"4px\" />\n                    ) : (\n                      <Skeleton mx=\"4px\" height={20} width={40} />\n                    )}\n                    <Text display=\"inline\"> {ticketsThisRoundText}</Text>\n                  </Flex>\n                )}\n                {!userTickets.isLoading && userTicketCount > 0 && (\n                  <Button\n                    onClick={onPresentViewTicketsModal}\n                    height=\"auto\"\n                    width=\"fit-content\"\n                    p=\"0\"\n                    mb={['32px', null, null, '0']}\n                    variant=\"text\"\n                    scale=\"sm\"\n                  >\n                    {t('View your tickets')}\n                  </Button>\n                )}\n              </Flex>\n            )}\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} maxWidth=\"280px\" />\n          </Flex>\n        </Grid>\n      </CardBody>\n      <CardFooter p=\"0\">\n        {isExpanded && (\n          <NextDrawWrapper>\n            <RewardBrackets lotteryNodeData={currentRound} />\n          </NextDrawWrapper>\n        )}\n        {(status === LotteryStatus.OPEN || status === LotteryStatus.CLOSE) && (\n          <Flex p=\"8px 24px\" alignItems=\"center\" justifyContent=\"center\">\n            <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n              {isExpanded ? t('Hide') : t('Details')}\n            </ExpandableLabel>\n          </Flex>\n        )}\n      </CardFooter>\n    </StyledCard>\n  )\n}\n\nexport default NextDrawCard\n","import styled from 'styled-components'\nimport { Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface TimerProps {\n  seconds?: number\n  minutes?: number\n  hours?: number\n  days?: number\n  wrapperClassName?: string\n}\n\nconst StyledTimerFlex = styled(Flex)<{ showTooltip?: boolean }>`\n  ${({ theme, showTooltip }) => (showTooltip ? ` border-bottom: 1px dashed ${theme.colors.textSubtle};` : ``)}\n  div:last-of-type {\n    margin-right: 0;\n  }\n`\n\nconst StyledTimerText = styled(Heading)`\n  background: ${({ theme }) => theme.colors.gradients.gold};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`\n\nconst Wrapper: React.FC<TimerProps> = ({ minutes, hours, days, seconds, wrapperClassName }) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledTimerFlex alignItems=\"flex-end\" className={wrapperClassName}>\n      {Boolean(days) && (\n        <>\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\n            {days}\n          </StyledTimerText>\n          <StyledTimerText mr=\"12px\">{t('d')}</StyledTimerText>\n        </>\n      )}\n      {Boolean(hours) && (\n        <>\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\n            {hours}\n          </StyledTimerText>\n          <StyledTimerText mr=\"12px\">{t('h')}</StyledTimerText>\n        </>\n      )}\n      {Boolean(minutes) && (\n        <>\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\n            {minutes}\n          </StyledTimerText>\n          <StyledTimerText mr=\"12px\">{t('m')}</StyledTimerText>\n        </>\n      )}\n      {Boolean(seconds) && (\n        <>\n          <StyledTimerText mb=\"-4px\" scale=\"xl\" mr=\"4px\">\n            {seconds}\n          </StyledTimerText>\n          <StyledTimerText mr=\"12px\">{t('s')}</StyledTimerText>\n        </>\n      )}\n    </StyledTimerFlex>\n  )\n}\n\nexport default Wrapper\n","import { useEffect, useState, useRef } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchCurrentLottery, setLotteryIsTransitioning } from 'state/lottery'\n\nconst useNextEventCountdown = (nextEventTime: number): number => {\n  const dispatch = useAppDispatch()\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const timer = useRef(null)\n  const { currentLotteryId } = useLottery()\n\n  useEffect(() => {\n    dispatch(setLotteryIsTransitioning({ isTransitioning: false }))\n    const currentSeconds = Math.floor(Date.now() / 1000)\n    const secondsRemainingCalc = nextEventTime - currentSeconds\n    setSecondsRemaining(secondsRemainingCalc)\n\n    timer.current = setInterval(() => {\n      setSecondsRemaining((prevSecondsRemaining) => {\n        // Clear current interval at end of countdown and fetch current lottery to get updated state\n        if (prevSecondsRemaining <= 1) {\n          clearInterval(timer.current)\n          dispatch(setLotteryIsTransitioning({ isTransitioning: true }))\n          dispatch(fetchCurrentLottery({ currentLotteryId }))\n        }\n        return prevSecondsRemaining - 1\n      })\n    }, 1000)\n\n    return () => clearInterval(timer.current)\n  }, [setSecondsRemaining, nextEventTime, currentLotteryId, timer, dispatch])\n\n  return secondsRemaining\n}\n\nexport default useNextEventCountdown\n","import { Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport Timer from './Timer'\nimport useNextEventCountdown from '../../hooks/useNextEventCountdown'\n\ninterface CountdownProps {\n  nextEventTime: number\n  preCountdownText?: string\n  postCountdownText?: string\n}\n\nconst Countdown: React.FC<CountdownProps> = ({ nextEventTime, preCountdownText, postCountdownText }) => {\n  const secondsRemaining = useNextEventCountdown(nextEventTime)\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return (\n    <>\n      {secondsRemaining ? (\n        <Flex display=\"inline-flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\n          {preCountdownText && (\n            <Heading mr=\"12px\" color=\"#ffff\">\n              {preCountdownText}\n            </Heading>\n          )}\n          <Timer\n            minutes={minutes + 1} // We don't show seconds - so values from 0 - 59s should be shown as 1 min\n            hours={hours}\n            days={days}\n          />\n          {postCountdownText && <Heading color=\"#ffff\">{postCountdownText}</Heading>}\n        </Flex>\n      ) : (\n        <Skeleton height=\"41px\" width=\"250px\" />\n      )}\n    </>\n  )\n}\n\nexport default Countdown\n","import { ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst HistoryTabMenu = ({ setActiveIndex, activeIndex }) => {\n  const { t } = useTranslation()\n\n  return (\n    <ButtonMenu activeIndex={activeIndex} onItemClick={setActiveIndex} scale=\"sm\" variant=\"subtle\">\n      <ButtonMenuItem>{t('All History')}</ButtonMenuItem>\n      <ButtonMenuItem>{t('Your History')}</ButtonMenuItem>\n    </ButtonMenu>\n  )\n}\n\nexport default HistoryTabMenu\n","import styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Flex, ChevronRightIcon, Box, SmallDotIcon, PrizeIcon } from '@pancakeswap/uikit'\nimport { dateOptions, timeOptions } from '../../helpers'\n\ninterface FinishedRoundRowProps {\n  roundId: string\n  numberTickets: string\n  endTime: string\n  onClick: (string) => void\n  hasWon?: boolean\n}\n\nconst Grid = styled(Box)`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr) auto;\n  margin-bottom: 8px;\n  cursor: pointer;\n`\n\nconst StyledSmallDotIcon = styled(SmallDotIcon)`\n  path {\n    fill: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst FinishedRoundRow: React.FC<FinishedRoundRowProps> = ({\n  roundId,\n  numberTickets,\n  endTime,\n  onClick,\n  hasWon = false,\n}) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const endTimeInMs = parseInt(endTime, 10) * 1000\n  const endTimeAsDate = new Date(endTimeInMs)\n\n  return (\n    <Grid onClick={() => onClick(roundId)}>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"16px\" color=\"textSubtle\">\n          {roundId}\n        </Text>\n      </Flex>\n      <Flex\n        mx=\"6px\"\n        alignItems={['flex-start', null, 'center']}\n        justifyContent={['center', null, 'flex-start']}\n        flexDirection={['column', null, 'row']}\n      >\n        <Text fontSize=\"12px\" mr={['0', null, '6px']}>\n          {endTimeAsDate.toLocaleDateString(locale, dateOptions)}\n        </Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {endTimeAsDate.toLocaleTimeString(undefined, timeOptions)}\n        </Text>\n      </Flex>\n      <Flex mx=\"6px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{numberTickets}</Text>\n        {hasWon ? <PrizeIcon color=\"warning\" /> : <StyledSmallDotIcon />}\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <ChevronRightIcon color=\"primary\" />\n      </Flex>\n    </Grid>\n  )\n}\n\nexport default FinishedRoundRow\n","import styled from 'styled-components'\nimport { Text, Box, Flex, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useGetUserLotteriesGraphData } from 'state/lottery/hooks'\nimport FinishedRoundRow from './FinishedRoundRow'\n\nconst Grid = styled(Box)`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr) auto;\n`\n\ninterface FinishedRoundTableProps {\n  handleHistoryRowClick: (string) => void\n  handleShowMoreClick: () => void\n  numUserRoundsRequested: number\n}\n\nconst FinishedRoundTable: React.FC<FinishedRoundTableProps> = ({\n  handleShowMoreClick,\n  numUserRoundsRequested,\n  handleHistoryRowClick,\n}) => {\n  const { t } = useTranslation()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const filteredForClaimable = userLotteryData?.rounds.filter((round) => {\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\n  })\n\n  const sortedByRoundId = filteredForClaimable?.sort((roundA, roundB) => {\n    return parseInt(roundB.lotteryId, 10) - parseInt(roundA.lotteryId, 10)\n  })\n\n  return (\n    <>\n      <Grid px=\"24px\" pt=\"24px\" mb=\"8px\">\n        <Text bold fontSize=\"12px\" color=\"secondary\">\n          #\n        </Text>\n        <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\">\n          {t('Date')}\n        </Text>\n        <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\">\n          {t('Your Tickets')}\n        </Text>\n        <Box width=\"20px\" />\n      </Grid>\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\" overflowY=\"scroll\" height=\"240px\">\n        {userLotteryData &&\n          sortedByRoundId.map((finishedRound) => (\n            <FinishedRoundRow\n              key={finishedRound.lotteryId}\n              roundId={finishedRound.lotteryId}\n              hasWon={finishedRound.claimed}\n              numberTickets={finishedRound.totalTickets}\n              endTime={finishedRound.endTime}\n              onClick={handleHistoryRowClick}\n            />\n          ))}\n        {userLotteryData?.rounds?.length === numUserRoundsRequested && (\n          <Flex justifyContent=\"center\">\n            <Button mt=\"12px\" variant=\"text\" width=\"fit-content\" onClick={handleShowMoreClick}>\n              {t('Show More')}\n            </Button>\n          </Flex>\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default FinishedRoundTable\n","import styled from 'styled-components'\nimport {\n  CardBody,\n  Heading,\n  Flex,\n  Skeleton,\n  Text,\n  Box,\n  Button,\n  useModal,\n  CardRibbon,\n  BunnyPlaceholderIcon,\n  useMatchBreakpoints\n} from '@pancakeswap/uikit'\nimport { LotteryRound } from 'state/types'\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport WinningNumbers from '../WinningNumbers'\nimport ViewTicketsModal from '../ViewTicketsModal'\n\nconst StyledCardBody = styled(CardBody)`\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: auto;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-column-gap: 72px;\n    grid-row-gap: 36px;\n    grid-template-columns: auto 1fr;\n  }\n`\n\nconst StyledCardRibbon = styled(CardRibbon)`\n  right: -20px;\n  top: -20px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    right: -10px;\n    top: -10px;\n  }\n`\n\nconst PreviousRoundCardBody: React.FC<{ lotteryNodeData: LotteryRound; lotteryId: string }> = ({\n  lotteryNodeData,\n  lotteryId,\n}) => {\n  const { t } = useTranslation()\n  const {\n    currentLotteryId,\n    currentRound: { status },\n  } = useLottery()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const userDataForRound = userLotteryData.rounds.find((userLotteryRound) => userLotteryRound.lotteryId === lotteryId)\n  const { isLg, isXl, isXxl } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n\n  const currentLotteryIdAsInt = parseInt(currentLotteryId)\n  const mostRecentFinishedRoundId =\n    status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\n  const isLatestRound = mostRecentFinishedRoundId.toString() === lotteryId\n\n  const [onPresentViewTicketsModal] = useModal(\n    <ViewTicketsModal roundId={lotteryId} roundStatus={lotteryNodeData?.status} />,\n  )\n\n  const totalTicketNumber = userDataForRound ? userDataForRound.totalTickets : 0\n  const ticketRoundText =\n    Number(totalTicketNumber) > 1\n      ? t('You had %amount% tickets this round', { amount: totalTicketNumber })\n      : t('You had %amount% ticket this round', { amount: totalTicketNumber })\n  const [youHadText, ticketsThisRoundText] = ticketRoundText.split(totalTicketNumber.toString())\n\n  return (\n    <StyledCardBody>\n      {isLatestRound && <StyledCardRibbon text={t('Latest')} />}\n      <Grid>\n        <Flex justifyContent={['center', null, null, 'flex-start']}>\n          <Heading mb=\"24px\">{t('Winning Number')}</Heading>\n        </Flex>\n        <Flex maxWidth={['240px', null, null, '100%']} justifyContent={['center', null, null, 'flex-start']}>\n          {lotteryId ? (\n            lotteryNodeData?.finalNumber ? (\n              <WinningNumbers\n                rotateText={isLargerScreen || false}\n                number={lotteryNodeData?.finalNumber.toString()}\n                mr={[null, null, null, '32px']}\n                size=\"100%\"\n                fontSize={isLargerScreen ? '64px' : '32px'}\n              />\n            ) : (\n              <Skeleton\n                width={['240px', null, null, '450px']}\n                height={['34px', null, null, '71px']}\n                mr={[null, null, null, '32px']}\n              />\n            )\n          ) : (\n            <>\n              <Flex flexDirection=\"column\" alignItems=\"center\" width={['240px', null, null, '480px']}>\n                <Text mb=\"8px\">{t('Please specify Round')}</Text>\n                <BunnyPlaceholderIcon height=\"64px\" width=\"64px\" />\n              </Flex>\n            </>\n          )}\n        </Flex>\n        {userDataForRound && (\n          <>\n            <Box display={['none', null, null, 'flex']}>\n              <Heading>{t('Your tickets')}</Heading>\n            </Box>\n            <Flex\n              flexDirection=\"column\"\n              mr={[null, null, null, '24px']}\n              alignItems={['center', null, null, 'flex-start']}\n            >\n              <Box mt={['32px', null, null, 0]}>\n                <Text display=\"inline\">{youHadText} </Text>\n                <Text display=\"inline\" bold>\n                  {userDataForRound.totalTickets}\n                </Text>\n                <Text display=\"inline\">{ticketsThisRoundText}</Text>\n              </Box>\n              <Button\n                onClick={onPresentViewTicketsModal}\n                height=\"auto\"\n                width=\"fit-content\"\n                p=\"0\"\n                variant=\"text\"\n                scale=\"sm\"\n              >\n                {t('View your tickets')}\n              </Button>\n            </Flex>\n          </>\n        )}\n      </Grid>\n    </StyledCardBody>\n  )\n}\n\nexport default PreviousRoundCardBody\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound, LotteryRoundGraphEntity } from 'state/types'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useGetLotteryGraphDataById } from 'state/lottery/hooks'\nimport { getGraphLotteries } from 'state/lottery/getLotteriesData'\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport RewardBrackets from '../RewardBrackets'\n\nconst NextDrawWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.background};\n  background-image: url('/images/lottery/background_wide.jpg?v=2');\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center center;\n  padding: 24px;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst PreviousRoundCardFooter: React.FC<{ lotteryNodeData: LotteryRound; lotteryId: string }> = ({\n  lotteryNodeData,\n  lotteryId,\n}) => {\n  const { t } = useTranslation()\n  const [fetchedLotteryGraphData, setFetchedLotteryGraphData] = useState<LotteryRoundGraphEntity>()\n  const lotteryGraphDataFromState = useGetLotteryGraphDataById(lotteryId)\n  const cakePriceBusd = usePriceCakeBusd()\n  useEffect(() => {\n    const getGraphData = async () => {\n      const fetchedGraphData = await getGraphLotteries(undefined, undefined, { id_in: [lotteryId] })\n      setFetchedLotteryGraphData(fetchedGraphData[0])\n    }\n    if (!lotteryGraphDataFromState) {\n      getGraphData()\n    }\n  }, [lotteryGraphDataFromState, lotteryId])\n\n  let prizeInBusd = new BigNumber(NaN)\n  if (lotteryNodeData) {\n    const { amountCollectedInXfn } = lotteryNodeData\n    prizeInBusd = amountCollectedInXfn.times(cakePriceBusd)\n  }\n\n  const getTotalUsers = (): string => {\n    if (!lotteryGraphDataFromState && fetchedLotteryGraphData) {\n      return fetchedLotteryGraphData?.totalUsers?.toLocaleString()\n    }\n\n    if (lotteryGraphDataFromState) {\n      return lotteryGraphDataFromState?.totalUsers?.toLocaleString()\n    }\n\n    return null\n  }\n\n  const getPrizeBalances = () => {\n    return (\n      <>\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"7px\" height={40} width={200} />\n        ) : (\n          <Heading scale=\"xl\" lineHeight=\"1\" color=\"secondary\">\n            ~${formatNumber(getBalanceNumber(prizeInBusd, 9), 0, 0)}\n          </Heading>\n        )}\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"2px\" height={14} width={90} />\n        ) : (\n          <Balance\n            fontSize=\"14px\"\n            color=\"textSubtle\"\n            unit=\" SOMI\"\n            value={getBalanceNumber(lotteryNodeData?.amountCollectedInXfn, 9)}\n            decimals={0}\n          />\n        )}\n      </>\n    )\n  }\n\n  return (\n    <NextDrawWrapper>\n      <Flex mr=\"24px\" flexDirection=\"column\" justifyContent=\"space-between\">\n        <Box>\n          <Heading>{t('Prize pot')}</Heading>\n          {getPrizeBalances()}\n        </Box>\n        <Box mb=\"24px\">\n          <Flex>\n            <Text fontSize=\"14px\" display=\"inline\">\n              {t('Total players this round')}:{' '}\n              {lotteryNodeData && (lotteryGraphDataFromState || fetchedLotteryGraphData) ? (\n                getTotalUsers()\n              ) : (\n                <Skeleton height={14} width={31} />\n              )}\n            </Text>\n          </Flex>\n        </Box>\n      </Flex>\n      <RewardBrackets lotteryNodeData={lotteryNodeData} isHistoricRound />\n    </NextDrawWrapper>\n  )\n}\n\nexport default PreviousRoundCardFooter\n","import { useEffect, useState } from 'react'\nimport { Flex, ExpandableLabel, CardFooter } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound } from 'state/types'\nimport FooterExpanded from './FooterExpanded'\n\ninterface PreviousRoundCardFooterProps {\n  lotteryNodeData: LotteryRound\n  lotteryId: string\n}\n\nconst PreviousRoundCardFooter: React.FC<PreviousRoundCardFooterProps> = ({ lotteryNodeData, lotteryId }) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n  \n  useEffect(() => {\n    if (!lotteryId) {\n      setIsExpanded(false)\n    }\n  }, [lotteryId])\n\n  return (\n    <CardFooter p=\"0\">\n      {isExpanded && <FooterExpanded lotteryNodeData={lotteryNodeData} lotteryId={lotteryId} />}\n      <Flex p=\"8px 24px\" alignItems=\"center\" justifyContent=\"center\">\n        <ExpandableLabel\n          expanded={isExpanded}\n          onClick={() => {\n            if (lotteryId) {\n              setIsExpanded(!isExpanded)\n            }\n          }}\n        >\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </Flex>\n    </CardFooter>\n  )\n}\n\nexport default PreviousRoundCardFooter\n","import { useState, useCallback } from 'react'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport styled from 'styled-components'\nimport {\n  CardHeader,\n  Card,\n  CardBody,\n  Text,\n  CardFooter,\n  ArrowBackIcon,\n  Flex,\n  Heading,\n  Skeleton,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { LotteryRound } from 'state/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport FinishedRoundTable from './FinishedRoundTable'\nimport { WhiteBunny } from '../../svgs'\nimport BuyTicketsButton from '../BuyTicketsButton'\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\nimport { processLotteryResponse, getDrawnDate } from '../../helpers'\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\n\ninterface YourHistoryCardProps {\n  handleShowMoreClick: () => void\n  numUserRoundsRequested: number\n}\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 240px;\n`\n\nconst YourHistoryCard: React.FC<YourHistoryCardProps> = ({ handleShowMoreClick, numUserRoundsRequested }) => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { account } = useWeb3React()\n  const [shouldShowRoundDetail, setShouldShowRoundDetail] = useState(false)\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState<LotteryRound>(null)\n  const [selectedLotteryId, setSelectedLotteryId] = useState<string>(null)\n\n  const {\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  const handleHistoryRowClick = async (lotteryId: string) => {\n    setShouldShowRoundDetail(true)\n    setSelectedLotteryId(lotteryId)\n    const lotteryData = await fetchLottery(lotteryId)\n    const processedLotteryData = processLotteryResponse(lotteryData)\n    setSelectedLotteryNodeData(processedLotteryData)\n  }\n\n  const clearState = useCallback(() => {\n    setShouldShowRoundDetail(false)\n    setSelectedLotteryNodeData(null)\n    setSelectedLotteryId(null)\n  }, [])\n\n  const getHeader = () => {\n    if (shouldShowRoundDetail) {\n      return (\n        <Flex alignItems=\"center\">\n          <ArrowBackIcon cursor=\"pointer\" onClick={clearState} mr=\"20px\" />\n          <Flex flexDirection=\"column\" alignItems=\"flex-start\" justifyContent=\"center\">\n            <Heading scale=\"md\" mb=\"4px\">\n              {t('Round')} {selectedLotteryId || ''}\n            </Heading>\n            {selectedLotteryNodeData?.endTime ? (\n              <Text fontSize=\"14px\">\n                {t('Drawn')} {getDrawnDate(locale, selectedLotteryNodeData.endTime)}\n              </Text>\n            ) : (\n              <Skeleton width=\"185px\" height=\"21px\" />\n            )}\n          </Flex>\n        </Flex>\n      )\n    }\n\n    return <Heading scale=\"md\">{t('Rounds')}</Heading>\n  }\n\n  const getBody = () => {\n    if (shouldShowRoundDetail) {\n      return <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedLotteryId} />\n    }\n\n    const claimableRounds = userLotteryData?.rounds.filter((round) => {\n      return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\n    })\n\n    if (!account) {\n      return (\n        <StyledCardBody>\n          <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\n            {t('Connect your wallet to check your history')}\n          </Text>\n          <ConnectWalletButton />\n        </StyledCardBody>\n      )\n    }\n    if (claimableRounds.length === 0) {\n      return (\n        <StyledCardBody>\n          <Box maxWidth=\"280px\">\n            <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"16px\">\n              <WhiteBunny height=\"24px\" mr=\"8px\" /> <Text textAlign=\"left\">{t('No lottery history found')}</Text>\n            </Flex>\n            <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\n              {t('Buy tickets for the next round!')}\n            </Text>\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} width=\"100%\" />\n          </Box>\n        </StyledCardBody>\n      )\n    }\n    return (\n      <FinishedRoundTable\n        handleHistoryRowClick={handleHistoryRowClick}\n        handleShowMoreClick={handleShowMoreClick}\n        numUserRoundsRequested={numUserRoundsRequested}\n      />\n    )\n  }\n\n  const getFooter = () => {\n    if (selectedLotteryNodeData) {\n      return <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedLotteryId} />\n    }\n    return (\n      <CardFooter>\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Only showing data for Lottery V2')}\n          </Text>\n        </Flex>\n      </CardFooter>\n    )\n  }\n\n  return (\n    <StyledCard>\n      <CardHeader>{getHeader()}</CardHeader>\n      {getBody()}\n      {getFooter()}\n    </StyledCard>\n  )\n}\n\nexport default YourHistoryCard\n","import styled from 'styled-components'\nimport { IconButton, ArrowForwardIcon, ArrowBackIcon, ArrowLastIcon, Flex, Heading, Input } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  width: 60px;\n  height: 100%;\n  padding: 4px 16px;\n`\n\nconst StyledIconButton = styled(IconButton)`\n  width: 32px;\n\n  :disabled {\n    background: none;\n\n    svg {\n      fill: ${({ theme }) => theme.colors.textDisabled};\n\n      path {\n        fill: ${({ theme }) => theme.colors.textDisabled};\n      }\n    }\n  }\n`\n\ninterface RoundSwitcherProps {\n  isLoading: boolean\n  selectedRoundId: string\n  mostRecentRound: number\n  handleInputChange: (event: any) => void\n  handleArrowButtonPress: (targetRound: number) => void\n}\n\nconst RoundSwitcher: React.FC<RoundSwitcherProps> = ({\n  isLoading,\n  selectedRoundId,\n  mostRecentRound,\n  handleInputChange,\n  handleArrowButtonPress,\n}) => {\n  const { t } = useTranslation()\n  const selectedRoundIdAsInt = parseInt(selectedRoundId, 10)\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.currentTarget.validity.valid) {\n      handleInputChange(e)\n    }\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Flex alignItems=\"center\">\n        <Heading mr=\"8px\">{t('Round')}</Heading>\n        <StyledInput\n          pattern=\"^[0-9]+$\"\n          inputMode=\"numeric\"\n          disabled={isLoading}\n          id=\"round-id\"\n          name=\"round-id\"\n          value={selectedRoundId}\n          scale=\"lg\"\n          onChange={handleOnChange}\n        />\n      </Flex>\n      <Flex alignItems=\"center\">\n        <StyledIconButton\n          disabled={!selectedRoundIdAsInt || selectedRoundIdAsInt <= 1}\n          onClick={() => handleArrowButtonPress(selectedRoundIdAsInt - 1)}\n          variant=\"text\"\n          scale=\"sm\"\n          mr=\"4px\"\n        >\n          <ArrowBackIcon />\n        </StyledIconButton>\n        <StyledIconButton\n          disabled={selectedRoundIdAsInt >= mostRecentRound}\n          onClick={() => handleArrowButtonPress(selectedRoundIdAsInt + 1)}\n          variant=\"text\"\n          scale=\"sm\"\n          mr=\"4px\"\n        >\n          <ArrowForwardIcon />\n        </StyledIconButton>\n        <StyledIconButton\n          disabled={selectedRoundIdAsInt >= mostRecentRound}\n          onClick={() => handleArrowButtonPress(mostRecentRound)}\n          variant=\"text\"\n          scale=\"sm\"\n        >\n          <ArrowLastIcon />\n        </StyledIconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default RoundSwitcher\n","import { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { LotteryStatus } from 'config/constants/types'\nimport RoundSwitcher from './RoundSwitcher'\nimport { getDrawnDate, processLotteryResponse } from '../../helpers'\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst StyledCardHeader = styled(CardHeader)`\n  z-index: 2;\n  background: none;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nconst AllHistoryCard = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const dispatch = useAppDispatch()\n  const {\n    currentLotteryId,\n    lotteriesData,\n    currentRound: { status, isLoading },\n  } = useLottery()\n  const [latestRoundId, setLatestRoundId] = useState(null)\n  const [selectedRoundId, setSelectedRoundId] = useState('')\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState(null)\n  const timer = useRef(null)\n\n  const numRoundsFetched = lotteriesData?.length\n\n  useEffect(() => {\n    if (currentLotteryId) {\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null\n      const mostRecentFinishedRoundId =\n        status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\n      setLatestRoundId(mostRecentFinishedRoundId)\n      setSelectedRoundId(mostRecentFinishedRoundId.toString())\n    }\n  }, [currentLotteryId, status])\n\n  useEffect(() => {\n    setSelectedLotteryNodeData(null)\n\n    const fetchLotteryData = async () => {\n      const lotteryData = await fetchLottery(selectedRoundId)\n      const processedLotteryData = processLotteryResponse(lotteryData)\n      setSelectedLotteryNodeData(processedLotteryData)\n    }\n\n    timer.current = setInterval(() => {\n      if (selectedRoundId) {\n        fetchLotteryData()\n      }\n      clearInterval(timer.current)\n    }, 1000)\n\n    return () => clearInterval(timer.current)\n  }, [selectedRoundId, currentLotteryId, numRoundsFetched, dispatch])\n\n  const handleInputChange = (event) => {\n    const {\n      target: { value },\n    } = event\n    if (value) {\n      setSelectedRoundId(value)\n      if (parseInt(value, 10) <= 0) {\n        setSelectedRoundId('')\n      }\n      if (parseInt(value, 10) >= latestRoundId) {\n        setSelectedRoundId(latestRoundId.toString())\n      }\n    } else {\n      setSelectedRoundId('')\n    }\n  }\n\n  const handleArrowButtonPress = (targetRound) => {\n    if (targetRound) {\n      setSelectedRoundId(targetRound.toString())\n    } else {\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\n      setSelectedRoundId('1')\n    }\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardHeader>\n        <RoundSwitcher\n          isLoading={isLoading}\n          selectedRoundId={selectedRoundId}\n          mostRecentRound={latestRoundId}\n          handleInputChange={handleInputChange}\n          handleArrowButtonPress={handleArrowButtonPress}\n        />\n        <Box mt=\"8px\">\n          {selectedRoundId ? (\n            selectedLotteryNodeData?.endTime ? (\n              <Text fontSize=\"14px\">\n                {t('Drawn')} {getDrawnDate(locale, selectedLotteryNodeData.endTime)}\n              </Text>\n            ) : (\n              <Skeleton width=\"185px\" height=\"21px\" />\n            )\n          ) : null}\n        </Box>\n      </StyledCardHeader>\n      <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\n      <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\n    </StyledCard>\n  )\n}\n\nexport default AllHistoryCard\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { useGetLotteriesGraphData, useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport fetchUnclaimedUserRewards from 'state/lottery/fetchUnclaimedUserRewards'\nimport { FetchStatus } from 'config/constants/types'\n\nconst useGetUnclaimedRewards = () => {\n  const { account } = useWeb3React()\n  const { isTransitioning, currentLotteryId } = useLottery()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const lotteriesData = useGetLotteriesGraphData()\n  const [unclaimedRewards, setUnclaimedRewards] = useState([])\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.Idle)\n\n  useEffect(() => {\n    // Reset on account change and round transition\n    setFetchStatus(FetchStatus.Idle)\n  }, [account, isTransitioning])\n\n  const fetchAllRewards = async () => {\n    setFetchStatus(FetchStatus.Fetching)\n    const unclaimedRewardsResponse = await fetchUnclaimedUserRewards(\n      account,\n      userLotteryData,\n      lotteriesData,\n      currentLotteryId,\n    )\n    setUnclaimedRewards(unclaimedRewardsResponse)\n    setFetchStatus(FetchStatus.Fetched)\n  }\n\n  return { fetchAllRewards, unclaimedRewards, fetchStatus }\n}\n\nexport default useGetUnclaimedRewards\n","import { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Flex, useModal, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { FetchStatus, LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport ClaimPrizesModal from './ClaimPrizesModal'\nimport useGetUnclaimedRewards from '../hooks/useGetUnclaimedRewards'\n\nconst TicketImage = styled.img`\n  height: 60px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 100px;\n  }\n`\n\nconst TornTicketImage = styled.img`\n  height: 54px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 84px;\n  }\n`\n\nconst CheckPrizesSection = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n  const { fetchAllRewards, unclaimedRewards, fetchStatus } = useGetUnclaimedRewards()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const [hasCheckedForRewards, setHasCheckedForRewards] = useState(false)\n  const [hasRewardsToClaim, setHasRewardsToClaim] = useState(false)\n  const [onPresentClaimModal] = useModal(<ClaimPrizesModal roundsToClaim={unclaimedRewards} />, false)\n  const isFetchingRewards = fetchStatus === FetchStatus.Fetching\n  const lotteryIsNotClaimable = status === LotteryStatus.CLOSE\n  const isCheckNowDisabled = !userLotteryData.account || lotteryIsNotClaimable\n\n  useEffect(() => {\n    if (fetchStatus === FetchStatus.Fetched) {\n      // Manage showing unclaimed rewards modal once per page load / once per lottery state change\n      if (unclaimedRewards.length > 0 && !hasCheckedForRewards) {\n        setHasRewardsToClaim(true)\n        setHasCheckedForRewards(true)\n        onPresentClaimModal()\n      }\n      \n      if (unclaimedRewards.length === 0 && !hasCheckedForRewards) {\n        setHasRewardsToClaim(false)\n        setHasCheckedForRewards(true)\n      }\n    }\n  }, [unclaimedRewards, hasCheckedForRewards, fetchStatus, onPresentClaimModal])\n\n  useEffect(() => {\n    // Clear local state on account change, or when lottery isTransitioning state changes\n    setHasRewardsToClaim(false)\n    setHasCheckedForRewards(false)\n  }, [account, isTransitioning])\n\n  const getBody = () => {\n    if (!account) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TicketImage src=\"/images/lottery/xfortune-ticket-l-safemars.png\" alt=\"lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\" alignItems=\"center\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('Connect your wallet')}\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\" mb=\"24px\">\n              {t(\"to check if you've won!\")}\n            </Heading>\n            <ConnectWalletButton width=\"190px\" />\n          </Flex>\n          <TicketImage src=\"/images/lottery/xfortune-ticket-r-safemars.png\" alt=\"lottery ticket\" />\n        </Flex>\n      )\n    }\n    if (hasCheckedForRewards && !hasRewardsToClaim) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TornTicketImage src=\"/images/lottery/xfortune-torn-ticket-l.png\" alt=\"torn lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('No prizes to collect')}...\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('Better luck next time!')}\n            </Heading>\n          </Flex>\n          <TornTicketImage src=\"/images/lottery/xfortune-torn-ticket-r.png\" alt=\"torn lottery ticket\" />\n        </Flex>\n      )\n    }\n    if (hasCheckedForRewards && hasRewardsToClaim) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TicketImage src=\"/images/lottery/xfortune-ticket-l-safemars.png\" alt=\"lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('Congratulations!')}\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {t('Why not play again')}\n            </Heading>\n          </Flex>\n          <TicketImage src=\"/images/lottery/xfortune-ticket-r-safemars.png\" alt=\"lottery ticket\" />\n        </Flex>\n      )\n    }\n    const checkNowText = () => {\n      if (lotteryIsNotClaimable) {\n        return `${t('Calculating rewards')}...`\n      }\n      if (isFetchingRewards) {\n        return t('Checking')\n      }\n      return t('Check Now')\n    }\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <TicketImage src=\"/images/lottery/xfortune-ticket-l-safemars.png\" alt=\"lottery ticket\" />\n        <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\n          <Heading textAlign=\"center\" color=\"#F4EEFF\" mb=\"24px\">\n            {t('Are you a winner?')}\n          </Heading>\n          <Button\n            disabled={isCheckNowDisabled}\n            onClick={fetchAllRewards}\n            isLoading={isFetchingRewards}\n            endIcon={isFetchingRewards ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n          >\n            {checkNowText()}\n          </Button>\n        </Flex>\n        <TicketImage src=\"/images/lottery/xfortune-ticket-r-safemars.png\" alt=\"lottery ticket\" />\n      </Flex>\n    )\n  }\n\n  return <Flex>{getBody()}</Flex>\n}\n\nexport default CheckPrizesSection\n","import { useWeb3React } from '@pancakeswap/wagmi'\nimport { useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchAdditionalUserLotteries } from 'state/lottery'\nimport { MAX_USER_LOTTERIES_REQUEST_SIZE } from 'state/lottery/getUserLotteryData'\n\nconst useShowMoreUserRounds = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const [numUserRoundsRequested, setNumUserRoundsRequested] = useState(MAX_USER_LOTTERIES_REQUEST_SIZE)\n\n  const handleShowMoreUserRounds = () => {\n    dispatch(fetchAdditionalUserLotteries({ account, skip: numUserRoundsRequested }))\n    setNumUserRoundsRequested(numUserRoundsRequested + MAX_USER_LOTTERIES_REQUEST_SIZE)\n  }\n\n  return { numUserRoundsRequested, handleShowMoreUserRounds }\n}\n\nexport default useShowMoreUserRounds\n","import { useState } from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { LotteryStatus } from 'config/constants/types'\nimport PageSection from 'components/PageSection'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { useFetchLottery, useLottery } from 'state/lottery/hooks'\nimport {\n  TITLE_BG,\n  GET_TICKETS_BG,\n  FINISHED_ROUNDS_BG,\n  FINISHED_ROUNDS_BG_DARK,\n  CHECK_PRIZES_BG,\n} from './pageSectionStyles'\nimport useGetNextLotteryEvent from './hooks/useGetNextLotteryEvent'\nimport useStatusTransitions from './hooks/useStatusTransitions'\nimport Hero from './components/Hero'\nimport NextDrawCard from './components/NextDrawCard'\nimport Countdown from './components/Countdown'\nimport HistoryTabMenu from './components/HistoryTabMenu'\nimport YourHistoryCard from './components/YourHistoryCard'\nimport AllHistoryCard from './components/AllHistoryCard'\nimport CheckPrizesSection from './components/CheckPrizesSection'\nimport HowToPlay from './components/HowToPlay'\nimport useShowMoreUserHistory from './hooks/useShowMoreUserRounds'\nimport { PageMeta } from '../../components/Layout/Page'\n\nconst textBox: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center',\n  textAlign: 'center',\n  backgroundColor: 'rgba(100, 100, 100, 0.3)',\n  borderRadius: '25px',\n  border: '1px solid lightgray',\n  padding: '5px',\n  margin: '12px',\n  boxShadow: '2px 4px 8px rgba(0, 0, 0, 0.5)',\n};\n\nconst LotteryPage = styled.div`\n  min-height: calc(100vh - 64px);\n`\n\nconst Lottery = () => {\n  useFetchLottery()\n  useStatusTransitions()\n  const { t } = useTranslation()\n  const { isDark, theme } = useTheme()\n  const {\n    currentRound: { status, endTime },\n  } = useLottery()\n  const [historyTabMenuIndex, setHistoryTabMenuIndex] = useState(0)\n  const endTimeAsInt = parseInt(endTime, 10)\n  const { nextEventTime, postCountdownText, preCountdownText } = useGetNextLotteryEvent(endTimeAsInt, status)\n  const { numUserRoundsRequested, handleShowMoreUserRounds } = useShowMoreUserHistory()\n\n  return (\n    <>\n      <PageMeta />\n      <LotteryPage>\n        <PageSection background={TITLE_BG} index={1} hasCurvedDivider={false}>\n          <Hero />\n        </PageSection>\n        <PageSection\n          containerProps={{ style: { marginTop: '-30px' } }}\n          background={GET_TICKETS_BG}\n          index={2}\n          hasCurvedDivider={false}\n        >\n          <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" pt=\"24px\">\n            {status === LotteryStatus.OPEN && (\n              <div style={{ marginBottom: '25px', width: 'min(90%, 640px)' }}>\n                <div style={textBox}>\n                  <Heading scale=\"xl\" color=\"#ffffff\" mb=\"5px\" textAlign=\"center\">\n                    {t('Get your tickets now!')}\n                  </Heading>\n                </div>\n              </div>\n            )}\n            <div style={{ margin: '0 auto', width: 'min(90%, 480px)' }}>\n              <img src=\"/images/lottery/get_your_tickets_now.jpg\" alt=\"\" style={{ borderRadius: '25px', boxShadow: '0 0 8px rgba(0, 0, 0, 1)' }}/>\n            </div> \n              <div style={{ marginBottom: '25px', width: 'min(90%, 480px)' }}>\n                <div style={textBox}>\n                  <div style={{ margin: '12px', width: 'min(80%, 360px)' }}>\n                    <img src=\"/images/lottery/xfortune_balls.jpg\" alt=\"\" style={{ borderRadius: '25px', boxShadow: '0 0 8px rgba(0, 0, 0, 1)' }}/>\n                  </div> \n                  <div style={textBox}>\n                    <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"12px\" ml=\"12px\" mr=\"12px\">\n                      {nextEventTime && (postCountdownText || preCountdownText) ? (\n                        <Countdown\n                          nextEventTime={nextEventTime}\n                          postCountdownText={postCountdownText}\n                          preCountdownText={preCountdownText}\n                        />\n                      ) : (\n                        <Skeleton height=\"41px\" width=\"250px\" />\n                      )}\n                    </Flex>\n                  </div>\n                </div>\n              </div>\n            <NextDrawCard />\n          </Flex>\n        </PageSection>\n        <PageSection background={CHECK_PRIZES_BG} hasCurvedDivider={false} index={2}>\n          <div style={textBox}>\n            <div style={{ margin: '12px auto', width: 'min(90%, 320px)' }}>\n              <img src=\"/images/lottery/winner.jpg\" alt=\"\" style={{ borderRadius: '25px', boxShadow: '0 0 8px rgba(0, 0, 0, 1)' }}/>\n              <CheckPrizesSection />\n            </div> \n          </div>\n        </PageSection>\n        <PageSection\n          innerProps={{ style: { margin: '0', width: '100%' } }}\n          background={isDark ? FINISHED_ROUNDS_BG_DARK : FINISHED_ROUNDS_BG}\n          hasCurvedDivider={false}\n          index={2}\n        >\n          <div style={{ margin: '12px auto', width: 'min(90%, 320px)' }}>\n            <img src=\"/images/lottery/finished_rounds.jpg\" alt=\"\" style={{ borderRadius: '25px', boxShadow: '0 0 8px rgba(0, 0, 0, 1)' }}/>\n          </div> \n          <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n            <Heading mb=\"24px\" scale=\"xl\">\n              {t('Finished Rounds')}\n            </Heading>\n            <Box mb=\"24px\">\n              <HistoryTabMenu\n                activeIndex={historyTabMenuIndex}\n                setActiveIndex={(index) => setHistoryTabMenuIndex(index)}\n              />\n            </Box>\n            {historyTabMenuIndex === 0 ? (\n              <AllHistoryCard />\n            ) : (\n              <YourHistoryCard\n                handleShowMoreClick={handleShowMoreUserRounds}\n                numUserRoundsRequested={numUserRoundsRequested}\n              />\n            )}\n          </Flex>\n        </PageSection>\n        <PageSection\n          index={2}\n        >\n        </PageSection>\n      </LotteryPage>\n    </>\n  )\n}\n\nexport default Lottery\n","export const TITLE_BG = 'linear-gradient(180deg, #000000 25%, #4769D2 100%)'\nexport const GET_TICKETS_BG = 'linear-gradient(180deg, #2f3a4d 0%, #3b5998 100%)'\nexport const CHECK_PRIZES_BG = 'linear-gradient(139.73deg, #0A2647 0%, #1C335E 100%)'\nexport const FINISHED_ROUNDS_BG = 'linear-gradient(180deg, #aabbcc 0%, #9aaabc 100%)'\nexport const FINISHED_ROUNDS_BG_DARK = 'linear-gradient(180deg, #234567 0%, #3c5a7b 100%)'\n"],"names":["sharedStyles","theme","clipPath","clipFill","css","isDark","dark","light","colors","background","ConcaveContainer","styled","Box","ConvexContainer","ConvexTop","svg","width","height","defs","id","clipPathUnits","path","d","ConvexBottom","ConcaveTop","ConcaveBottom","Wrapper","dividerFill","index","ComponentWrapper","dividerPosition","dividerComponent","concave","showConvexTop","showConvexBottom","showConcaveTop","showConcaveBottom","BackgroundColor","Flex","attrs","className","padding","ChildrenWrapper","Container","mediaQueries","sm","lg","children","svgFill","hasCurvedDivider","concaveDivider","containerProps","innerProps","props","useMemo","CurvedDivider","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","selectLotteriesData","state","lottery","lotteriesData","maxNumberTicketsPerBuyOrClaimSelector","createSelector","maxNumberTicketsPerBuyOrClaim","maxNumberTicketsPerBuyOrClaimAsString","BigNumber","currentRoundSelector","currentRound","priceTicketInXfn","discountDivisor","amountCollectedInXfn","priceTicketInXfnAsString","discountDivisorAsString","amountCollectedInXfnAsString","lotterySelector","isTransitioning","currentLotteryId","userLotteryData","processedCurrentRound","useGetCurrentLotteryId","useSelector","useGetUserLotteriesGraphData","useGetLotteryGraphDataById","lotteryId","lotteryGraphDataByIdSelector","find","makeLotteryGraphDataByIdSelector","useLottery","endTime","status","useTranslation","t","LotteryStatus","nextEventTime","preCountdownText","postCountdownText","useWeb3React","account","dispatch","useAppDispatch","previousStatus","usePreviousValue","useEffect","fetchPublicLotteries","fetchUserLotteries","fetchCurrentLotteryId","interval","setInterval","clearInterval","requiresApproval","contract","spenderAddress","minimumRequired","response","allowance","gt","lt","lte","initialState","approvalState","confirmState","reducer","actions","type","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","useReducer","handlePreApprove","useRef","useCatchTxError","fetchWithCatchTxError","handleApprove","useCallback","receipt","handleConfirm","params","current","then","isApproving","isApproved","isConfirming","isConfirmed","hasApproveFailed","hasConfirmFailed","ButtonArrangement","StyledApproveConfirmButtonRow","md","Button","UIKitButton","iconAttrs","color","ChevronRight","ChevronRightIcon","ChevronBottom","ChevronDownIcon","spinnerIcon","AutoRenewIcon","spin","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","disabled","onClick","endIcon","undefined","isLoading","justifyContent","StyledButton","scale","mx","p","variant","InputsContainer","isDuplicate","focused","DigitInput","primaryDark","ticket","duplicateWith","updateTicket","useState","setFocused","containerRef","digit1","digit2","digit3","digit4","digit5","digit6","digitRefs","scrollInputIntoView","scrollIntoView","block","behavior","onPasteHandler","e","preventDefault","pasteContent","clipboardData","getData","length","test","filler","Array","fill","split","onFocusHandler","onBlurHandler","onChangeHandler","event","digitId","currentKey","parseInt","key","includes","newNumbers","numbers","nextDigitId","nextInput","focus","prevDigitId","Text","fontSize","ref","value","onKeyDown","placeholder","onChange","onFocus","onBlur","onPaste","inputMode","StyledModal","Modal","ScrollableContainer","cardBorder","totalCost","randomize","tickets","allComplete","onDismiss","useTheme","handleOnConfirm","title","headerBackground","gradients","cardHeader","onBack","mb","map","TicketInput","flexDirection","m","mt","ArrowBackIcon","parseRetrievedNumber","number","numberAsArray","splice","reverse","join","getDrawnDate","locale","endTimeInMs","Date","toLocaleDateString","dateTimeOptions","dateOptions","year","month","day","timeOptions","hour","minute","processLotteryResponse","lotteryData","userTickets","startTime","treasuryFee","firstTicketId","lastTicketId","finalNumber","xfnPerBracket","countWinnersPerBracket","rewardsBreakdown","numberOfTickets","userCurrentTickets","minNumber","maxNumber","existingTicketNumbers","generatedTicketNumbers","count","randomNumber","random","push","ticketsToBuy","filter","ticketNumber","getInitialState","amount","randomTicketsAsStringArray","generateTicketNumbers","toString","from","_","i","isComplete","action","payload","ticketId","newDuplicates","forEach","prevTicketId","dupsToUpdate","indexToRemove","findIndex","duplicate","updatedTicket","every","Error","ShortcutButtonsWrapper","isVisible","BuyingStage","useCallWithGasPrice","callWithGasPrice","setTicketsToBuy","discountValue","setDiscountValue","setTotalCost","ticketCostBeforeDiscount","setTicketCostBeforeDiscount","BUY","buyingStage","setBuyingStage","BIG_ZERO","maxPossibleTicketPurchase","setMaxPossibleTicketPurchase","maxTicketPurchaseExceeded","setMaxTicketPurchaseExceeded","userNotEnoughCake","setUserNotEnoughCake","lotteryContract","useLotteryV2Contract","useCake","reader","signer","useToast","toastSuccess","useTokenBalance","pulseChainTokens","balance","fetchStatus","stringifiedUserCake","userCake","toJSON","memoisedUserCake","cakePriceBusd","usePriceCakeBusd","hasFetchedBalance","FetchStatus","userCakeDisplayBalance","getFullDisplayBalance","TooltipComponent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","limitNumberByMaxTicketsPerBuy","getTicketCostAfterDiscount","numberTickets","times","plus","minus","div","getMaxTicketBuyWithDiscount","costAfterDiscount","ticketsBoughtWithDiscount","overallTicketBuy","validateInput","inputNumber","limitedNumberTickets","eq","maxPurchase","maxBalancePurchase","limitedMaxPurchase","maxPlusDiscountTickets","secondTicketDiscountBuy","getMaxPossiblePurchase","numberOfTicketsToBuy","costBeforeDiscount","discountBeingApplied","getNumTicketsByPercentage","percentage","percentageOfMaxTickets","toNumber","tenPercentOfBalance","twentyFivePercentOfBalance","fiftyPercentOfBalance","oneHundredPercentOfBalance","handleNumberButtonClick","toFixed","useTicketsReducer","reversedTicket","num","unshift","getTicketsForPurchase","useApproveConfirmTransaction","cakeContractReader","address","cakeContractApprover","MaxUint256","ToastDescriptionWithTx","txHash","transactionHash","ticketsForPurchase","fetchUserTicketsAndLotteries","disableBuying","EDIT","EditNumbersModal","alignItems","minWidth","mr","bold","img","src","alt","BalanceInput","isWarning","onUserInput","input","inputAsInt","inputAsBN","currencyValue","maxTickets","Skeleton","NumTicketsToBuyButton","small","textTransform","display","percentageAsBn","isNaN","percentageDiscount","HelpIcon","ml","borderTop","pt","ApproveConfirmButtons","SEQUENTIAL","ArrowForwardIcon","ConnectWalletButton","onPresentBuyTicketsModal","useModal","BuyTicketsModal","WaitIcon","ClockContainer","hoursLeft","setHoursLeft","calculateAndSetRemainingHours","currentUnixTimestampInSeconds","now","remainingSecondsUntilNextEvent","position","first","second","style","transform","textBox","textAlign","backgroundColor","borderRadius","border","margin","floatingStarsLeft","keyframes","floatingStarsRight","floatingTicketLeft","floatingTicketRight","mainTicketAnimation","TicketContainer","PrizeTotalBalance","Balance","gold","StyledBuyTicketButton","BuyTicketsButton","xs","ButtonWrapper","TicketSvgWrapper","Decorations","StarsDecorations","xl","prizeInBusd","prizeTotal","getBalanceNumber","ticketBuyIsDisabled","endTimeAsInt","useGetNextLotteryEvent","marginBottom","Heading","RoundClock","marginLeft","marginRight","my","prefix","decimals","lotteryAddress","getLotteryV2Address","fetchCakeRewardsForTickets","winningTickets","calls","cakeRewards","cakeTotal","error","winningTicket","roundId","rewardBracket","name","multicallv2","abi","lotteryV2Abi","reduce","accum","cakeReward","ticketsWithUnclaimedRewards","console","getRewardBracketByNumber","ticketNumAsArray","winningNumsAsArray","matchingNumbers","getWinningTickets","roundDataAndUserTickets","ticketsWithRewardBrackets","allWinningTickets","unclaimedWinningTickets","getWinningNumbersForRound","targetRoundId","targetRound","pastLottery","fetchUnclaimedUserRewards","rounds","roundsInRange","claimableRounds","roundsWithPossibleWinnings","roundsToCheck","idsToCheck","userTicketData","roundsWithTickets","roundDataAndWinningTickets","winningTicketsForPastRounds","roundsWithWinningTickets","toLowerCase","round","lastCheckableRoundId","MAX_LOTTERIES_REQUEST_SIZE","claimed","totalTickets","slice","NUM_ROUNDS_TO_CHECK_FOR_REWARDS","fetchUserTicketsForMultipleRounds","roundData","Promise","all","winningTicketData","Svg","viewBox","mask","maskUnits","x","y","rect","fillRule","clipRule","ellipse","cx","cy","rx","ry","BallTextWrapper","BallText","rotationTransform","ballsMap","pink","lilac","teal","aqua","green","yellow","BallWithNumber","size","BallComponent","rotateText","rotationValues","setRotationValues","numAsArray","uniqueId","StyledNumberWrapper","radii","default","RewardHighlighter","numberMatches","primary","localId","digit","_uniqueId","roundsToClaim","gasPrice","useGasPrice","loading","activeClaimIndex","setActiveClaimIndex","ceil","pendingBatchClaims","setPendingBatchClaims","xfnContract","useERC20","activeClaimData","dollarReward","rewardAsBalance","getBalanceAmount","dollarRewardAsBalance","claimTicketsCallData","ticketIds","brackets","shouldBatchRequest","handleProgressToNextClaim","handleClaim","callWithEstimateGas","handleBurn","fetchWithCatchTxErrorBurn","BURN_ADDRESS","handleBatchClaim","ticketBatches","transactionsToFire","receipts","requests","maxAsNumber","ticketIdsSlice","bracketsSlice","getTicketBatches","ticketBatch","claimNum","claimTotal","lineHeight","unit","PresentWonIcon","gap","pendingTx","pendingBurnTx","ModalContainer","StyledModalHeader","ModalHeader","FoxDecoration","showConfetti","confetti","particleCount","startVelocity","gravity","spread","origin","delay","$minWidth","ModalTitle","ModalCloseButton","ModalBody","ClaimPrizesInner","TopBox","dropdown","ScrollBox","TicketSkeleton","userWinningTickets","lotteryInfo","setLotteryInfo","allUserTickets","setAllUserTickets","isFetched","claimData","setUserWinningTickets","onPresentClaimModal","ClaimPrizesModal","fetchData","processedLotteryData","allTicketsWithWinningTicketInfo","ticketsSortedByWinners","fetchUserTicketsForOneRound","fetchLottery","_allTickets","_allWinningTickets","orderBy","WinningNumbers","Ticket","TicketNumber","InfoIcon","TooltipText","getFooter","roundStatus","isPreviousRound","PreviousRoundTicketsInner","CurrentRoundTicketsInner","getLanguageCodeFromLS","cakeAmount","numberWinners","isHistoricRound","isBurn","numberMatch","getRewardText","RewardsInner","lotteryNodeData","cakeToBurn","rewardsLessTreasuryFee","setState","amountLessTreasuryFee","getCakeRewards","bracket","shareAsPercentage","bracketIndex","RewardBracketDetail","Grid","StyledCard","Card","NextDrawWrapper","currentLanguage","onPresentViewTicketsModal","ViewTicketsModal","isExpanded","setIsExpanded","endTimeMs","endDate","isLotteryOpen","userTicketCount","ticketRoundText","youHaveText","ticketsThisRoundText","CardHeader","Boolean","toLocaleString","CardBody","maxWidth","CardFooter","RewardBrackets","ExpandableLabel","expanded","StyledTimerFlex","showTooltip","textSubtle","StyledTimerText","wrapperClassName","secondsRemaining","setSecondsRemaining","timer","setLotteryIsTransitioning","currentSeconds","prevSecondsRemaining","fetchCurrentLottery","useNextEventCountdown","getTimePeriods","Timer","setActiveIndex","activeIndex","ButtonMenu","onItemClick","ButtonMenuItem","StyledSmallDotIcon","SmallDotIcon","textDisabled","hasWon","endTimeAsDate","toLocaleTimeString","PrizeIcon","handleShowMoreClick","numUserRoundsRequested","handleHistoryRowClick","filteredForClaimable","sortedByRoundId","sort","roundA","roundB","px","pb","overflowY","finishedRound","FinishedRoundRow","StyledCardBody","StyledCardRibbon","CardRibbon","userDataForRound","userLotteryRound","useMatchBreakpoints","isLg","isXl","isXxl","isLargerScreen","currentLotteryIdAsInt","isLatestRound","totalTicketNumber","Number","youHadText","text","BunnyPlaceholderIcon","fetchedLotteryGraphData","setFetchedLotteryGraphData","lotteryGraphDataFromState","getGraphData","fetchedGraphData","getGraphLotteries","id_in","NaN","formatNumber","totalUsers","getTotalUsers","FooterExpanded","shouldShowRoundDetail","setShouldShowRoundDetail","selectedLotteryNodeData","setSelectedLotteryNodeData","selectedLotteryId","setSelectedLotteryId","clearState","cursor","PreviousRoundCardBody","WhiteBunny","FinishedRoundTable","getBody","PreviousRoundCardFooter","StyledInput","Input","StyledIconButton","IconButton","selectedRoundId","mostRecentRound","handleInputChange","handleArrowButtonPress","selectedRoundIdAsInt","pattern","currentTarget","validity","valid","ArrowLastIcon","StyledCardHeader","latestRoundId","setLatestRoundId","setSelectedRoundId","numRoundsFetched","mostRecentFinishedRoundId","fetchLotteryData","RoundSwitcher","target","unclaimedRewards","setUnclaimedRewards","setFetchStatus","fetchAllRewards","unclaimedRewardsResponse","TicketImage","TornTicketImage","useGetUnclaimedRewards","hasCheckedForRewards","setHasCheckedForRewards","hasRewardsToClaim","setHasRewardsToClaim","isFetchingRewards","lotteryIsNotClaimable","isCheckNowDisabled","MAX_USER_LOTTERIES_REQUEST_SIZE","setNumUserRoundsRequested","handleShowMoreUserRounds","fetchAdditionalUserLotteries","skip","boxShadow","LotteryPage","fetchPublicDataOnly","useFastRefreshEffect","batch","useFetchLottery","useStatusTransitions","historyTabMenuIndex","setHistoryTabMenuIndex","useShowMoreUserHistory","PageMeta","PageSection","Hero","marginTop","Countdown","NextDrawCard","CheckPrizesSection","HistoryTabMenu","AllHistoryCard","YourHistoryCard"],"sourceRoot":""}