{"version":3,"file":"static/chunks/6688-3f8cc2e306e60f85.js","mappings":"uIAAA,SAAAA,IAAA,IAAAC,GAAAC,EAAAA,EAAAA,GAAA,sBAAAF,EAAA,kBAAAC,GAAAA,EAK2B,IAAAE,EAAAC,EAAAA,GAAAA,IAAAA,WAAA,CAAAC,YAAA,kBAI3B,Y,2BAJ2BD,CAI3BJ,IAAqBM,EAAAA,IAAGH,EACnBI,aAAM,CACTC,EAAA,QAEsB,O,iFCDJ,IAPlB,SAAAC,GACM,OAASC,EAAAA,EAAAA,KAAWC,EAAAA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAA,CAAKC,QAAK,aAAAL,GAAA,CAC3BM,UAAGL,EAAAA,EAAAA,KAAA,QAAsNM,EAAA,2N,gFCKhN,IAPlB,SAAAP,GACM,OAASC,EAAAA,EAAAA,KAAWC,EAAAA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAA,CAAKC,QAAK,aAAAL,GAAA,CAC3BM,UAAGL,EAAAA,EAAAA,KAAA,QAAqSM,EAAA,0S,0DCPnT,SAAAhB,IAAA,IAAAC,GAAAC,EAAAA,EAAAA,GAAA,qHAAAF,EAAA,kBAAAC,GAAAA,EAIgC,IAAAgB,GAAAb,EAAAA,EAAAA,IAAAc,EAAAA,GAAAC,WAAA,CAAAd,YAAA,kBAEL,Y,2BAFKD,CAELJ,KAAG,SAAOoB,GAAe,IAChDC,EAAsEC,EAAaF,EAAAE,MAAAC,EAAAH,EAAAG,gBAErF,SAAAC,QAAA,OAAAF,QAAA,IAAAA,OAAA,EAAAA,EAAAG,SAAAF,EAAAD,EAAAG,OAAAF,GAAA,OAAAD,QAAA,IAAAA,GAAA,QAAAD,EAAAC,EAAAG,cAAA,IAAAJ,OAAA,EAAAA,EAAAK,eAEyB,O,gkBC4B3B,IAAMC,GAAiBvB,EAAAA,EAAAA,IAAOwB,EAAAA,IAAW,Y,2BAAlBxB,C,KAuDjByB,EACJ,Y,IAAGC,EAAe,EAAfA,gBAAiBC,EAAS,EAATA,U,OACpB,SAACC,G,OACD,SAACvB,GACC,IAAM,GAAcwB,EAAAA,EAAAA,MAAZC,QAEFC,EAAY1B,EAAM2B,cAAgB3B,EAAM4B,KAAKC,QAASC,EAAAA,EAAAA,IAAe9B,EAAM4B,KAAKC,QAChFE,EAAY/B,EAAM2B,cAAgB3B,EAAM4B,KAAKI,QAASF,EAAAA,EAAAA,IAAe9B,EAAM4B,KAAKI,QAEhFC,GAAkBC,EAAAA,EAAAA,IAAuB,OAAPT,QAAO,IAAPA,EAAAA,OAAWU,EAAWnC,EAAM4B,KAAKQ,gBAEnEC,GAAkBC,EAAAA,EAAAA,GAAetC,EAAM4B,KAAKQ,gBAE5CG,EArBqB,Y,IAAGN,EAAe,EAAfA,gBAAiBI,EAAe,EAAfA,gBACjD,OAASJ,GACLI,GACFG,EAAAA,GAAAA,mBAAwBH,EAAgBI,SAAUR,EAAgBQ,UAChE,IAAIC,EAAAA,GAAQT,EAAgBQ,SAAUJ,EAAgBI,eACtDN,EAgB0BQ,CAAuB,CAAEN,gBAAAA,EAAiBJ,gBAAAA,IAEhEW,GAAOC,EAAAA,EAAAA,UACX,W,OACEvB,EAAU,CACRW,gBAAAA,EACAL,KAAM5B,EAAM4B,KACZS,gBAAAA,MAEJ,CAACJ,EAAiBjC,EAAM4B,KAAMS,IAGWhB,GAAqB,OAArBA,EAAgBuB,GAAK,GAAzDE,EAAoCzB,EAAqB,GAAxC0B,EAAmB1B,EAAqB,GAE1D2B,EAlDe,Y,IAAGtB,EAAS,EAATA,UAAWK,EAAS,EAATA,UAAWe,EAAe,EAAfA,gBAAiBC,EAAe,EAAfA,gBAC3DE,GAAcC,EAAAA,EAAAA,IAAaxB,GAC3ByB,GAAcD,EAAAA,EAAAA,IAAanB,GAE3BqB,EACJN,GAAmBG,GACfI,EAAAA,EAAAA,GAAsBJ,EAAaK,WAAWR,EAAgBS,cAAc,KAC5E,KACAC,EACJT,GAAmBI,GACfE,EAAAA,EAAAA,GAAsBF,EAAaG,WAAWP,EAAgBQ,cAAc,KAC5E,KACN,OAAOH,GAAkBI,EAAiBJ,EAAiBI,EAAiB,KAsCpDC,CAAiB,CAAE/B,UAAAA,EAAWK,UAAAA,EAAWe,gBAAAA,EAAiBC,gBAAAA,IAEhF,OACE,SAACxB,GAAS,kBACJvB,GAAK,CACT0B,UAAWA,EACXK,UAAWA,EACXe,gBAAiBA,EACjBC,gBAAiBA,EACjBC,cAAeA,EACff,gBAAiBA,EACjBM,oBAAqBA,QAKvBmB,EAAetC,EAAoB,CACvCC,gBAnFyB,Y,IAAGO,EAAI,EAAJA,KAAMS,EAAe,EAAfA,gBAAiBJ,EAAe,EAAfA,gBAEjD,GAS0B,OATxBL,GACAS,GACAJ,GAEFO,EAAAA,GAAAA,mBAAwBH,EAAgBI,SAAUR,EAAgBQ,UAC9D,CACEb,EAAK+B,kBAAkB/B,EAAKC,OAAQQ,EAAiBJ,GAAiB,GACtEL,EAAK+B,kBAAkB/B,EAAKI,OAAQK,EAAiBJ,GAAiB,IAExE,MAACE,OAAWA,GAAU,GAE5B,MAAO,CAXL,EAS0B,GAT1B,EAS0B,KAyE5Bb,UAAW,Y,MAAiD,CAAEM,KAA5C,EAAJA,KAAsDK,gBAAjC,EAAfA,gBAAiEI,gBAAjC,EAAfA,oBAGjCuB,EAAqBxC,EAAoB,CAC7CC,gBAAiBwC,EAAAA,EACjBvC,UAAW,Y,IACCW,EADEA,EAAe,EAAfA,gBAAuB,OACnC6B,SAAyB,OAAf7B,QAAe,IAAfA,GAAyB,QAAzBA,EAAAA,EAAiBQ,gBAAQ,IAAzBR,OAAAA,EAAAA,EAA2B8B,eAwHzC,SAASC,EAAiB,G,IACxBpC,EADwB,EACxBA,KACAF,EAFwB,EAExBA,UACAK,EAHwB,EAGxBA,UACAe,EAJwB,EAIxBA,gBACAC,EALwB,EAKxBA,gBACAC,EANwB,EAMxBA,cACAf,EAPwB,EAOxBA,gBACAM,EARwB,EAQxBA,oBACGvC,GAAK,OATgB,EAUN,CATlB4B,OACAF,YACAK,YACAe,kBACAC,kBACAC,gBACAf,kBACAM,wBAGM0B,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IAExB,GAAQC,EAAAA,EAAAA,MAANC,EACFC,GAAWC,EAAAA,EAAAA,IAAS3C,GACqB4C,GAAAA,EAAAA,EAAAA,GAC7CH,EAAG,4EACH,CACEI,UAAW,WAHPC,EAAuCF,EAAvCE,UAAWC,EAA4BH,EAA5BG,QAASC,EAAmBJ,EAAnBI,eAMIC,GAAAA,EAAAA,EAAAA,WAAS,GAAlCC,EAAyBD,EAAe,GAA9BE,EAAeF,EAAe,GAE/C,OACE,UAACG,EAAAA,GAAI,kBAAKhF,GAAK,C,WACb,UAACiF,EAAAA,EAAI,CAACC,eAAe,gBAAgBC,KAAK,SAASC,QAAS,W,OAAML,GAAaD,IAAW/E,EAAE,O,WAC1F,UAACkF,EAAAA,EAAI,CAACI,cAAc,S,WAClB,UAACJ,EAAAA,EAAI,CAACK,WAAW,SAASC,GAAG,M,WAC3B,SAACC,EAAAA,GAAkB,CAAC9D,UAAWA,EAAWK,UAAWA,EAAW0D,KAAM,MACtE,SAAChF,EAAAA,EAAI,CAACiF,MAAI,EAACC,GAAG,M,SACVjE,GAAcK,EAA0C,GAAuBA,OAApBL,EAAUkE,OAAO,KAAoB,OAAjB7D,EAAU6D,SAA/D,SAACC,EAAAA,EAAI,C,SAAExB,EAAE,eAEtCJ,GACC,UAACxD,EAAAA,EAAI,CAACqF,MAAM,aAAaH,GAAG,M,UACzB,IAAI,cAGL,SAEN,SAAClF,EAAAA,EAAI,CAACsF,SAAS,OAAOD,MAAM,a,SACV,OAAf7D,QAAe,IAAfA,OAAAA,EAAAA,EAAiBsB,cAAc,KAEjCyC,OAAOC,SAASjD,KACf,SAACvC,EAAAA,EAAI,CAACyF,OAAK,EAACJ,MAAM,a,SAAc,KAG7B,OAHkC9C,EAAcmD,oBAAehE,EAAW,CAC3EiE,sBAAuB,EACvBC,sBAAuB,IACtB,cAGNvB,GAAW,SAACwB,EAAAA,EAAa,KAAM,SAACC,EAAAA,EAAe,OAGjDzB,IACC,UAAC0B,EAAAA,GAAU,CAACC,IAAI,MAAMC,MAAO,CAAEC,QAAS,Q,UACrC1C,EAAa,MACZ,UAAC/C,EAAc,C,WACb,UAAC0F,EAAAA,GAAQ,C,WACP,SAACC,EAAAA,EAAY,CAACpB,KAAK,OAAOqB,SAAUpF,KACpC,UAACjB,EAAAA,EAAI,CAACqF,MAAM,aAAaH,GAAG,M,UACzBtB,EAAE,iBAAkB,CAAE0C,MAAOrF,EAAUkE,SAAU,UAGrD9C,GACC,SAAC8D,EAAAA,GAAQ,C,UACP,SAACnG,EAAAA,EAAI,CAACkF,GAAG,M,SAAsB,OAAf7C,QAAe,IAAfA,OAAAA,EAAAA,EAAiBS,cAAc,OAGjD,OAKLU,EAAa,MACZ,UAAC/C,EAAc,C,WACb,UAAC0F,EAAAA,GAAQ,C,WACP,SAACC,EAAAA,EAAY,CAACpB,KAAK,OAAOqB,SAAU/E,KACpC,UAACtB,EAAAA,EAAI,CAACqF,MAAM,aAAaH,GAAG,M,UACzBtB,EAAE,iBAAkB,CAAE0C,MAAOhF,EAAU6D,SAAU,UAGrD7C,GACC,SAAC6D,EAAAA,GAAQ,C,UACP,SAACnG,EAAAA,EAAI,CAACkF,GAAG,M,SAAsB,OAAf5C,QAAe,IAAfA,OAAAA,EAAAA,EAAiBQ,cAAc,OAGjD,OAILe,IACC,UAACpD,EAAc,C,WACb,UAAC0F,EAAAA,GAAQ,C,WACP,UAACpG,EAAAA,EAAW,CAACI,IAAK8D,EAAWoB,MAAM,a,UAChCzB,EAAE,iBAAiB,OAErBO,GAAkBD,MAErB,UAAClE,EAAAA,EAAI,C,WAAEuG,EAAAA,EAAAA,GAAa1C,EAAS2C,SAAS,WAI1C,UAAC/F,EAAc,C,WACb,SAACT,EAAAA,EAAI,CAACqF,MAAM,a,SAAczB,EAAE,oBAC5B,SAAC5D,EAAAA,EAAI,C,SACF8B,EACG,GAAwF,OAAlD,SAAnCA,EAAoB2E,QAAQ,GAAgB,QAAU3E,EAAoB2E,QAAQ,GAAG,KACxF,SAIPjF,GAAmBO,EAAAA,GAAAA,YAAiBP,EAAgBQ,SAAU0E,EAAAA,MAC7D,UAAClC,EAAAA,EAAI,CAACI,cAAc,S,WAClB,SAAC+B,EAAAA,EAAM,CACLC,GAAIC,EAAAA,EACJC,GAAI,WAAoCC,QAAzBA,EAAAA,EAAAA,GAAW9F,GAAW,KAA2BuC,QAAxBuD,EAAAA,EAAAA,GAAWzF,IAA2C,OAA9BkC,EAAa,YAAc,IAC3FwD,QAAQ,UACRC,MAAM,OACNnC,GAAG,M,SAEFlB,EAAE,aAEL,SAAC+C,EAAAA,EAAM,CACLC,GAAIC,EAAAA,EACJC,GAAI,QAAiCC,QAAzBA,EAAAA,EAAAA,GAAW9F,GAAW,KAAyB,QAAtB8F,EAAAA,EAAAA,GAAWzF,GAAW,WAC3D0F,QAAQ,OACRE,WAAW,SAACC,EAAAA,EAAO,CAAC9B,MAAM,YAC1B4B,MAAM,O,SAELrD,EAAE,qCAUZ,IAAMwD,EAAsBnE,GA9PnC,SAAiC,G,IAC/B9B,EAD+B,EAC/BA,KACAF,EAF+B,EAE/BA,UACAK,EAH+B,EAG/BA,UACAe,EAJ+B,EAI/BA,gBACAC,EAL+B,EAK/BA,gBACAC,EAN+B,EAM/BA,cACAf,EAP+B,EAO/BA,gBACAM,EAR+B,EAQ/BA,oBAEM0B,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IAExB,GAAQC,EAAAA,EAAAA,MAANC,EACFC,GAAWC,EAAAA,EAAAA,IAAS3C,GACqB4C,GAAAA,EAAAA,EAAAA,GAC7CH,EAAG,4EACH,CACEI,UAAW,WAHPC,EAAuCF,EAAvCE,UAAWC,EAA4BH,EAA5BG,QAASC,EAAmBJ,EAAnBI,eAO5B,OACE,qB,SACG3C,GAAmBO,EAAAA,GAAAA,YAAiBP,EAAgBQ,SAAU0E,EAAAA,KAC7D,SAACnC,EAAAA,EAAI,C,UACH,SAACtF,EAAAA,EAAQ,C,UACP,UAAC8G,EAAAA,GAAU,CAACC,IAAI,O,WACd,SAACvF,EAAc,C,UACb,SAAC0F,EAAAA,GAAQ,C,UACP,SAACnG,EAAAA,EAAI,CAACqF,MAAM,YAAYJ,MAAI,E,SACzBrB,EAAE,mCAIT,UAACnD,EAAc,C,WACb,UAAC0F,EAAAA,GAAQ,C,WACP,SAACpB,EAAAA,GAAkB,CAAC9D,UAAWA,EAAWK,UAAWA,EAAW+F,QAAM,EAACrC,KAAM,MAC7E,UAAChF,EAAAA,EAAI,CAACyF,OAAK,EAACJ,MAAM,a,UACfpE,EAAUkE,OAAO,IAAE7D,EAAU6D,OAAO,aAGzC,SAACgB,EAAAA,GAAQ,C,UACP,UAAC3B,EAAAA,EAAI,CAACI,cAAc,SAASC,WAAW,W,WACtC,SAAC7E,EAAAA,EAAI,C,SAAEwB,EAAkBA,EAAgBsB,cAAc,GAAK,MAC3DyC,OAAOC,SAASjD,KACf,SAACvC,EAAAA,EAAI,CAACyF,OAAK,EAACJ,MAAM,a,SAAc,KAG7B,OAHkC9C,EAAcmD,oBAAehE,EAAW,CAC3EiE,sBAAuB,EACvBC,sBAAuB,IACtB,oBAKX,UAACG,EAAAA,GAAU,CAACC,IAAI,M,UACbnC,IACC,UAACpD,EAAc,C,WACb,UAACV,EAAAA,EAAW,CAACI,IAAK8D,EAAWoB,MAAM,aAAaI,OAAK,E,UAClD7B,EAAE,iBAAiB,OAErBO,GAAkBD,GACnB,UAAClE,EAAAA,EAAI,C,WAAEuG,EAAAA,EAAAA,GAAa1C,EAAS2C,SAAS,WAG1C,UAAC/F,EAAc,C,WACb,UAACT,EAAAA,EAAI,CAACqF,MAAM,aAAaI,OAAK,E,UAC3B7B,EAAE,iBAAiB,QAEtB,SAAC5D,EAAAA,EAAI,C,SAAE8B,EAAsB,GAAkC,OAA/BA,EAAoB2E,QAAQ,GAAG,KAAK,SAErEjD,EAAa,MACZ,UAAC/C,EAAc,C,WACb,UAACT,EAAAA,EAAI,CAACqF,MAAM,aAAaI,OAAK,E,UAC3B7B,EAAE,iBAAkB,CAAE0C,MAAOrF,EAAUkE,SAAU,OAEnD9C,GACC,SAAC8D,EAAAA,GAAQ,C,UACP,SAACnG,EAAAA,EAAI,CAACkF,GAAG,M,SAAsB,OAAf7C,QAAe,IAAfA,OAAAA,EAAAA,EAAiBS,cAAc,OAGjD,OAILU,EAAa,MACZ,UAAC/C,EAAc,C,WACb,UAACT,EAAAA,EAAI,CAACqF,MAAM,aAAaI,OAAK,E,UAC3B7B,EAAE,iBAAkB,CAAE0C,MAAOhF,EAAU6D,SAAU,OAEnD7C,GACC,SAAC6D,EAAAA,GAAQ,C,UACP,SAACnG,EAAAA,EAAI,CAACkF,GAAG,M,SAAsB,OAAf5C,QAAe,IAAfA,OAAAA,EAAAA,EAAiBQ,cAAc,OAGjD,kBAiBd,6BAkJKwE,EAAkCnE,EAAmBI,GAErDgE,EAAyB,SAAChI,G,IAE3BA,EACAA,EAF8BiI,GAAAA,EAAAA,EAAAA,IAAgB,CACtDC,OAAkB,QAAVlI,EAAAA,EAAM4B,YAAI,IAAV5B,OAAAA,EAAAA,EAAY6B,OACpBsG,OAAkB,QAAVnI,EAAAA,EAAM4B,YAAI,IAAV5B,OAAAA,EAAAA,EAAYgC,SAFhB,EAAkCiG,EAAhCG,iBAAqBC,GAAM,OAAKJ,EAGtC,CAHMG,qBAKR,OAAKA,GAGH,SAACjE,EAAAA,GAAAA,SAA4B,CAACmE,OAAO,QAAEF,iBAAAA,GAAqBC,G,UAC1D,SAACN,GAA+B,UAAK/H,MAJX,MAShC,KAAe0D,EAAaM,I,mECpZ5B,IAXC,SAAwBuE,G,IAGoBC,EAA4C,IAFjFC,GAAWC,EAAAA,EAAAA,KAAsB,OAALH,QAAK,IAALA,OAAAA,EAAAA,EAAOI,SAAUJ,EAAMK,aAAUzG,GAAW,GAExE0G,EAAiF,QAA5CL,GAAAA,EAAAA,EAAAA,IAAoBC,EAAU,sBAAc,IAA5CD,GAAoD,QAApDA,EAAAA,EAA8CM,cAAM,OAAK,QAAzDN,EAAAA,EAAuD,UAAE,WAAzDA,EAAAA,EAA2DzE,WAEtG,OAAOlB,EAAAA,EAAAA,UACL,WAAO0F,OAAK,OAALA,QAAK,IAALA,OAAAA,EAAAA,EAAOI,UAAWE,EAAiBE,EAAAA,GAAAA,cAA6BR,EAAOM,QAAkB1G,IAChG,CAACoG,EAAOM,M,+PCAL,SAASG,IACd,OAAOC,EAAAA,EAAAA,KAAwC,SAACC,G,OAAUA,EAAMC,QAG3D,SAASC,EACdC,EACAC,EACAC,EACAC,EACAC,G,IAwBiF7H,EAmE3E8H,EACAA,EApE2E9H,EAGlE,EA2BqG,EAzCvF+H,GAAAA,EAAAA,EAAAA,KAArBlI,EAAqBkI,EAArBlI,QAASmI,EAAYD,EAAZC,QAEwBZ,EAAAA,IAAjCa,EAAiCb,EAAjCa,iBAAkBC,EAAed,EAAfc,WAEpB,GAAQ1F,EAAAA,EAAAA,MAANC,EAGCzC,GAAqC,QAA7BmI,EAAAA,EAAAA,IAAQV,EAAWC,GAAU,MAGxCU,GAAwBC,EAAAA,EAAAA,GAAwB,OAAPxI,QAAO,IAAPA,EAAAA,OAAWU,EAAW,CAAK,OAAJP,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,iBACtE8H,EAAwE,OAArBF,QAAqB,IAArBA,OAAAA,EAAAA,EAAqD,QAA7BpI,EAAI,OAAJA,QAAI,IAAJA,GAAoB,QAApBA,EAAAA,EAAMQ,sBAAc,IAApBR,OAAAA,EAAAA,EAAsBgH,eAAO,IAA7BhH,EAAAA,EAAiC,IAEzF,IAACuI,EAAAA,EAAAA,IAAgBd,EAAWO,IAAUO,EAAAA,EAAAA,IAAgBb,EAAWM,IAAnF1B,EAAkB,EAA0E,GAApFC,EAAU,EAA0E,GAC7FuB,GAAS,EAId,IAHC,OADa,EACZU,EAAAA,EAAAA,WAAmBlC,IACpB,OAFa,EAEZkC,EAAAA,EAAAA,WAAmBjC,IACpB,OAHa,EAGZiC,EAAAA,EAAAA,UAAsB,OAAJxI,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,gBAHZ,GAOTiI,GAAc/H,EAAAA,EAAAA,GAAmB,OAAJV,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,gBACnCkI,EACJ1I,GACAyI,GACAH,GACAhC,GAEA1F,EAAAA,GAAAA,mBAAwB6H,EAAY5H,SAAUyH,EAAczH,UACxDsG,EAAAA,GAAAA,cAA6Bb,EAAQtG,EAAK+B,kBAAkBuE,EAAQmC,EAAaH,GAAe,GAAOzH,eACvGN,EAEAoI,EACJ3I,GACAyI,GACAH,GACA/B,GAEA3F,EAAAA,GAAAA,mBAAwB6H,EAAY5H,SAAUyH,EAAczH,UACxDsG,EAAAA,GAAAA,cAA6BZ,EAAQvG,EAAK+B,kBAAkBwE,EAAQkC,EAAaH,GAAe,GAAOzH,eACvGN,EACAqI,GAA8G,EAGnH,IAFC,OADkH,EACjHJ,EAAAA,EAAAA,WAAmBE,IACpB,OAFkH,EAEjHF,EAAAA,EAAAA,WAAmBG,GAF8F,GAKhHE,EAA2B,IAAI/H,EAAAA,GAAQ,IAAK,OAEhD,GAAImH,IAAqBO,EAAAA,EAAAA,kBACvBK,EAAkB,IAAI/H,EAAAA,GAAQoH,EAAY,YAGvC,GAAID,IAAqBO,EAAAA,EAAAA,WAC5B,GAAQ,OAAJxI,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,eAAgB,CACxB,IAAMsI,GAAoBC,EAAAA,EAAAA,GAAeb,EAAYlI,EAAKQ,gBACtDsI,GAAqBR,IAAkBQ,EAAkBE,YAAYV,KACvEO,EAAkB,IAAI/H,EAAAA,GAAQgI,EAAkBjI,SAAUyH,EAAczH,iBAKzE,GAAIiH,EAAOG,GAAmB,CACjC,IAAMa,GAAoBC,EAAAA,EAAAA,GAAeb,EAAYJ,EAAOG,IACtDgB,EAAiBL,EAAgBX,GACnCa,GAAqBG,IAAmBH,EAAkBE,YAAYC,KACxEJ,EAAkB,IAAI/H,EAAAA,GAAQgI,EAAkBjI,SAAUoI,EAAepI,WAI7E,IAwCI,EAyBAqI,EAjEEC,EACJb,GAAiBO,GAAmBA,EAAgBG,YAAY,KAC5D7B,EAAAA,GAAAA,cAA6BmB,EAAcpD,SAAU2D,EAAgBO,SAASd,EAAczH,UAAUA,eACtGN,EAEA8I,EACJ1B,GAAmBC,OACfrH,EACAoH,EACwB,QAAxBG,EAAAA,EAAOU,EAAAA,EAAAA,mBAAiB,IAAxBV,OAAAA,EAAAA,EAA0Bd,QACF,QAAxBc,EAAAA,EAAOU,EAAAA,EAAAA,mBAAiB,IAAxBV,OAAAA,EAAAA,EAA0Bd,QAE1BsC,EACJhD,GAAUuC,GAAmBA,EAAgBG,YAAY,MAAQN,EAC7DvB,EAAAA,GAAAA,cAA6Bb,EAAQuC,EAAgBO,SAASV,EAAgB7H,UAAUA,eACxFN,EAEAgJ,EACJhD,GAAUsC,GAAmBA,EAAgBG,YAAY,MAAQL,EAC7DxB,EAAAA,GAAAA,cAA6BZ,EAAQsC,EAAgBO,SAAST,EAAgB9H,UAAUA,eACxFN,EAEAiJ,EAAmB7B,GAAmBC,OAAkBrH,EAAYoH,EAAkB4B,EAAUD,EAEhGG,GAAuBxI,EAAAA,EAAAA,UAAQ,WACnC,GAAIjB,GAAQwJ,EACV,IACE,OAAOxJ,EAAK0J,gBAAgBF,GAAkB,GAC9C,MAAON,GACP,UAIH,CAAClJ,EAAMwJ,IAEJG,IAKF,EAuBH,IAtBC,OADE,EACDnB,EAAAA,EAAAA,kBAA0BK,IAC3B,OAFE,EAEDL,EAAAA,EAAAA,UAAkBW,IACnB,OAHE,EAGDX,EAAAA,EAAAA,WAAoBX,EAEjByB,GAAW3B,IAAoBC,GAAmB6B,EAClDtC,EAAAA,GAAAA,cACEb,EACA1F,EAAAA,GAAAA,IAASiI,EAAgBO,SAASV,EAAgB7H,UAAUA,SAAU4I,EAAqB5I,WAE5F8G,EAED2B,OADA/I,EAPA+I,IASJ,OAbE,EAaDd,EAAAA,EAAAA,WAAoBX,EAEjB0B,GAAW3B,IAAoBD,GAAmB8B,EAClDtC,EAAAA,GAAAA,cACEZ,EACA3F,EAAAA,GAAAA,IAASiI,EAAgBO,SAAST,EAAgB9H,UAAUA,SAAU4I,EAAqB5I,WAE5F+G,EAED2B,OADAhJ,EAPAgJ,GAdF,GAsCJ,OAZK1J,IACHqJ,EAAQzG,EAAE,qBAITkH,GAAcnB,EAAAA,EAAAA,YACdb,IAAoBgC,GAAcnB,EAAAA,EAAAA,aAClCZ,IAAoB+B,GAAcnB,EAAAA,EAAAA,eAEnCU,EAAa,OAALA,QAAK,IAALA,EAAAA,EAASzG,EAAE,oBAGd,CAAEzC,KAAAA,EAAM2J,cAAAA,GAAeT,MAAAA,EAAOG,eAAAA,EAAgBI,qBAAAA,GAGhD,SAASG,IAGd,IAAMC,GAAWC,EAAAA,EAAAA,MASjB,MAAO,CACLC,aARkBC,EAAAA,EAAAA,cAClB,SAACC,EAAc/B,GACb2B,GAASK,EAAAA,EAAAA,GAAU,CAAED,MAAAA,EAAO/B,WAAAA,OAE9B,CAAC2B,O,oYClKE,SAASM,IACd,OAAO9C,EAAAA,EAAAA,KAAwC,SAACC,G,OAAUA,EAAM8C,QAG3D,SAASC,EAAsBC,GAIpC,IAAMT,GAAWC,EAAAA,EAAAA,MAejB,MAAO,CACLS,eAdoBP,EAAAA,EAAAA,cACpB,SAAC9B,GACC2B,GAASK,EAAAA,EAAAA,IAAU,CAAED,MAAOzB,EAAAA,GAAAA,WAAkBN,WAAAA,EAAYoC,aAA6B,IAAhBA,OAEzE,CAACT,EAAUS,IAWXE,eAToBR,EAAAA,EAAAA,cACpB,SAAC9B,GACC2B,GAASK,EAAAA,EAAAA,IAAU,CAAED,MAAOzB,EAAAA,GAAAA,WAAkBN,WAAAA,EAAYoC,aAA6B,IAAhBA,OAEzE,CAACT,EAAUS,KASR,SAASG,EACdhD,EACAC,G,IAsJEgD,EACAA,EASqBA,EAIAA,EAhHmD,EAmFtExB,EACAyB,EAzHE,GAAc5C,EAAAA,EAAAA,KAAZlI,QAEF,GAAQ2C,EAAAA,EAAAA,MAANC,EAEkD0H,EAAAA,IAAlDlC,EAAkDkC,EAAlDlC,iBAAkBC,EAAgCiC,EAAhCjC,WAAY0C,EAAoBT,EAApBS,gBAEhCC,EAAiB5C,IAAqBO,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAG5EsC,GAA8C7J,EAAAA,EAAAA,UAClD,W,IAAO,E,OAAA,EAGN,IAFC,OADK,EACJuH,EAAAA,GAAAA,WAA4B,OAATf,QAAS,IAATA,EAAAA,OAAalH,IACjC,OAFK,EAEJiI,EAAAA,GAAAA,WAA4B,OAATd,QAAS,IAATA,EAAAA,OAAanH,GAF5B,IAIP,CAACkH,EAAWC,IAIYS,GAAmE,QAAnEA,EAAAA,EAAAA,IAAQ2C,EAAWtC,EAAAA,GAAAA,YAAmBsC,EAAWtC,EAAAA,GAAAA,aAAkB,GAAtFuC,EAAmB5C,EAAmE,GAA3EnI,EAAQmI,EAAmE,GAEvFM,GAAc/H,EAAAA,EAAAA,GAAmB,OAAJV,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,gBAEnC8J,EACJS,IAAcC,EAAAA,GAAAA,YACdC,QAAQxC,GAAe7H,EAAAA,GAAAA,MAAW6H,EAAY5H,SAAU0E,EAAAA,MACxD0F,QACEF,IAAcC,EAAAA,GAAAA,QACZhL,GACAY,EAAAA,GAAAA,MAAWZ,EAAKkL,SAASrK,SAAU0E,EAAAA,KACnC3E,EAAAA,GAAAA,MAAWZ,EAAKmL,SAAStK,SAAU0E,EAAAA,KAInC6F,GAAWC,EAAAA,EAAAA,IAA2B,OAAPxL,QAAO,IAAPA,EAAAA,OAAWU,EAAW,CACzDuK,EAAWtC,EAAAA,GAAAA,YACXsC,EAAWtC,EAAAA,GAAAA,cAEPkC,GAAoE,EAGzE,IAFC,OADwE,EACvElC,EAAAA,GAAAA,WAAmB4C,EAAS,KAC7B,OAFwE,EAEvE5C,EAAAA,GAAAA,WAAmB4C,EAAS,IAF2C,GAMpEtC,GAA0DC,EAAAA,EAAAA,GAC9Db,EACA4C,EAAW7C,IAEPqD,GAAwDrK,EAAAA,EAAAA,UAAQ,WACpE,GAAIqJ,EACF,OAAIM,GAAmBE,EAAWD,IACzB9B,EAAAA,EAAAA,GAAe6B,EAAiBE,EAAWD,SAEpD,EAEF,GAAI/B,EAAJ,CAEE,IAAMyC,EAA4C,OAAjBzC,QAAiB,IAAjBA,OAAAA,EAAAA,EAAmB0C,QAC3B,GAAU,OAAT/D,QAAS,IAATA,OAAAA,EAAAA,EAAW+D,QAAkB,OAAT9D,QAAS,IAATA,OAAAA,EAAAA,EAAW8D,SAAlDlF,EAAkB,EAAwC,GAAlDC,EAAU,EAAwC,GACjE,GAAID,GAAUC,GAAUgF,GAA4BvL,EAAM,CACxD,IAAMyL,EAAoBZ,IAAmBrC,EAAAA,GAAAA,WAAmBd,EAAYD,EACtEiE,EACJb,IAAmBrC,EAAAA,GAAAA,WACfxI,EAAK2L,QAAQrF,GAAQsF,MAAML,GAC3BvL,EAAK2L,QAAQpF,GAAQqF,MAAML,GACjC,OAAwB,OAAjBE,QAAiB,IAAjBA,OAAAA,EAAAA,EAAmBI,UACtB1E,EAAAA,GAAAA,cAA6BsE,EAAmBC,EAAqB7K,UACrE6K,WAKP,CAACpB,EAAaM,EAAiBE,EAAYD,EAAgB/B,EAAmBrB,EAAWC,EAAW1H,IAEjG2J,GAA4E1I,EAAAA,EAAAA,UAChF,W,IAAO,E,OAAA,EAGN,IAFC,OADK,EACJuH,EAAAA,GAAAA,WAAmBP,IAAqBO,EAAAA,GAAAA,WAAmBM,EAAoBwC,IAChF,OAFK,EAEJ9C,EAAAA,GAAAA,WAAmBP,IAAqBO,EAAAA,GAAAA,WAAmB8C,EAAkBxC,GAFzE,IAIP,CAACwC,EAAiBxC,EAAmBb,IAGjC6D,GAAQ7K,EAAAA,EAAAA,UAAQ,WACpB,GAAIqJ,EAAa,CACf,IAAQ,EAA6EX,EAA5EnB,EAAAA,GAAAA,YAAoC,EAAwCmB,EAAvCnB,EAAAA,GAAAA,YAC9C,OAAIuD,GAAmBC,EACd,IAAIC,EAAAA,GACTF,EAAgB7G,SAChB8G,EAAgB9G,SAChB6G,EAAgBlL,SAChBmL,EAAgBnL,eAGpB,EAEF,IAAMqL,EAA4B,OAATzE,QAAS,IAATA,OAAAA,EAAAA,EAAW+D,QACpC,OAAOxL,GAAQkM,EAAmBlM,EAAK2L,QAAQO,QAAoB3L,IAClE,CAACkH,EAAW6C,EAAatK,EAAM2J,IAG5BwC,GAAkBlL,EAAAA,EAAAA,UAAQ,WAC9B,IAAQ,EAA6E0I,EAA5EnB,EAAAA,GAAAA,YAAoC,EAAwCmB,EAAvCnB,EAAAA,GAAAA,YACT,GAAgB,OAAfuD,QAAe,IAAfA,OAAAA,EAAAA,EAAiBP,QAAwB,OAAfQ,QAAe,IAAfA,OAAAA,EAAAA,EAAiBR,SAA1EY,EAA8B,EAAoD,GAApEC,EAAgB,EAAoD,GACzF,GAAIrM,GAAQyI,GAAe2D,GAAgBC,EACzC,IACE,OAAOrM,EAAKsM,mBAAmB7D,EAAa2D,EAAcC,GAC1D,MAAOnD,GAEP,YADAqD,QAAQrD,MAAMA,MAKjB,CAACS,EAAe3J,EAAMyI,IAEnB9H,GAAsBM,EAAAA,EAAAA,UAAQ,WAClC,GAAIkL,GAAmB1D,EACrB,OAAO,IAAI3H,EAAAA,GAAQqL,EAAgBtL,SAAU4H,EAAY+D,IAAIL,GAAiBtL,YAG/E,CAACsL,EAAiB1D,IAIhB5I,IACHqJ,EAAQzG,EAAE,mBAGRsI,IAAcC,EAAAA,GAAAA,UAChB9B,EAAa,OAALA,QAAK,IAALA,EAAAA,EAASzG,EAAE,wBAGrB,IAgB0DqI,EAIAA,EApBlD,EAA6EnB,EAA5EnB,EAAAA,GAAAA,YAAoC,EAAwCmB,EAAvCnB,EAAAA,GAAAA,aAG5CuD,GACAC,IACgB,OAAhBtB,QAAgB,IAAhBA,GAAoC,QAApCA,EAAAA,EAAmBlC,EAAAA,GAAAA,mBAAiB,IAApCkC,OAAAA,EAAAA,EAAsC+B,QAAQ,MAC9B,OAAhB/B,QAAgB,IAAhBA,GAAoC,QAApCA,EAAAA,EAAmBlC,EAAAA,GAAAA,mBAAiB,IAApCkC,OAAAA,EAAAA,EAAsC+B,QAAQ,MAE9CvD,EAAa,OAALA,QAAK,IAALA,EAAAA,EAASzG,EAAE,qBAGhBkH,EAAcnB,EAAAA,GAAAA,aAAsBmB,EAAcnB,EAAAA,GAAAA,cACrDmC,EAAWlI,EAAE,oBAGXsJ,IAAmC,OAAhBrB,QAAgB,IAAhBA,GAAoC,QAApCA,EAAAA,EAAmBlC,EAAAA,GAAAA,mBAAiB,IAApCkC,OAAAA,EAAAA,EAAsCgC,SAASX,OACpEpB,EAAWlI,EAAE,gCAAiC,CAAEuB,OAAoC,QAA5B8G,EAAAA,EAAWtC,EAAAA,GAAAA,mBAAiB,IAA5BsC,OAAAA,EAAAA,EAA8B9G,UAGpFgI,IAAmC,OAAhBtB,QAAgB,IAAhBA,GAAoC,QAApCA,EAAAA,EAAmBlC,EAAAA,GAAAA,mBAAiB,IAApCkC,OAAAA,EAAAA,EAAsCgC,SAASV,MACpErB,EAAWlI,EAAE,gCAAiC,CAAEuB,OAAoC,QAA5B8G,EAAAA,EAAWtC,EAAAA,GAAAA,mBAAiB,IAA5BsC,OAAAA,EAAAA,EAA8B9G,UAGxF,MAAO,CACL6G,eAAAA,EACAC,WAAAA,EACA9K,KAAAA,EACA+K,UAAAA,EACAL,iBAAAA,EACAf,cAAAA,EACAmC,MAAAA,EACAxB,YAAAA,EACA6B,gBAAAA,EACAxL,oBAAAA,EACAuI,MAAAA,EACAyB,SAAAA,GAIJ,IAAMgC,EAAwB/L,EAAAA,GAAAA,OAAY,IAEpCgM,EAAsB,SAAC5M,EAAY6M,G,OACvC7M,GACA6M,GACA7M,EAAK8M,cAAcD,IACnBjM,EAAAA,GAAAA,OAAYZ,EAAK+M,UAAUF,GAAUhM,SAAU8L,IAiD1C,SAASK,EAAS,G,IAiLfC,EAAsC,EAqQ5CvC,EAUAA,EA/bFwC,EADuB,EACvBA,OACAzF,EAFuB,EAEvBA,UACAC,EAHuB,EAGvBA,UACA1H,EAJuB,EAIvBA,KACA0K,EALuB,EAKvBA,iBACAyC,EANuB,EAMvBA,iBACAC,EAPuB,EAOvBA,iBACAC,EARuB,EAQvBA,WAWM,GAAQ7K,EAAAA,EAAAA,MAANC,EACkCQ,GAAAA,EAAAA,EAAAA,WAAS,GAA5CqK,EAAmCrK,EAAe,GAAnCsK,EAAoBtK,EAAe,GACnDuK,GAAeC,EAAAA,EAAAA,IAAiBH,GACQrK,GAAAA,EAAAA,EAAAA,WAAS,GAAhDyK,EAAuCzK,EAAe,GAArC0K,EAAsB1K,EAAe,GACpBkH,EAAAA,IAAjClC,EAAiCkC,EAAjClC,iBAAkBC,EAAeiC,EAAfjC,WAEpB2C,EAAiB5C,IAAqBO,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAE5EsC,GAA8C7J,EAAAA,EAAAA,UAClD,W,IAAO,E,OAAA,EAGN,IAFC,OADK,EACJuH,EAAAA,GAAAA,WAA4B,OAATf,QAAS,IAATA,EAAAA,OAAalH,IACjC,OAFK,EAEJiI,EAAAA,GAAAA,WAA4B,OAATd,QAAS,IAATA,EAAAA,OAAanH,GAF5B,IAIP,CAACkH,EAAWC,IAERoB,GAA0DC,EAAAA,EAAAA,GAC9Db,EACA4C,EAAW7C,IAGP2F,GAAmB3M,EAAAA,EAAAA,UAAQ,WAC/B,GAAKiM,EAGL,GAAIpE,EAAJ,CACE,IAAMyC,EAA4C,OAAjBzC,QAAiB,IAAjBA,OAAAA,EAAAA,EAAmB0C,QAC3B,GAAU,OAAT/D,QAAS,IAATA,OAAAA,EAAAA,EAAW+D,QAAkB,OAAT9D,QAAS,IAATA,OAAAA,EAAAA,EAAW8D,SAAlDlF,EAAkB,EAAwC,GAAlDC,EAAU,EAAwC,GACjE,GAAID,GAAUC,GAAUgF,GAA4BvL,EAAM,CACxD,IAAMyL,EAAoBZ,IAAmBrC,EAAAA,GAAAA,WAAmBd,EAAYD,EACtEiE,EACJb,IAAmBrC,EAAAA,GAAAA,WACfxI,EAAK2L,QAAQrF,GAAQsF,MAAML,GAC3BvL,EAAK2L,QAAQpF,GAAQqF,MAAML,GACjC,OAAOE,EAAkBI,SACrB1E,EAAAA,GAAAA,cAA6BsE,EAAmBC,EAAqB7K,UACrE6K,WAKP,CAACwB,EAAQzF,EAAWC,EAAWmD,EAAgB/B,EAAmB9I,IAE/D6N,EACJR,EAAWxC,IAAmB+C,IAAoC,OAAhBA,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkB5E,YAAYqE,EAAWxC,KAGvFS,GAAwDrK,EAAAA,EAAAA,UAAQ,WACpE,OAAO4M,EAAwCR,EAAWxC,GAAkB+C,IAC3E,CAACC,EAAuCR,EAAYxC,EAAgB+C,IAEjEjE,GAA4E1I,EAAAA,EAAAA,UAChF,W,IAAO,E,OAAA,EAWN,IAVC,OADK,EACJuH,EAAAA,GAAAA,WAAoB2E,EAEjBlF,IAAqBO,EAAAA,GAAAA,WACrBM,EACAwC,OAHA/K,IAIJ,OANK,EAMJiI,EAAAA,GAAAA,WAAoB4E,EAEjBnF,IAAqBO,EAAAA,GAAAA,WACrB8C,EACAxC,OAHAvI,GAPC,IAYP,CAAC+K,EAAiBxC,EAAmBb,EAAkBkF,EAAkBC,IAGrEH,GAAgFhM,EAAAA,EAAAA,UACpF,W,IACsB0I,EACAA,EAFf,WAGN,IAFC,OADK,EACJnB,EAAAA,GAAAA,WAAkD,QAA/BmB,EAAAA,EAAcnB,EAAAA,GAAAA,mBAAiB,IAA/BmB,OAAAA,EAAAA,EAAiC6B,UACrD,OAFK,EAEJhD,EAAAA,GAAAA,WAAkD,QAA/BmB,EAAAA,EAAcnB,EAAAA,GAAAA,mBAAiB,IAA/BmB,OAAAA,EAAAA,EAAiC6B,SAFhD,IAIP,CAAC7B,IAGGmE,IAAcC,EAAAA,EAAAA,MAEdC,KACFb,KAAsBC,KAAsBzD,EAAcnB,EAAAA,GAAAA,eAAuBmB,EAAcnB,EAAAA,GAAAA,YAE7FyF,IACHD,IAAeZ,GAAsBzD,EAAcnB,EAAAA,GAAAA,YAAoBA,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAEvF0F,IAAyBjN,EAAAA,EAAAA,UAC7B,W,OAAMgM,EAAqBgB,MAC3B,CAACA,GAAuBhB,IAGpBkB,IAAYlN,EAAAA,EAAAA,UAAQ,WACxB,IAAK+M,GACH,OAAO,EAET,GAAKf,EAAqBhF,IAAsBgF,EAAqBpC,GAArE,CAIA,IAAKgD,EACH,OAAO,EAGT,IAAyB,GAAU,OAATpG,QAAS,IAATA,OAAAA,EAAAA,EAAW+D,QAAkB,OAAT9D,QAAS,IAATA,OAAAA,EAAAA,EAAW8D,SAAlDlF,EAAkB,EAAwC,GAAlDC,EAAU,EAAwC,GAEjE,OAAID,GAAUC,GAAU0G,EAAqBhF,IAAqBjI,EACzDiN,EAAqBpC,GAAgB4B,QAC1C5B,IAAmBrC,EAAAA,GAAAA,WACfxI,EAAK2L,QAAQrF,GAAQsF,MAAMqB,EAAqBhF,IAChDjI,EAAK2L,QAAQpF,GAAQqF,MAAMqB,EAAqBhF,UAJxD,KAQC,CACDR,EACAC,EACAmD,EACA5C,EACA4F,EACA7N,EACAgO,GACAf,IAGImB,IAAoBC,EAAAA,EAAAA,IACxBnB,IACGiB,IACDL,IACAI,KACsB,OAAtBA,SAAsB,IAAtBA,QAAAA,EAAAA,GAAwBhJ,WACxBlF,IACCgO,IAAe,CACdnH,SAAUiH,GACVQ,WAAY,oBACZC,OAAQ,CACNL,GAAuBhJ,SAAS8B,QAChCkH,GAAuBrN,SAASsB,WAChCnC,EAAKQ,eAAewG,UAG1B,CACEwH,QAAAA,SAAQC,GACNlC,QAAQrD,MAAMuF,MAKdC,IAAyBL,EAAAA,EAAAA,IAC7BnB,GACEY,KACCK,IACDlB,GACAA,EAAqBzE,EAAAA,GAAAA,aACrByE,EAAqBzE,EAAAA,GAAAA,aACrBxI,GACAgO,IAAe,CACbnH,SAAUiH,GACVQ,WAAY,+BACZC,OAAQ,CACNtB,EAAqBzE,EAAAA,GAAAA,YAAkBtD,SAAS8B,QAChDiG,EAAqBzE,EAAAA,GAAAA,YAAkBtD,SAAS8B,QAChDiG,EAAqBzE,EAAAA,GAAAA,YAAkB3H,SAASsB,WACV,QAAtC8K,EAAAA,EAAqBzE,EAAAA,GAAAA,mBAAiB,IAAtCyE,GAAgD,QAAhDA,EAAAA,EAAwCpM,gBAAQ,WAAhDoM,EAAAA,EAAkD9K,WAClDnC,EAAKQ,eAAewG,UAG1B,CACEwH,QAAAA,SAAQC,GACNlC,QAAQrD,MAAMuF,MAKdE,IAAiB1N,EAAAA,EAAAA,UACrB,W,IAEgCyN,EAA4CN,EAC3CM,EAA6CN,EAEtEM,EACAN,EALN,QAAuB,OAAtBM,SAAsB,IAAtBA,QAAAA,EAAAA,GAAwB9Q,QAAyB,OAAjBwQ,SAAiB,IAAjBA,QAAAA,EAAAA,GAAmBxQ,QAAS,CAC3DgR,aAAcZ,GAAyC,QAA3BU,EAAAA,GAAuB9Q,YAAI,IAA3B8Q,OAAAA,EAAAA,EAA6BE,aAAqC,QAAtBR,EAAAA,GAAkBxQ,YAAI,IAAtBwQ,OAAAA,EAAAA,EAAwBQ,aAChGC,cAAeb,GAAyC,QAA3BU,EAAAA,GAAuB9Q,YAAI,IAA3B8Q,OAAAA,EAAAA,EAA6BG,cAAsC,QAAtBT,EAAAA,GAAkBxQ,YAAI,IAAtBwQ,OAAAA,EAAAA,EAAwBS,cAClGC,aAAcd,GACiB,QAA3BU,EAAAA,GAAuB9Q,YAAI,IAA3B8Q,OAAAA,EAAAA,EAA6BK,YACP,QAAtBX,EAAAA,GAAkBxQ,YAAI,IAAtBwQ,OAAAA,EAAAA,EAAwBY,iBAAuC,OAAtBd,SAAsB,IAAtBA,QAAAA,EAAAA,GAAwBhJ,SAAS8B,YAElF,CAACgH,GAAaU,GAAuB9Q,KAAMwQ,GAAkBxQ,KAA4B,OAAtBsQ,SAAsB,IAAtBA,QAAAA,EAAAA,GAAwBhJ,SAAS8B,UAGhGiI,IAAwBhO,EAAAA,EAAAA,UAAQ,WACpC,OAAIyN,GAAuB9Q,KAClB8Q,GAAuB9Q,KAAKmR,WAEhC/O,GAASiN,EAAqBzE,EAAAA,GAAAA,aAAsByE,EAAqBzE,EAAAA,GAAAA,YAG1DxI,EAAKC,OAAOiP,OAAOjC,EAAqBzE,EAAAA,GAAAA,YAAkBtD,UAErEtE,EAAAA,GAAAA,YACLA,EAAAA,GAAAA,SAAcqM,EAAqBzE,EAAAA,GAAAA,YAAkB3H,SAAUb,EAAKmL,SAAStK,UAC7ED,EAAAA,GAAAA,SAAcqM,EAAqBzE,EAAAA,GAAAA,YAAkB3H,SAAUb,EAAKkL,SAASrK,WAG1ED,EAAAA,GAAAA,YACLA,EAAAA,GAAAA,SAAcqM,EAAqBzE,EAAAA,GAAAA,YAAkB3H,SAAUb,EAAKkL,SAASrK,UAC7ED,EAAAA,GAAAA,SAAcqM,EAAqBzE,EAAAA,GAAAA,YAAkB3H,SAAUb,EAAKmL,SAAStK,gBAZ/E,IAcC,CAACb,EAAM0O,GAAuB9Q,KAAMqP,IAEjCkC,GAAkBnB,GAEpBiB,GACAzG,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,WAHAyF,GAIEmB,GAAoBD,KAAmB3G,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAE7E6G,IAA2CpO,EAAAA,EAAAA,UAC/C,W,IACoB6J,EACGA,EAFhB,WAGN,IAFC,OADK,EACJqE,GAA2C,QAA1BrE,EAAAA,EAAWqE,WAAe,IAA1BrE,OAAAA,EAAAA,EAA4BU,UAC9C,OAFK,EAEJ4D,GAAiD,QAA7BtE,EAAAA,EAAWsE,WAAkB,IAA7BtE,OAAAA,EAAAA,EAA+BU,SAF/C,IAIP,CAACV,EAAYsE,GAAmBD,KAG5BG,IAAsBrO,EAAAA,EAAAA,UAC1B,W,OAAO+M,GAAcU,GAAuBxF,MAAQkF,GAAkBlF,QACtE,CAAC8E,GAAaU,GAAuBxF,MAAOkF,GAAkBlF,QAG1DqG,IAAuBtO,EAAAA,EAAAA,UAC3B,W,OAAO+M,GAAcU,GAAuBc,OAASpB,GAAkBoB,SACvE,CAACxB,GAAaU,GAAuBc,OAAQpB,GAAkBoB,SAG3DC,IAAcxO,EAAAA,EAAAA,UAAQ,WAC1B,GAAK0N,GAAL,CAGA,IAAMe,EAAgBvI,EAAAA,GAAAA,cACpBkI,GAAWF,IACXR,GAAeC,aAAazM,YAExBwN,EAAiBxI,EAAAA,GAAAA,cACrBkI,GAAWD,IACXT,GAAeE,cAAc1M,YAEzByN,EAAW,IAAI3D,EAAAA,GACnBoD,GAAWF,IACXE,GAAWD,IACXpP,EAAKC,OAAOiP,OAAOG,GAAWF,KAAmBnP,EAAKkL,SAASrK,SAAWb,EAAKmL,SAAStK,SACxFb,EAAKC,OAAOiP,OAAOG,GAAWF,KAAmBnP,EAAKmL,SAAStK,SAAWb,EAAKkL,SAASrK,UAE1F,OAAOgP,EAAAA,EAAAA,IAAmBD,EAAUF,EAAeC,MAClD,CAAC3P,EAAMoP,GAAmBD,GAAgBE,GAAYV,KAgBnDmB,IAdoB7O,EAAAA,EAAAA,UAAQ,WAChC,QAAK0N,IAIE/N,EAAAA,GAAAA,SACLA,EAAAA,GAAAA,OACEZ,EAAK+M,UAAUsC,GAAWF,KAAiBtO,SAC3CD,EAAAA,GAAAA,OAAY+N,GAAeC,aAAazM,aAE1CwK,KAED,CAAC3M,EAAMqP,GAAYV,GAAgBQ,MAEKG,GAAsB,EAAIG,IAAcM,EAAAA,EAAAA,IAAgBN,IAAe,EAEzEpF,GAAAA,GAAsB,GAAvDE,GAAiCF,GAAjCE,cAAeC,GAAkBH,GAAlBG,cAEjBwF,IAAoB/O,EAAAA,EAAAA,UACxB,W,OA3UJ,SACEjB,EACAiQ,EACAC,GAEA,GAAKA,GAOL,GAAID,GAAkBC,EAAgB,CACpC,IAAMC,EAAgBvD,EAAoB5M,EAAMiQ,EAAe/K,UAE/D,IAAKiL,EACH,OAGF,IAAqBnQ,GAAyF,OAAzFA,EAAKoQ,eAAejJ,EAAAA,GAAAA,cAA6B8I,EAAe/K,SAAUiL,IAAe,GAApGE,GAAWrQ,EAAyF,GAAzFA,EAAyF,IAE9G,OAAOY,EAAAA,GAAAA,IACLuP,EACAvP,EAAAA,GAAAA,OACEA,EAAAA,GAAAA,SAAcsP,EAAerP,SAAUwP,EAAQtD,UAAUkD,EAAe/K,UAAUrE,UAClFwP,EAAQtD,UAAUmD,EAAehL,UAAUrE,iBAnB/C,GAAIoP,EAAgB,CAClB,IAAME,EAAgBvD,EAAoB5M,EAAMiQ,EAAe/K,UAC/D,OAAOiL,GAAiBvP,EAAAA,GAAAA,SAAcuP,EAAevP,EAAAA,GAAAA,OAAY,KAoUjE0P,CACEtQ,EACAiN,EAAqBkC,IACrBnB,GAAcf,EAAqBmC,SAAqB7O,KAE5D,CAACP,EAAMiN,EAAsBkC,GAAgBnB,GAAaoB,KAGtDmB,IAAuBvG,EAAAA,EAAAA,cAAY,WACvC,GAAIgG,IACE3C,EAAW8B,IAAiB,C,IAK5B9B,EAJImD,GAAcC,EAAAA,EAAAA,aAClB7P,EAAAA,GAAAA,YAAiByM,EAAW8B,IAAgBtO,SAAUmP,IAClDA,GAAkB7N,WAClBkL,EAAW8B,IAAgBtO,SAASsB,WACd,QAA1BkL,EAAAA,EAAW8B,WAAe,IAA1B9B,OAAAA,EAAAA,EAA4BnI,SAASwL,UAGnCvB,KAAmB3G,EAAAA,GAAAA,WACrB+B,GAAciG,GAEdhG,GAAcgG,MAInB,CAACnD,EAAY2C,GAAmBzF,GAAeC,GAAe2E,KAE3D1G,IAAc/H,EAAAA,EAAAA,GAAmB,OAAJV,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,gBAGnC2L,IAAkBlL,EAAAA,EAAAA,UAAQ,WAC9B,GACGjB,GACAqP,GAAWF,KACXE,GAAWD,MACG,OAAdT,SAAc,IAAdA,QAAAA,EAAAA,GAAgBC,gBACF,OAAdD,SAAc,IAAdA,QAAAA,EAAAA,GAAgBE,gBAChB5B,EAAqBkC,KAKpBnP,GAAQyI,GACV,IAEE,IAAMkI,EAAqB1D,EAAqBkC,IAAgBnG,YAC9D2F,GAAeC,aAAazM,YAE1B8K,EAAqBkC,IAAgByB,SACnCzJ,EAAAA,GAAAA,cAA6BkI,GAAWF,IAAiBR,GAAeC,aAAazM,aAEvF8K,EAAqBkC,IAErB0B,EAAqB1J,EAAAA,GAAAA,cACvBkI,GAAWD,IACXT,GAAeE,cAAc1M,YAO/B,OAJI8K,EAAqBmC,MACvByB,EAAqBA,EAAmBrE,IAAIS,EAAqBmC,MAElDpP,EAAKsM,mBAAmB7D,GAAakI,EAAoBE,GAE1E,MAAO3H,IAEP,YADAqD,QAAQrD,MAAMA,OAKjB,CACDlJ,EACAqP,GACAF,GACAC,GACc,OAAdT,SAAc,IAAdA,QAAAA,EAAAA,GAAgBC,aACF,OAAdD,SAAc,IAAdA,QAAAA,EAAAA,GAAgBE,cAChB5B,EACAxE,KAGIqI,IAAwB7P,EAAAA,EAAAA,UAC5B,W,OACEgM,EAAqBkC,KACrBvO,EAAAA,GAAAA,SAAcqM,EAAqBkC,IAAgBtO,SAAUkQ,EAAAA,MAC/D,CAAC5B,GAAgBlC,IAEb+D,IAAsB/P,EAAAA,EAAAA,UAC1B,W,OACEgM,EAAqBmC,KACrBxO,EAAAA,GAAAA,SAAcqM,EAAqBmC,IAAmBvO,SAAUkQ,EAAAA,MAClE,CAAC3B,GAAmBnC,IAGhBtM,IAAsBM,EAAAA,EAAAA,UAAQ,WAClC,GAAIkL,IAAmB1D,GACrB,OAAO,IAAI3H,EAAAA,GAAQqL,GAAgBtL,SAAU4H,GAAY+D,IAAIL,IAAiBtL,YAG/E,CAACsL,GAAiB1D,KAEfwI,GA9YR,SAA6BC,G,IASpBC,EAAAA,EARDC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KACTC,GAAcf,EAAAA,EAAAA,aAAYW,EAAWK,EAAAA,GAAAA,KAAeL,GAAUM,IAAI,UAAY,KAC9EC,EAA8BT,GAAcnI,EAAAA,EAAAA,GAAeyI,EAAaF,QAAU/Q,EAClFqR,EAA8C,SAAtB,OAAXV,QAAW,IAAXA,OAAAA,EAAAA,EAAahM,SAASlB,QAEnCmN,GAAuBU,EAAAA,EAAAA,IAAgBF,EAA6BC,EAAa,KAAkB,OAAXV,QAAW,IAAXA,OAAAA,EAAAA,EAAahM,UAE3G,OAA6E,QAAtEiM,EAAoB,OAApBA,QAAoB,IAApBA,GAAkC,QAAlCA,EAAAA,EAAsBW,oBAAY,IAAlCX,OAAAA,EAAAA,EAAoCnI,YAAuB,OAAXkI,QAAW,IAAXA,OAAAA,EAAAA,EAAarQ,iBAAS,IAAtEsQ,GAAAA,EAqYaY,EAClB9Q,EAAAA,EAAAA,UACE,W,OACE0N,GACIxH,EAAAA,GAAAA,cAA6BkI,GAAWF,IAAiBR,GAAeC,aAAazM,YACrF,OACN,CAACgN,GAAgBE,GAAYV,OAIjCqD,EAAAA,EAAAA,YAAU,YAELtE,GACD/D,EAAcwF,KACda,KACCxC,GACDF,IACCU,IAEGpN,EAAAA,GAAAA,YAAiB+I,EAAcwF,IAAgBtO,SAAUmP,MAC3DO,KACA5C,GAAmB,MAGtB,CACD4C,GACAjD,EACA0C,GACArG,EACA6D,EACAQ,GACAE,GACAiB,GACAzB,IAGF,IAIIxE,GAeO+D,GAAAA,GAS0CA,GAAAA,GA5B/CgF,IAAkBjI,EAAAA,EAAAA,cAAY,WAClCuD,GAAiB,KAChB,KAIC+B,KACFpG,GAAQzG,EAAE,gCAGRqO,IAA0B9C,IAAegD,MAC3C9H,GAAQzG,EAAE,0BAIVwK,EAAqBkC,MACW,QAAhCzE,EAAAA,EAAiByE,WAAe,IAAhCzE,OAAAA,EAAAA,EAAkCgC,SAASO,EAAqBkC,SAEhEjG,GAAQzG,EAAE,+BAAgC,CACxCkE,MAA4D,QAArDsG,GAAoC,QAApCA,GAAAA,EAAqBkC,WAAe,IAApClC,QAAAA,EAAAA,GAAsC/H,SAASlB,cAAM,IAArDiJ,GAAAA,GAAyD,MAKlEA,EAAqBmC,KACrBpB,KACmC,QAAnCtD,EAAAA,EAAiB0E,WAAkB,IAAnC1E,OAAAA,EAAAA,EAAqCgC,SAASO,EAAqBmC,QAEnElG,GAAQzG,EAAE,+BAAgC,CAAEkE,MAA+D,QAAxDsG,GAAuC,QAAvCA,GAAAA,EAAqBmC,WAAkB,IAAvCnC,QAAAA,EAAAA,GAAyC/H,SAASlB,cAAM,IAAxDiJ,GAAAA,GAA4D,MAGjH,MAAO,CACLiF,gBAAiB3C,KAAyB4C,EAAAA,GAAAA,QAC1C7C,oBAAAA,GACAX,eAAAA,GACAzF,MAAAA,GACAiD,gBAAAA,GACAxL,oBAAAA,GACAgJ,cAAAA,EACAwF,eAAAA,GACAC,kBAAAA,GACAU,cAAAA,GACAS,qBAAAA,GACAvC,YAAAA,GACAG,UAAAA,GACA8C,YAAAA,GACApD,sCAAAA,EACAoE,gBAAAA,M,8EC/uBS7M,EAAe,SAC1BgN,EACAC,GAOA,IAA8EA,EAAAA,GAAW,CAAEC,SAAU,WAAW,EAAlCD,EAAtEC,SAAAA,OAAQ,IAAG,YAAS,EAAEC,EAAgDF,EAAhDE,iBAAkBC,EAA8BH,EAA9BG,eAAgBC,EAAcJ,EAAdI,UAChE,GAAe,IAAXL,EACF,OAAIK,EACK,IAEF,OAET,IAAKL,EAAQ,MAAO,IACpB,GAAIG,GAAoBH,EAASG,EAC/B,MAAO,IAAqB,OAAjBA,GAEb,GAAIH,EAAS,IAAMI,EACjB,OAAoCJ,EAnCzB9M,QAAQ,GAAGoN,MAAM,sBAAsB,GAsCpD,IAAIC,EAAY,EACZH,IACFG,EAAYP,EAAS,EAAI,EAAI,GAG/B,IAAIQ,EAAS,KAA2B,OAAtB,IAAIC,OAAOF,GAAW,KAEvB,aAAbL,IACFM,EAAS,OAA6B,OAAtB,IAAIC,OAAOF,KAGzBF,GAAaL,EAAS,MACxBQ,EAAS,KAGX,IAAME,EAAsBpR,WAAW0Q,EAAO9M,QAAQqN,IAGtD,OAAOI,IAAQD,GAAqBF,OAAOA,GAAQI,gB,8PC+B9C,SAASC,EAAmB,G,IAAEC,EAAF,EAAEA,kBAAmB1M,EAArB,EAAqBA,iBAAkB3F,EAAvC,EAAuCA,SAAUsS,EAAjD,EAAiDA,mBAClF,OAAOC,EAAAA,EAAAA,KACW,OAAhB5M,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkB6M,oBAAqBH,GAAuBrS,EAC1D,CAAC,eAAgC,OAAhB2F,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkB6M,kBAAmBxS,GACtD,MACJ,mB,IAKgCsS,EAJb3M,EAAX8M,EAEAtS,EAEAuS,E,iEAAkB,OAJlBD,GAA2B,OAAhB9M,QAAgB,IAAhBA,GAAwB,QAAxBA,EAAAA,EAAkBvG,cAAM,IAAxBuG,OAAAA,EAAAA,EAA0BQ,YAA6B,OAAjBkM,QAAiB,IAAjBA,OAAAA,EAAAA,EAAmBlM,SAEpEhG,EAAOsS,EAAW,CAAC,EAAG,EAAGzS,G,CAAa,EAAG,EAAGA,GAE1B,C,GAAMsS,EAAAA,GAAmBK,OAAnBL,MAAAA,GAA0B,OAAGnS,K,OAE3D,OAFMuS,EAAkB,SAEjB,C,EAAApM,EAAAA,GAAAA,cAA6B+L,EAAmBK,Y,eCpEtD,SAASE,EAAchM,EAAkBC,G,IAGdqB,EAFiBzG,GAAAA,EAAAA,EAAAA,YAAWC,EAAAA,IAApDiE,EAAyClE,EAAzCkE,iBAAkB2M,EAAuB7Q,EAAvB6Q,mBAEpBO,EAAwD,QAA9B3K,GAAAA,EAAAA,EAAAA,GAAe,IAAKtB,UAAU,IAA9BsB,OAAAA,EAAAA,EAAgClI,SAExDjD,EAAgCqV,EAAmB,CACzDC,kBAAmBxL,EACnB7G,SAAiC,OAAvB6S,QAAuB,IAAvBA,OAAAA,EAAAA,EAAyBvR,WACnCgR,mBAAAA,EACA3M,iBAAAA,IAJM5I,KAOFoC,GAAOiB,EAAAA,EAAAA,UAAQ,WACnB,IAAM0S,EAAeD,GAA2BE,EAE1CC,EAAc1M,EAAAA,GAAAA,cAA6BO,EAAW,KAEtDrG,EAAcsS,EAChB,IAAI1H,EAAAA,GAAMxE,EAAWC,EAAWgM,EAAyBE,EAAsB/S,UAC/EgT,EAEJ,MAAO,CACLrT,gBAAgC,OAAhBgG,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkBhG,iBAAkB,KACpDsT,aAAc,GACd7T,OAAQwH,EACRrH,OAAQsH,EACRiE,QAAS,SAAChF,GACRgN,OAAAA,GAAqB,OAALhN,QAAK,IAALA,OAAAA,EAAAA,EAAOK,YAAqB,OAATS,QAAS,IAATA,OAAAA,EAAAA,EAAWT,SAAU3F,EAAcA,EAAY0S,SAAYF,GAChGxS,YAAa,W,OAAMA,GACnBE,YAAa,W,OAAMF,EAAY0S,UAE/B5I,SAAU0I,EACV3I,SAAU2I,EACV9R,kBAAmB,W,OAAM8R,MAE1B,CAAiB,OAAhBrN,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkBhG,eAAgBiH,EAAWC,EAAWgM,EAAyBE,IAErF,OAAKpN,EAIE,CAAEuE,UAAWC,EAAAA,GAAAA,OAAkBhL,KAAAA,GAH7B,CAAE+K,UAAWC,EAAAA,GAAAA,WAAsBhL,UAAMO,GA+B7C,SAASyT,EACdvM,EACAC,G,IAqIEgD,EACAA,EASqBA,EAIAA,EAzGmD,EA8EtExB,EACAyB,EAuBsDG,EAIAA,EArIpD,GAAc/C,EAAAA,EAAAA,KAAZlI,QAEF,GAAQ2C,EAAAA,EAAAA,MAANC,EAEkD0H,GAAAA,EAAAA,EAAAA,MAAlDlC,EAAkDkC,EAAlDlC,iBAAkBC,EAAgCiC,EAAhCjC,WAAY0C,EAAoBT,EAApBS,gBAEhCC,EAAiB5C,IAAqBO,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAAmBA,EAAAA,GAAAA,WAG5EsC,GAA8C7J,EAAAA,EAAAA,UAClD,W,IAAO,E,OAAA,EAGN,IAFC,OADK,EACJuH,EAAAA,GAAAA,WAA4B,OAATf,QAAS,IAATA,EAAAA,OAAalH,IACjC,OAFK,EAEJiI,EAAAA,GAAAA,WAA4B,OAATd,QAAS,IAATA,EAAAA,OAAanH,GAF5B,IAIP,CAACkH,EAAWC,IAIc+L,EAAAA,EAAuB,OAAThM,QAAS,IAATA,OAAAA,EAAAA,EAAW+D,QAAkB,OAAT9D,QAAS,IAATA,OAAAA,EAAAA,EAAW8D,SAAjET,EAAoB0I,EAApB1I,UAAW/K,EAASyT,EAATzT,KAEbyI,GAAc/H,EAAAA,EAAAA,GAAmB,OAAJV,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,gBAEnC8J,EACJS,IAAcC,EAAAA,GAAAA,YAAwBC,QAAQxC,GAAe7H,EAAAA,GAAAA,MAAW6H,EAAY5H,SAAU0E,EAAAA,KAG1F6F,GAAWC,EAAAA,EAAAA,IAA2B,OAAPxL,QAAO,IAAPA,EAAAA,OAAWU,EAAW,CAACkH,EAAWC,IACjEgD,GAAoE,EAGzE,IAFC,OADwE,EACvElC,EAAAA,GAAAA,WAAmB4C,EAAS,KAC7B,OAFwE,EAEvE5C,EAAAA,GAAAA,WAAmB4C,EAAS,IAF2C,GAMpEtC,GAA0DC,EAAAA,EAAAA,GAC9Db,EACA4C,EAAW7C,IAGPqD,GAAwDvC,EAAAA,EAAAA,GAC5D6B,EACAE,EAAWD,IAGPlB,GAA4E1I,EAAAA,EAAAA,UAChF,W,IAAO,E,OAAA,EAGN,IAFC,OADK,EACJuH,EAAAA,GAAAA,WAAmBP,IAAqBO,EAAAA,GAAAA,WAAmBM,EAAoBwC,IAChF,OAFK,EAEJ9C,EAAAA,GAAAA,WAAmBP,IAAqBO,EAAAA,GAAAA,WAAmB8C,EAAkBxC,GAFzE,IAIP,CAACwC,EAAiBxC,EAAmBb,IAGkC3F,GAAAA,EAAAA,EAAAA,YAAWC,EAAAA,IAA5EiE,EAAiElE,EAAjEkE,iBAAkB2M,EAA+C7Q,EAA/C6Q,mBAAoBc,EAA2B3R,EAA3B2R,uBAEtC,EAA6EtK,EAA5EnB,EAAAA,GAAAA,YAAoC,EAAwCmB,EAAvCnB,EAAAA,GAAAA,YAExCkL,EAAyC,OAAf3H,QAAe,IAAfA,OAAAA,EAAAA,EAAiBlL,SAC3CqT,GAAyC,OAAflI,QAAe,IAAfA,OAAAA,EAAAA,EAAiBnL,SAEzCjD,GAAgCqV,EAAmB,CACzDC,kBAAmBQ,EAA0BhM,EAAYD,EACzD5G,SAAU6S,EAAiD,OAAvBA,QAAuB,IAAvBA,OAAAA,EAAAA,EAAyBvR,WAAoC,OAAvB+R,SAAuB,IAAvBA,QAAAA,EAAAA,GAAyB/R,WACnGqE,iBAAAA,EACA2M,mBAAAA,IAJMvV,KAOFkO,IAAQ7K,EAAAA,EAAAA,UAAQ,WACpB,IAAMkT,EAAmD,OAArBC,SAAqB,IAArBA,QAAAA,EAAAA,GAAuB3H,QAAQ,GAEnE,IAAKiH,GAA2BQ,KAA4BE,KAA0BD,EACpF,OAAOT,EACH,IAAIzH,EAAAA,GAAMxE,EAAWC,EAAWgM,EAAyBU,GAAsBvT,UAC/E,IAAIoL,EAAAA,GAAMxE,EAAWC,EAAW0M,GAAsBvT,SAAUqT,MAGrE,CAACE,GAAuB3M,EAAWC,EAAWwM,GAAyBR,IAE/CW,GAtH7B,SAA2B,G,IACzBJ,EADyB,EACzBA,uBACAzN,EAFyB,EAEzBA,iBACA6M,EAHyB,EAGzBA,kBACAiB,EAJyB,EAIzBA,cACAC,EALyB,EAKzBA,oBACAC,EANyB,EAMzBA,qBAEMC,EAAkC,OAAnBF,QAAmB,IAAnBA,OAAAA,EAAAA,EAAqBpS,WACpCuS,EAAmC,OAApBF,QAAoB,IAApBA,OAAAA,EAAAA,EAAsBrS,WAErCwS,IAAYtB,KAAuBoB,KAAkBC,EAE3D,OAAOtB,EAAAA,EAAAA,IACLuB,EAAU,CAAC,gCAAiCtB,EAAmBoB,EAAcC,GAAgB,MAC7F,mB,IACmBlO,EAAX8M,EAEAsB,E,0CAEN,OAJMtB,GAA2B,OAAhB9M,QAAgB,IAAhBA,GAAwB,QAAxBA,EAAAA,EAAkBvG,cAAM,IAAxBuG,OAAAA,EAAAA,EAA0BQ,YAAyB,OAAbsN,QAAa,IAAbA,OAAAA,EAAAA,EAAetN,SAEhE4N,EAAUtB,EAAW,CAACmB,EAAcC,G,CAAiBA,EAAcD,GAElE,C,EAAAR,EAAuBY,8BAA8BxB,EAAmBuB,WAkGxDP,CAAkB,CAC3ChB,kBAAmC,OAAhB7M,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkB6M,kBACrCY,uBAAAA,EACAzN,iBAAAA,EACA8N,cAAeZ,EAA0BjM,EAAYC,EACrD6M,oBAAqBb,GAA2BQ,GAChDM,qBAAsBd,EAA0BQ,GAA0BR,IANpE9V,GAAmByW,GAAnBzW,KAUFuO,IAAkBlL,EAAAA,EAAAA,UAAQ,WAC9B,IAAQ,OAAJjB,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,iBAAkBiI,GAAeqM,GACzC,IACE,OAAO3N,EAAAA,GAAAA,cAAiC,OAAJnH,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,eAAwB,OAARsU,SAAQ,IAARA,QAAAA,EAAAA,GAAU3S,YACpE,MAAO+G,GAEP,YADAqD,QAAQrD,MAAMA,MAKjB,CAAK,OAAJlJ,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,eAAgBiI,EAAaqM,KAEjCnU,IAAsBM,EAAAA,EAAAA,UAAQ,WAClC,GAAIkL,IAAmB1D,EACrB,OAAO,IAAI3H,EAAAA,GAAQqL,GAAgBtL,SAAU4H,EAAY+D,IAAIL,IAAiBtL,YAG/E,CAACsL,GAAiB1D,KAIhB5I,IACHqJ,EAAQzG,EAAE,mBAGRsI,IAAcC,EAAAA,GAAAA,UAChB9B,EAAa,OAALA,QAAK,IAALA,EAAAA,EAASzG,EAAE,wBAInBsJ,GACAC,IACgB,OAAhBtB,QAAgB,IAAhBA,GAAoC,QAApCA,EAAAA,EAAmBlC,EAAAA,GAAAA,mBAAiB,IAApCkC,OAAAA,EAAAA,EAAsC+B,QAAQ,MAC9B,OAAhB/B,QAAgB,IAAhBA,GAAoC,QAApCA,EAAAA,EAAmBlC,EAAAA,GAAAA,mBAAiB,IAApCkC,OAAAA,EAAAA,EAAsC+B,QAAQ,MAE9CvD,EAAa,OAALA,QAAK,IAALA,EAAAA,EAASzG,EAAE,qBAGhBkH,EAAcnB,EAAAA,GAAAA,aAAsBmB,EAAcnB,EAAAA,GAAAA,cACrDmC,EAAWlI,EAAE,oBAGXsJ,IAAmC,OAAhBrB,QAAgB,IAAhBA,GAAoC,QAApCA,EAAAA,EAAmBlC,EAAAA,GAAAA,mBAAiB,IAApCkC,OAAAA,EAAAA,EAAsCgC,SAASX,OACpEpB,EAAWlI,EAAE,gCAAiC,CAAEuB,OAAoC,QAA5B8G,EAAAA,EAAWtC,EAAAA,GAAAA,mBAAiB,IAA5BsC,OAAAA,EAAAA,EAA8B9G,UAGpFgI,IAAmC,OAAhBtB,QAAgB,IAAhBA,GAAoC,QAApCA,EAAAA,EAAmBlC,EAAAA,GAAAA,mBAAiB,IAApCkC,OAAAA,EAAAA,EAAsCgC,SAASV,MACpErB,EAAWlI,EAAE,gCAAiC,CAAEuB,OAAoC,QAA5B8G,EAAAA,EAAWtC,EAAAA,GAAAA,mBAAiB,IAA5BsC,OAAAA,EAAAA,EAA8B9G,UAGxF,MAAO,CACL6G,eAAAA,EACAC,WAAAA,EACA9K,KAAAA,EACA+K,UAAAA,EACAL,iBAAAA,EACAf,cAAAA,EACAmC,MAAAA,GACAxB,YAAAA,EACA6B,gBAAAA,GACAxL,oBAAAA,GACAuI,MAAAA,EACAyB,SAAAA,K,sOCnQG,SAAS1I,EAA0B,G,IAAA,IAAEC,SACWI,GAAAA,EAAAA,EAAAA,YAAWC,EAAAA,IAAxD0R,EAA6C3R,EAA7C2R,uBAAwBzN,EAAqBlE,EAArBkE,iBAE1B,GAAW4M,EAAAA,EAAAA,IACdlR,EAAkB,CAAC,yBAA0B,oBAAqC,OAAhBsE,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkB6M,kBAAmBnR,GAA5F,MACZ,mB,0CACE,MAAO,C,EAAA+R,EAAuBc,kBAAkC,OAAhBvO,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkB6M,kBAAmBnR,WAHjFtE,KAOR,OAAKoX,MAAMC,QAAQrX,GAKZ,CAHcuJ,EAAAA,GAAAA,cAA6C,OAAhBX,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkBvG,OAAQrC,EAAK,GAAGuE,YAC/DgF,EAAAA,GAAAA,cAA6C,OAAhBX,QAAgB,IAAhBA,OAAAA,EAAAA,EAAkBpG,OAAQxC,EAAK,GAAGuE,aAHnD,GAQ5B,SAAS+S,EACdzN,EACAC,G,IAuBiF1H,EAcrEmJ,EAdqEnJ,EAX3E,GAAc+H,EAAAA,EAAAA,KAAZlI,QAEiCuH,GAAAA,EAAAA,EAAAA,MAAjCa,EAAiCb,EAAjCa,iBAAkBC,EAAed,EAAfc,WAEpB,GAAQ1F,EAAAA,EAAAA,MAANC,EAGF,GAAWgR,EAAAA,EAAAA,GAAuB,OAAThM,QAAS,IAATA,OAAAA,EAAAA,EAAW+D,QAAkB,OAAT9D,QAAS,IAATA,OAAAA,EAAAA,EAAW8D,SAAtDxL,KAGFoI,GAAwBC,EAAAA,EAAAA,GAAwB,OAAPxI,QAAO,IAAPA,EAAAA,OAAWU,EAAW,CAAK,OAAJP,QAAI,IAAJA,OAAAA,EAAAA,EAAMQ,iBACtE8H,EAAwE,OAArBF,QAAqB,IAArBA,OAAAA,EAAAA,EAAqD,QAA7BpI,EAAI,OAAJA,QAAI,IAAJA,GAAoB,QAApBA,EAAAA,EAAMQ,sBAAc,IAApBR,OAAAA,EAAAA,EAAsBgH,eAAO,IAA7BhH,EAAAA,EAAiC,IAE9G6I,EAA2B,IAAI/H,EAAAA,GAAQ,IAAK,OAE5CmH,IAAqBO,EAAAA,EAAAA,oBACvBK,EAAkB,IAAI/H,EAAAA,GAAQoH,EAAY,QAG5C,IAcI,EAOAgB,EArBEC,EACJb,GAAiBO,GAAmBA,EAAgBG,YAAY,KAC5D7B,EAAAA,GAAAA,cAA6BmB,EAAcpD,SAAU2D,EAAgBO,SAASd,EAAczH,UAAUA,eACtGN,EAEqB0B,GAEzB,OAFyBA,EAA0B,CACnDC,SAA2B,OAAjBiH,QAAiB,IAAjBA,GAA2B,QAA3BA,EAAAA,EAAmBtI,gBAAQ,IAA3BsI,OAAAA,EAAAA,EAA6BhH,aACvC,GAFKmH,EAAoBrH,EAEzB,GAFcsH,EAAWtH,EAEzB,GAEI0H,GAKF,EAKH,IAJC,OADE,EACDnB,EAAAA,EAAAA,kBAA0BK,IAC3B,OAFE,EAEDL,EAAAA,EAAAA,UAAkBW,IACnB,OAHE,EAGDX,EAAAA,EAAAA,WAAmBc,IACpB,OAJE,EAIDd,EAAAA,EAAAA,WAAmBe,GAJlB,GAgBJ,OARK1J,IACHqJ,EAAQzG,EAAE,mBAGPkH,EAAcnB,EAAAA,EAAAA,aACjBU,EAAa,OAALA,QAAK,IAALA,EAAAA,EAASzG,EAAE,oBAGd,CAAEzC,KAAAA,EAAM2J,cAAAA,EAAeT,MAAAA,K,qpoBClFzB,SAASiM,IACd,IAAM,GAAcpN,EAAAA,EAAAA,KAAZC,QAEMoN,GAAqBC,EAAAA,EAAAA,GAAgBrN,GAAW,CAAC,eAAgBA,IAAU,mB,iEACzE,O,GAAMsN,EAAAA,EAAAA,iBAAgBtN,I,OAEpC,MAAO,C,EAFO,SAEDuN,KAAI,Y,IAAG5O,EAAK,EAALA,MAAO6O,EAAU,EAAVA,WAAYC,EAAS,EAATA,UAAcC,GAAI,UAArC/O,QAAO6O,aAAYC,c,OAA0B,kBAC5DC,GAAI,CACPlV,eAAgB,IAAImV,EAAAA,GAAM3N,EAASyN,EAAW,GAAI,YAAa,0BAC/DxV,QAAQ2V,EAAAA,EAAAA,IAAiBjP,GACzBvG,QAAQwV,EAAAA,EAAAA,IAAiBJ,iBAPrB5X,KAWR,YAX8B,IAAhBwX,EAAc,GAAdA,EA+BT,SAASS,EAAgChW,GAC9C,IAAMiW,EAAWX,IAEVY,GAGN,QAHwBC,EAAAA,EAAAA,IAChB,OAAPnW,QAAO,IAAPA,EAAAA,OAAWU,EACXuV,EAASP,KAAI,Y,OAAiB,EAAd/U,mBACjB,MAEKyV,GAAsBhV,EAAAA,EAAAA,UAC1B,WAAM6U,OAAAA,EAASI,QAAO,Y,IAAwBH,EAArBvV,EAAc,EAAdA,eAAqBuV,OAAsC,QAAtCA,EAAAA,EAAevV,EAAewG,gBAAQ,IAAtC+O,OAAAA,EAAAA,EAAwC/M,YAAY,UAClG,CAAC8M,EAAUC,IAGb,OAAOE,EAAoBV,KAAI,SAACY,GAAa,yBACxCA,GAAO,CACVrC,aAAc,GACd5I,SAAU/D,EAAAA,GAAAA,cAAoC,OAAPgP,QAAO,IAAPA,OAAAA,EAAAA,EAASlW,OAAQ,KACxDkL,SAAUhE,EAAAA,GAAAA,cAAoC,OAAPgP,QAAO,IAAPA,OAAAA,EAAAA,EAAS/V,OAAQ,KACxD2B,kBAAmB,WAAMoF,OAAAA,EAAAA,GAAAA,cAAoC,OAAPgP,QAAO,IAAPA,OAAAA,EAAAA,EAASlW,OAAQ,WAIpE,IAAMsC,GAAsB6T,EAAAA,EAAAA,eAAc,MAElC,SAAS/P,EAAgB,G,IAChCgQ,EA1CR,SAA2B,G,IAAE/P,EAAF,EAAEA,OAAQC,EAAV,EAAUA,OAC7B6O,EAAcD,IAEpB,OAAOlU,EAAAA,EAAAA,UACL,WACEmU,OAAAA,EAAYkB,MAAK,SAACD,G,IAIZA,EAAsCA,EACrCA,EAAsCA,EAJ3C,OACE/P,GACAC,KACY,OAAV8P,QAAU,IAAVA,GAAkB,QAAlBA,EAAAA,EAAYpW,cAAM,IAAlBoW,OAAAA,EAAAA,EAAoBnH,OAAO5I,MAAqB,OAAV+P,QAAU,IAAVA,GAAkB,QAAlBA,EAAAA,EAAYjW,cAAM,IAAlBiW,OAAAA,EAAAA,EAAoBnH,OAAO3I,MACtD,OAAV8P,QAAU,IAAVA,GAAkB,QAAlBA,EAAAA,EAAYjW,cAAM,IAAlBiW,OAAAA,EAAAA,EAAoBnH,OAAO5I,MAAqB,OAAV+P,QAAU,IAAVA,GAAkB,QAAlBA,EAAAA,EAAYpW,cAAM,IAAlBoW,OAAAA,EAAAA,EAAoBnH,OAAO3I,UAG1E,CAACD,EAAQC,EAAQ6O,IA6BAmB,CAAkB,CAAEjQ,OADD,EAAEA,OACOC,OADT,EAAUA,SAE1C4M,GAAqBqD,EAAAA,EAAAA,IAAsB,OAAVH,QAAU,IAAVA,OAAAA,EAAAA,EAAYhD,kBAAmBoD,GAChExC,GAAyBuC,EAAAA,EAAAA,IAAsB,OAAVH,QAAU,IAAVA,OAAAA,EAAAA,EAAYK,sBAAuBC,GACxEC,GAAuBJ,EAAAA,EAAAA,IAAsB,OAAVH,QAAU,IAAVA,OAAAA,EAAAA,EAAY7V,eAAewG,QAAS6P,GAE7E,OAAO5V,EAAAA,EAAAA,UACL,W,MAAO,CACLuF,iBAAkB6P,EAClBlD,mBAAAA,EACAc,uBAAAA,EACA2C,qBAAAA,KAEF,CAACP,EAAYlD,EAAoBc,EAAwB2C","sources":["webpack://_N_E/./packages/uikit/src/components/Card/CardBody.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/Add.tsx","webpack://_N_E/./packages/uikit/src/components/Svg/Icons/ChevronUp.tsx","webpack://_N_E/./packages/uikit/src/components/Text/TooltipText.tsx","webpack://_N_E/./src/components/PositionCard/index.tsx","webpack://_N_E/./src/hooks/useTotalSupply.ts","webpack://_N_E/./src/state/burn/hooks.ts","webpack://_N_E/./src/state/mint/hooks.ts","webpack://_N_E/./src/utils/formatInfoNumbers.ts","webpack://_N_E/./src/views/Swap/StableSwap/hooks/useStableTradeExactIn.ts","webpack://_N_E/./src/views/AddLiquidity/AddStableLiquidity/hooks/useStableLPDerivedMintInfo.tsx","webpack://_N_E/./src/views/RemoveLiquidity/RemoveStableLiquidity/hooks/useStableDerivedBurnInfo.ts","webpack://_N_E/./src/views/Swap/StableSwap/hooks/useStableConfig.ts"],"sourcesContent":["import _tagged_template_literal from \"@swc/helpers/src/_tagged_template_literal.mjs\";\nfunction _templateObject() {\n    var data = _tagged_template_literal([\n        \"\\n  \",\n        \"\\n\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nimport styled from \"styled-components\";\nimport { space } from \"styled-system\";\nvar CardBody = styled.div.withConfig({\n    componentId: \"sc-df4f0a61-0\"\n})(_templateObject(), space);\nCardBody.defaultProps = {\n    p: \"24px\"\n};\nexport default CardBody;\n","import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport Svg from \"../Svg\";\nvar Icon = function(props) {\n    return /*#__PURE__*/ _jsx(Svg, _object_spread_props(_object_spread({\n        viewBox: \"0 0 24 24\"\n    }, props), {\n        children: /*#__PURE__*/ _jsx(\"path\", {\n            d: \"M18 13H13V18C13 18.55 12.55 19 12 19C11.45 19 11 18.55 11 18V13H6C5.45 13 5 12.55 5 12C5 11.45 5.45 11 6 11H11V6C11 5.45 11.45 5 12 5C12.55 5 13 5.45 13 6V11H18C18.55 11 19 11.45 19 12C19 12.55 18.55 13 18 13Z\"\n        })\n    }));\n};\nexport default Icon;\n","import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport Svg from \"../Svg\";\nvar Icon = function(props) {\n    return /*#__PURE__*/ _jsx(Svg, _object_spread_props(_object_spread({\n        viewBox: \"0 0 24 24\"\n    }, props), {\n        children: /*#__PURE__*/ _jsx(\"path\", {\n            d: \"M8.11997 14.7101L12 10.8301L15.88 14.7101C16.27 15.1001 16.9 15.1001 17.29 14.7101C17.68 14.3201 17.68 13.6901 17.29 13.3001L12.7 8.7101C12.31 8.3201 11.68 8.3201 11.29 8.7101L6.69997 13.3001C6.30997 13.6901 6.30997 14.3201 6.69997 14.7101C7.08997 15.0901 7.72997 15.1001 8.11997 14.7101Z\"\n        })\n    }));\n};\nexport default Icon;\n","import _tagged_template_literal from \"@swc/helpers/src/_tagged_template_literal.mjs\";\nfunction _templateObject() {\n    var data = _tagged_template_literal([\n        \"\\n  text-decoration: underline dotted;\\n  text-decoration-color: \",\n        \";\\n  text-underline-offset: 0.1em;\\n\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nimport styled from \"styled-components\";\nimport Text from \"./Text\";\nvar TooltipText = styled(Text).withConfig({\n    componentId: \"sc-5b87ff15-0\"\n})(_templateObject(), function(param) {\n    var theme = param.theme, decorationColor = param.decorationColor;\n    var ref;\n    return \"\".concat((theme === null || theme === void 0 ? void 0 : theme.colors) && decorationColor ? theme.colors[decorationColor] : theme === null || theme === void 0 ? void 0 : (ref = theme.colors) === null || ref === void 0 ? void 0 : ref.textSubtle);\n});\nexport default TooltipText;\n","import { useState, useMemo, useContext } from 'react'\nimport { Currency, CurrencyAmount, JSBI, Pair, Percent } from '@pancakeswap/sdk'\nimport {\n  Button,\n  Text,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Card,\n  CardBody,\n  Flex,\n  CardProps,\n  AddIcon,\n  TooltipText,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { NextLinkFromReactRouter } from 'components/NextLink'\nimport { useTranslation } from 'contexts/Localization'\nimport useTotalSupply from 'hooks/useTotalSupply'\nimport useBUSDPrice from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useWeb3React } from '@pancakeswap/wagmi'\nimport { BIG_INT_ZERO } from 'config/constants/exchange'\nimport { useGetRemovedTokenAmounts } from 'views/RemoveLiquidity/RemoveStableLiquidity/hooks/useStableDerivedBurnInfo'\nimport useStableConfig, { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\n\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { currencyId } from '../../utils/currencyId'\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\n\nimport { LightCard } from '../Card'\nimport { AutoColumn } from '../Layout/Column'\nimport CurrencyLogo from '../Logo/CurrencyLogo'\nimport { DoubleCurrencyLogo } from '../Logo'\nimport { RowBetween, RowFixed } from '../Layout/Row'\nimport Dots from '../Loader/Dots'\nimport { formatAmount } from '../../utils/formatInfoNumbers'\nimport { useLPApr } from '../../state/swap/hooks'\n\nconst FixedHeightRow = styled(RowBetween)`\n  height: 24px;\n`\n\ninterface PositionCardProps extends CardProps {\n  pair: Pair\n  showUnwrapped?: boolean\n  currency0: Currency\n  currency1: Currency\n  token0Deposited: CurrencyAmount<Currency>\n  token1Deposited: CurrencyAmount<Currency>\n  totalUSDValue: number\n  userPoolBalance: CurrencyAmount<Currency>\n  poolTokenPercentage: Percent\n}\n\nconst useTokensDeposited = ({ pair, totalPoolTokens, userPoolBalance }) => {\n  const [token0Deposited, token1Deposited] =\n    !!pair &&\n    !!totalPoolTokens &&\n    !!userPoolBalance &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\n      ? [\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\n        ]\n      : [undefined, undefined]\n\n  return [token0Deposited, token1Deposited]\n}\n\nconst useTotalUSDValue = ({ currency0, currency1, token0Deposited, token1Deposited }) => {\n  const token0Price = useBUSDPrice(currency0)\n  const token1Price = useBUSDPrice(currency1)\n\n  const token0USDValue =\n    token0Deposited && token0Price\n      ? multiplyPriceByAmount(token0Price, parseFloat(token0Deposited.toSignificant(6)))\n      : null\n  const token1USDValue =\n    token1Deposited && token1Price\n      ? multiplyPriceByAmount(token1Price, parseFloat(token1Deposited.toSignificant(6)))\n      : null\n  return token0USDValue && token1USDValue ? token0USDValue + token1USDValue : null\n}\n\nconst usePoolTokenPercentage = ({ userPoolBalance, totalPoolTokens }) => {\n  return !!userPoolBalance &&\n    !!totalPoolTokens &&\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\n    ? new Percent(userPoolBalance.quotient, totalPoolTokens.quotient)\n    : undefined\n}\n\nconst withLPValuesFactory =\n  ({ useLPValuesHook, hookArgFn }) =>\n  (Component) =>\n  (props) => {\n    const { account } = useWeb3React()\n\n    const currency0 = props.showUnwrapped ? props.pair.token0 : unwrappedToken(props.pair.token0)\n    const currency1 = props.showUnwrapped ? props.pair.token1 : unwrappedToken(props.pair.token1)\n\n    const userPoolBalance = useTokenBalance(account ?? undefined, props.pair.liquidityToken)\n\n    const totalPoolTokens = useTotalSupply(props.pair.liquidityToken)\n\n    const poolTokenPercentage = usePoolTokenPercentage({ totalPoolTokens, userPoolBalance })\n\n    const args = useMemo(\n      () =>\n        hookArgFn({\n          userPoolBalance,\n          pair: props.pair,\n          totalPoolTokens,\n        }),\n      [userPoolBalance, props.pair, totalPoolTokens],\n    )\n\n    const [token0Deposited, token1Deposited] = useLPValuesHook(args)\n\n    const totalUSDValue = useTotalUSDValue({ currency0, currency1, token0Deposited, token1Deposited })\n\n    return (\n      <Component\n        {...props}\n        currency0={currency0}\n        currency1={currency1}\n        token0Deposited={token0Deposited}\n        token1Deposited={token1Deposited}\n        totalUSDValue={totalUSDValue}\n        userPoolBalance={userPoolBalance}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\nconst withLPValues = withLPValuesFactory({\n  useLPValuesHook: useTokensDeposited,\n  hookArgFn: ({ pair, userPoolBalance, totalPoolTokens }) => ({ pair, userPoolBalance, totalPoolTokens }),\n})\n\nconst withStableLPValues = withLPValuesFactory({\n  useLPValuesHook: useGetRemovedTokenAmounts,\n  hookArgFn: ({ userPoolBalance }) => ({\n    lpAmount: userPoolBalance?.quotient?.toString(),\n  }),\n})\n\nfunction MinimalPositionCardView({\n  pair,\n  currency0,\n  currency1,\n  token0Deposited,\n  token1Deposited,\n  totalUSDValue,\n  userPoolBalance,\n  poolTokenPercentage,\n}: PositionCardProps) {\n  const isStableLP = useContext(StableConfigContext)\n\n  const { t } = useTranslation()\n  const poolData = useLPApr(pair)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n\n  return (\n    <>\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.quotient, BIG_INT_ZERO) ? (\n        <Card>\n          <CardBody>\n            <AutoColumn gap=\"16px\">\n              <FixedHeightRow>\n                <RowFixed>\n                  <Text color=\"secondary\" bold>\n                    {t('LP tokens in your wallet')}\n                  </Text>\n                </RowFixed>\n              </FixedHeightRow>\n              <FixedHeightRow>\n                <RowFixed>\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\n                  <Text small color=\"textSubtle\">\n                    {currency0.symbol}-{currency1.symbol} LP\n                  </Text>\n                </RowFixed>\n                <RowFixed>\n                  <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n                    <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\n                    {Number.isFinite(totalUSDValue) && (\n                      <Text small color=\"textSubtle\">{`(~${totalUSDValue.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })} USD)`}</Text>\n                    )}\n                  </Flex>\n                </RowFixed>\n              </FixedHeightRow>\n              <AutoColumn gap=\"4px\">\n                {poolData && (\n                  <FixedHeightRow>\n                    <TooltipText ref={targetRef} color=\"textSubtle\" small>\n                      {t('LP reward APR')}:\n                    </TooltipText>\n                    {tooltipVisible && tooltip}\n                    <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n                  </FixedHeightRow>\n                )}\n                <FixedHeightRow>\n                  <Text color=\"textSubtle\" small>\n                    {t('Share of Pool')}:\n                  </Text>\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\n                </FixedHeightRow>\n                {isStableLP ? null : (\n                  <FixedHeightRow>\n                    <Text color=\"textSubtle\" small>\n                      {t('Pooled %asset%', { asset: currency0.symbol })}:\n                    </Text>\n                    {token0Deposited ? (\n                      <RowFixed>\n                        <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                      </RowFixed>\n                    ) : (\n                      '-'\n                    )}\n                  </FixedHeightRow>\n                )}\n                {isStableLP ? null : (\n                  <FixedHeightRow>\n                    <Text color=\"textSubtle\" small>\n                      {t('Pooled %asset%', { asset: currency1.symbol })}:\n                    </Text>\n                    {token1Deposited ? (\n                      <RowFixed>\n                        <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                      </RowFixed>\n                    ) : (\n                      '-'\n                    )}\n                  </FixedHeightRow>\n                )}\n              </AutoColumn>\n            </AutoColumn>\n          </CardBody>\n        </Card>\n      ) : (\n        // <LightCard>\n        //   <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\n            \n        //     {t(\n        //       \"Adding liquidity helps burn PLSX. 100% of the swap fees go the BuyAndBurn contract which pays a 0.1% bounty for those that run it.\",\n        //     )}\n        //   </Text>\n        // </LightCard>\n        <></>\n      )}\n    </>\n  )\n}\n\nfunction FullPositionCard({\n  pair,\n  currency0,\n  currency1,\n  token0Deposited,\n  token1Deposited,\n  totalUSDValue,\n  userPoolBalance,\n  poolTokenPercentage,\n  ...props\n}: PositionCardProps) {\n  const isStableLP = useContext(StableConfigContext)\n\n  const { t } = useTranslation()\n  const poolData = useLPApr(pair)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {\n      placement: 'bottom',\n    },\n  )\n  const [showMore, setShowMore] = useState(false)\n\n  return (\n    <Card {...props}>\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mb=\"4px\">\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\n            <Text bold ml=\"8px\">\n              {!currency0 || !currency1 ? <Dots>{t('Loading')}</Dots> : `${currency0.symbol}/${currency1.symbol}`}\n            </Text>\n            {isStableLP ? (\n              <Text color=\"textSubtle\" ml=\"4px\">\n                {' '}\n                - Stable\n              </Text>\n            ) : null}\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            {userPoolBalance?.toSignificant(4)}\n          </Text>\n          {Number.isFinite(totalUSDValue) && (\n            <Text small color=\"textSubtle\">{`(~${totalUSDValue.toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })} USD)`}</Text>\n          )}\n        </Flex>\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\n      </Flex>\n\n      {showMore && (\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\n          {isStableLP ? null : (\n            <FixedHeightRow>\n              <RowFixed>\n                <CurrencyLogo size=\"20px\" currency={currency0} />\n                <Text color=\"textSubtle\" ml=\"4px\">\n                  {t('Pooled %asset%', { asset: currency0.symbol })}:\n                </Text>\n              </RowFixed>\n              {token0Deposited ? (\n                <RowFixed>\n                  <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n          )}\n\n          {isStableLP ? null : (\n            <FixedHeightRow>\n              <RowFixed>\n                <CurrencyLogo size=\"20px\" currency={currency1} />\n                <Text color=\"textSubtle\" ml=\"4px\">\n                  {t('Pooled %asset%', { asset: currency1.symbol })}:\n                </Text>\n              </RowFixed>\n              {token1Deposited ? (\n                <RowFixed>\n                  <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\n                </RowFixed>\n              ) : (\n                '-'\n              )}\n            </FixedHeightRow>\n          )}\n          {poolData && (\n            <FixedHeightRow>\n              <RowFixed>\n                <TooltipText ref={targetRef} color=\"textSubtle\">\n                  {t('LP reward APR')}:\n                </TooltipText>\n                {tooltipVisible && tooltip}\n              </RowFixed>\n              <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n            </FixedHeightRow>\n          )}\n\n          <FixedHeightRow>\n            <Text color=\"textSubtle\">{t('Share of Pool')}</Text>\n            <Text>\n              {poolTokenPercentage\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\n                : '-'}\n            </Text>\n          </FixedHeightRow>\n\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.quotient, BIG_INT_ZERO) && (\n            <Flex flexDirection=\"column\">\n              <Button\n                as={NextLinkFromReactRouter}\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}${isStableLP ? '?stable=1' : ''}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                {t('Remove')}\n              </Button>\n              <Button\n                as={NextLinkFromReactRouter}\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}?step=1`}\n                variant=\"text\"\n                startIcon={<AddIcon color=\"primary\" />}\n                width=\"100%\"\n              >\n                {t('Add liquidity instead')}\n              </Button>\n            </Flex>\n          )}\n        </AutoColumn>\n      )}\n    </Card>\n  )\n}\n\nexport const MinimalPositionCard = withLPValues(MinimalPositionCardView)\n\nexport const StableFullPositionCardContainer = withStableLPValues(FullPositionCard)\n\nexport const StableFullPositionCard = (props) => {\n  const { stableSwapConfig, ...config } = useStableConfig({\n    tokenA: props.pair?.token0,\n    tokenB: props.pair?.token1,\n  })\n\n  if (!stableSwapConfig) return null\n\n  return (\n    <StableConfigContext.Provider value={{ stableSwapConfig, ...config }}>\n      <StableFullPositionCardContainer {...props} />\n    </StableConfigContext.Provider>\n  )\n}\n\nexport default withLPValues(FullPositionCard)\n","import { useMemo } from 'react'\nimport { Currency, CurrencyAmount, Token } from '@pancakeswap/sdk'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\n function useTotalSupply(token?: Currency): CurrencyAmount<Token> | undefined {\n  const contract = useTokenContract(token?.isToken ? token.address : undefined, false)\n\n  const totalSupplyStr: string | undefined = useSingleCallResult(contract, 'totalSupply')?.result?.[0]?.toString()\n\n  return useMemo(\n    () => (token?.isToken && totalSupplyStr ? CurrencyAmount.fromRawAmount(token, totalSupplyStr) : undefined),\n    [token, totalSupplyStr],\n  )\n}\n\nexport default useTotalSupply\n","import { Currency, CurrencyAmount, JSBI, Pair, Percent, Token } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { useTranslation } from 'contexts/Localization'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { AppState, useAppDispatch } from '../index'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  removalCheckedA?: boolean,\n  removalCheckedB?: boolean,\n  zapMode?: boolean,\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  }\n  error?: string\n  tokenToReceive?: string\n  estimateZapOutAmount?: CurrencyAmount<Token>\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  const { t } = useTranslation()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | CurrencyAmount<Token> = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).quotient)\n      : undefined\n\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).quotient)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: CurrencyAmount<Token>; [Field.CURRENCY_B]?: CurrencyAmount<Token> } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.quotient, userLiquidity.quotient)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else if (tokens[independentField]) {\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n    const liquidityValue = liquidityValues[independentField]\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n      percentToRemove = new Percent(independentAmount.quotient, liquidityValue.quotient)\n    }\n  }\n\n  const liquidityToRemove =\n    userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n      ? CurrencyAmount.fromRawAmount(userLiquidity.currency, percentToRemove.multiply(userLiquidity.quotient).quotient)\n      : undefined\n\n  const tokenToReceive =\n    removalCheckedA && removalCheckedB\n      ? undefined\n      : removalCheckedA\n      ? tokens[Field.CURRENCY_A]?.address\n      : tokens[Field.CURRENCY_B]?.address\n\n  const amountA =\n    tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n      ? CurrencyAmount.fromRawAmount(tokenA, percentToRemove.multiply(liquidityValueA.quotient).quotient)\n      : undefined\n\n  const amountB =\n    tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n      ? CurrencyAmount.fromRawAmount(tokenB, percentToRemove.multiply(liquidityValueB.quotient).quotient)\n      : undefined\n\n  const tokenAmountToZap = removalCheckedA && removalCheckedB ? undefined : removalCheckedA ? amountB : amountA\n\n  const estimateZapOutAmount = useMemo(() => {\n    if (pair && tokenAmountToZap) {\n      try {\n        return pair.getOutputAmount(tokenAmountToZap)[0]\n      } catch (error) {\n        return undefined\n      }\n    }\n    return undefined\n  }, [pair, tokenAmountToZap])\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Token>\n    [Field.CURRENCY_B]?: CurrencyAmount<Token>\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: liquidityToRemove,\n    [Field.CURRENCY_A]: !zapMode\n      ? amountA\n      : amountA && removalCheckedA && !removalCheckedB && estimateZapOutAmount\n      ? CurrencyAmount.fromRawAmount(\n          tokenA,\n          JSBI.add(percentToRemove.multiply(liquidityValueA.quotient).quotient, estimateZapOutAmount.quotient),\n        )\n      : !removalCheckedA\n      ? undefined\n      : amountA,\n    [Field.CURRENCY_B]: !zapMode\n      ? amountB\n      : amountB && removalCheckedB && !removalCheckedA && estimateZapOutAmount\n      ? CurrencyAmount.fromRawAmount(\n          tokenB,\n          JSBI.add(percentToRemove.multiply(liquidityValueB.quotient).quotient, estimateZapOutAmount.quotient),\n        )\n      : !removalCheckedB\n      ? undefined\n      : amountB,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (\n    !parsedAmounts[Field.LIQUIDITY] ||\n    (removalCheckedA && !parsedAmounts[Field.CURRENCY_A]) ||\n    (removalCheckedB && !parsedAmounts[Field.CURRENCY_B])\n  ) {\n    error = error ?? t('Enter an amount')\n  }\n\n  return { pair, parsedAmounts, error, tokenToReceive, estimateZapOutAmount }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onUserInput,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatUnits } from '@ethersproject/units'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  computePriceImpact,\n  Currency,\n  CurrencyAmount,\n  JSBI,\n  MINIMUM_LIQUIDITY,\n  Pair,\n  Percent,\n  Price,\n  Token,\n} from '@pancakeswap/sdk'\nimport { BIG_INT_ZERO } from 'config/constants/exchange'\nimport { FetchStatus } from 'config/constants/types'\nimport { useTradeExactIn } from 'hooks/Trades'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useZapContract } from 'hooks/useContract'\nimport useNativeCurrency from 'hooks/useNativeCurrency'\nimport { PairState, usePair } from 'hooks/usePairs'\nimport { usePreviousValue } from '@pancakeswap/hooks'\nimport { useSWRContract } from 'hooks/useSWRContract'\nimport useTotalSupply from 'hooks/useTotalSupply'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useGasPrice } from 'state/user/hooks'\nimport { warningSeverity } from 'utils/exchange'\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { AppState, useAppDispatch } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\n}\n\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity],\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  price?: Price<Currency, Currency>\n  noLiquidity?: boolean\n  liquidityMinted?: CurrencyAmount<Token>\n  poolTokenPercentage?: Percent\n  error?: string\n  addError?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(totalSupply && JSBI.equal(totalSupply.quotient, BIG_INT_ZERO)) ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.quotient, BIG_INT_ZERO) &&\n        JSBI.equal(pair.reserve1.quotient, BIG_INT_ZERO),\n    )\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B],\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseAmount(\n    typedValue,\n    currencies[independentField],\n  )\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    }\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = independentAmount?.wrapped\n      const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency?.isNative\n          ? CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\n          : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, currencyB, pair])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField],\n  )\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(\n          currencyAAmount.currency,\n          currencyBAmount.currency,\n          currencyAAmount.quotient,\n          currencyBAmount.quotient,\n        )\n      }\n      return undefined\n    }\n    const wrappedCurrencyA = currencyA?.wrapped\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n  }, [currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [currencyAAmount?.wrapped, currencyBAmount?.wrapped]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      try {\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    }\n    return undefined\n  }, [parsedAmounts, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  let addError: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? t('Choose a valid pair')\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (\n    currencyAAmount &&\n    currencyBAmount &&\n    currencyBalances?.[Field.CURRENCY_A]?.equalTo(0) &&\n    currencyBalances?.[Field.CURRENCY_B]?.equalTo(0)\n  ) {\n    error = error ?? t('No token balance')\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    addError = t('Enter an amount')\n  }\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    addError = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_A]?.symbol })\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    addError = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_B]?.symbol })\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n    addError,\n  }\n}\n\nconst MAX_ZAP_REVERSE_RATIO = JSBI.BigInt(50)\n\nconst getMaxZapSwapAmount = (pair: Pair, tokenZap: Token) =>\n  pair &&\n  tokenZap &&\n  pair.involvesToken(tokenZap) &&\n  JSBI.divide(pair.reserveOf(tokenZap).quotient, MAX_ZAP_REVERSE_RATIO)\n\n// simplify version to guess the zap in amount by swapInAmount from max zap reserves ratio 50\nfunction guessMaxZappableAmount(\n  pair: Pair,\n  token0AmountIn: CurrencyAmount<Token>,\n  token1AmountIn?: CurrencyAmount<Token>,\n) {\n  if (!token1AmountIn) {\n    if (token0AmountIn) {\n      const maxSwapAmount = getMaxZapSwapAmount(pair, token0AmountIn.currency)\n      return maxSwapAmount && JSBI.multiply(maxSwapAmount, JSBI.BigInt(2))\n    }\n    return undefined\n  }\n  if (token0AmountIn && token1AmountIn) {\n    const maxSwapAmount = getMaxZapSwapAmount(pair, token0AmountIn.currency)\n\n    if (!maxSwapAmount) {\n      return undefined\n    }\n\n    const [_, newPair] = pair.getInputAmount(CurrencyAmount.fromRawAmount(token0AmountIn.currency, maxSwapAmount))\n\n    return JSBI.add(\n      maxSwapAmount,\n      JSBI.divide(\n        JSBI.multiply(token1AmountIn.quotient, newPair.reserveOf(token0AmountIn.currency).quotient),\n        newPair.reserveOf(token1AmountIn.currency).quotient,\n      ),\n    )\n  }\n\n  return undefined\n}\n\n// compare the gas is larger than swap in amount\nfunction useZapInGasOverhead(inputAmount: CurrencyAmount<Currency> | undefined) {\n  const gasPrice = useGasPrice()\n  const native = useNativeCurrency()\n  const requiredGas = formatUnits(gasPrice ? BigNumber.from(gasPrice).mul('500000') : '0')\n  const requiredGasAsCurrencyAmount = inputAmount ? tryParseAmount(requiredGas, native) : undefined\n  const inputIsBNB = inputAmount?.currency.symbol === 'BNB'\n\n  const gasCostInInputTokens = useTradeExactIn(requiredGasAsCurrencyAmount, inputIsBNB ? null : inputAmount?.currency)\n\n  return gasCostInInputTokens?.outputAmount?.greaterThan(inputAmount?.quotient) ?? false\n}\n\nexport function useZapIn({\n  canZap,\n  currencyA,\n  currencyB,\n  pair,\n  currencyBalances,\n  zapTokenCheckedA,\n  zapTokenCheckedB,\n  maxAmounts,\n}: {\n  canZap?: boolean\n  currencyA?: Currency\n  currencyB?: Currency\n  pair: Pair\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  zapTokenCheckedA?: boolean\n  zapTokenCheckedB?: boolean\n  maxAmounts?: { [field in Field]?: CurrencyAmount<Currency> }\n}) {\n  const { t } = useTranslation()\n  const [inputBlurOnce, setInputBlurOnce] = useState(false)\n  const previousBlur = usePreviousValue(inputBlurOnce)\n  const [triedAutoReduce, setTriedAutoReduce] = useState(false)\n  const { independentField, typedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseAmount(\n    typedValue,\n    currencies[independentField],\n  )\n\n  const _dependentAmount = useMemo(() => {\n    if (!canZap) {\n      return undefined\n    }\n    if (independentAmount) {\n      const wrappedIndependentAmount = independentAmount?.wrapped\n      const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency.isNative\n          ? CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\n          : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [canZap, currencyA, currencyB, dependentField, independentAmount, pair])\n\n  const isDependentAmountGreaterThanMaxAmount =\n    maxAmounts[dependentField] && _dependentAmount && _dependentAmount?.greaterThan(maxAmounts[dependentField])\n\n  // amounts\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\n    return isDependentAmountGreaterThanMaxAmount ? maxAmounts[dependentField] : _dependentAmount\n  }, [isDependentAmountGreaterThanMaxAmount, maxAmounts, dependentField, _dependentAmount])\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: !zapTokenCheckedA\n        ? undefined\n        : independentField === Field.CURRENCY_A\n        ? independentAmount\n        : dependentAmount,\n      [Field.CURRENCY_B]: !zapTokenCheckedB\n        ? undefined\n        : independentField === Field.CURRENCY_A\n        ? dependentAmount\n        : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField, zapTokenCheckedA, zapTokenCheckedB],\n  )\n\n  const wrappedParsedAmounts: { [field in Field]: CurrencyAmount<Token> | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: parsedAmounts[Field.CURRENCY_A]?.wrapped,\n      [Field.CURRENCY_B]: parsedAmounts[Field.CURRENCY_B]?.wrapped,\n    }),\n    [parsedAmounts],\n  )\n\n  const zapContract = useZapContract()\n\n  const rebalancing =\n    !!zapTokenCheckedA && !!zapTokenCheckedB && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n\n  const singleTokenToZapField =\n    !rebalancing && zapTokenCheckedB && !!parsedAmounts[Field.CURRENCY_B] ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  const singleTokenToZapAmount = useMemo(\n    () => wrappedParsedAmounts[singleTokenToZapField],\n    [singleTokenToZapField, wrappedParsedAmounts],\n  )\n\n  const noNeedZap = useMemo(() => {\n    if (!rebalancing) {\n      return false\n    }\n    if (!wrappedParsedAmounts[independentField] || !wrappedParsedAmounts[dependentField]) {\n      return undefined\n    }\n\n    if (!isDependentAmountGreaterThanMaxAmount) {\n      return true\n    }\n\n    const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n\n    if (tokenA && tokenB && wrappedParsedAmounts[independentField] && pair) {\n      return wrappedParsedAmounts[dependentField].equalTo(\n        dependentField === Field.CURRENCY_B\n          ? pair.priceOf(tokenA).quote(wrappedParsedAmounts[independentField])\n          : pair.priceOf(tokenB).quote(wrappedParsedAmounts[independentField]),\n      )\n    }\n    return undefined\n  }, [\n    currencyA,\n    currencyB,\n    dependentField,\n    independentField,\n    isDependentAmountGreaterThanMaxAmount,\n    pair,\n    rebalancing,\n    wrappedParsedAmounts,\n  ])\n\n  const singleZapEstimate = useSWRContract(\n    canZap &&\n      !noNeedZap &&\n      zapContract &&\n      singleTokenToZapAmount &&\n      singleTokenToZapAmount?.currency &&\n      pair &&\n      !rebalancing && {\n        contract: zapContract,\n        methodName: 'estimateZapInSwap',\n        params: [\n          singleTokenToZapAmount.currency.address,\n          singleTokenToZapAmount.quotient.toString(),\n          pair.liquidityToken.address,\n        ],\n      },\n    {\n      onError(err) {\n        console.error(err)\n      },\n    },\n  )\n\n  const rebalancingZapEstimate = useSWRContract(\n    canZap &&\n      zapContract &&\n      !noNeedZap &&\n      wrappedParsedAmounts &&\n      wrappedParsedAmounts[Field.CURRENCY_A] &&\n      wrappedParsedAmounts[Field.CURRENCY_B] &&\n      pair &&\n      rebalancing && {\n        contract: zapContract,\n        methodName: 'estimateZapInRebalancingSwap',\n        params: [\n          wrappedParsedAmounts[Field.CURRENCY_A].currency.address,\n          wrappedParsedAmounts[Field.CURRENCY_B].currency.address,\n          wrappedParsedAmounts[Field.CURRENCY_A].quotient.toString(),\n          wrappedParsedAmounts[Field.CURRENCY_B]?.quotient?.toString(),\n          pair.liquidityToken.address,\n        ],\n      },\n    {\n      onError(err) {\n        console.error(err)\n      },\n    },\n  )\n\n  const zapInEstimated = useMemo(\n    () =>\n      (rebalancingZapEstimate?.data || singleZapEstimate?.data) && {\n        swapAmountIn: rebalancing ? rebalancingZapEstimate.data?.swapAmountIn : singleZapEstimate.data?.swapAmountIn,\n        swapAmountOut: rebalancing ? rebalancingZapEstimate.data?.swapAmountOut : singleZapEstimate.data?.swapAmountOut,\n        isToken0Sold: rebalancing\n          ? rebalancingZapEstimate.data?.sellToken0\n          : singleZapEstimate.data?.swapTokenOut === singleTokenToZapAmount?.currency.address,\n      },\n    [rebalancing, rebalancingZapEstimate.data, singleZapEstimate.data, singleTokenToZapAmount?.currency.address],\n  )\n\n  const rebalancingSellToken0 = useMemo(() => {\n    if (rebalancingZapEstimate.data) {\n      return rebalancingZapEstimate.data.sellToken0\n    }\n    if (!pair || !wrappedParsedAmounts[Field.CURRENCY_A] || !wrappedParsedAmounts[Field.CURRENCY_B]) {\n      return undefined\n    }\n    const token0toZap = pair.token0.equals(wrappedParsedAmounts[Field.CURRENCY_A].currency)\n    if (token0toZap) {\n      return JSBI.greaterThan(\n        JSBI.multiply(wrappedParsedAmounts[Field.CURRENCY_A].quotient, pair.reserve1.quotient),\n        JSBI.multiply(wrappedParsedAmounts[Field.CURRENCY_B].quotient, pair.reserve0.quotient),\n      )\n    }\n    return JSBI.greaterThan(\n      JSBI.multiply(wrappedParsedAmounts[Field.CURRENCY_B].quotient, pair.reserve0.quotient),\n      JSBI.multiply(wrappedParsedAmounts[Field.CURRENCY_A].quotient, pair.reserve1.quotient),\n    )\n  }, [pair, rebalancingZapEstimate.data, wrappedParsedAmounts])\n\n  const swapTokenField = !rebalancing\n    ? singleTokenToZapField\n    : rebalancingSellToken0\n    ? Field.CURRENCY_A\n    : Field.CURRENCY_B\n  const swapOutTokenField = swapTokenField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  const swapTokens: { [field in Field]?: Token } = useMemo(\n    () => ({\n      [swapTokenField]: currencies[swapTokenField]?.wrapped,\n      [swapOutTokenField]: currencies[swapOutTokenField]?.wrapped,\n    }),\n    [currencies, swapOutTokenField, swapTokenField],\n  )\n\n  const zapInEstimatedError = useMemo(\n    () => (rebalancing ? rebalancingZapEstimate.error : singleZapEstimate.error),\n    [rebalancing, rebalancingZapEstimate.error, singleZapEstimate.error],\n  )\n\n  const zapInEstimatedStatus = useMemo(\n    () => (rebalancing ? rebalancingZapEstimate.status : singleZapEstimate.status),\n    [rebalancing, rebalancingZapEstimate.status, singleZapEstimate.status],\n  )\n\n  const priceImpact = useMemo(() => {\n    if (!zapInEstimated) {\n      return undefined\n    }\n    const tokenAmountIn = CurrencyAmount.fromRawAmount(\n      swapTokens[swapTokenField],\n      zapInEstimated.swapAmountIn.toString(),\n    )\n    const tokenAmountOut = CurrencyAmount.fromRawAmount(\n      swapTokens[swapOutTokenField],\n      zapInEstimated.swapAmountOut.toString(),\n    )\n    const midPrice = new Price(\n      swapTokens[swapTokenField],\n      swapTokens[swapOutTokenField],\n      pair.token0.equals(swapTokens[swapTokenField]) ? pair.reserve0.quotient : pair.reserve1.quotient,\n      pair.token0.equals(swapTokens[swapTokenField]) ? pair.reserve1.quotient : pair.reserve0.quotient,\n    )\n    return computePriceImpact(midPrice, tokenAmountIn, tokenAmountOut)\n  }, [pair, swapOutTokenField, swapTokenField, swapTokens, zapInEstimated])\n\n  const overLimitZapRatio = useMemo(() => {\n    if (!zapInEstimated) {\n      return false\n    }\n\n    return JSBI.lessThan(\n      JSBI.divide(\n        pair.reserveOf(swapTokens[swapTokenField]).quotient,\n        JSBI.BigInt(zapInEstimated.swapAmountIn.toString()),\n      ),\n      MAX_ZAP_REVERSE_RATIO,\n    )\n  }, [pair, swapTokens, zapInEstimated, swapTokenField])\n\n  const priceSeverity = overLimitZapRatio || zapInEstimatedError ? 4 : priceImpact ? warningSeverity(priceImpact) : 0\n\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(false)\n\n  const maxZappableAmount = useMemo(\n    () =>\n      guessMaxZappableAmount(\n        pair,\n        wrappedParsedAmounts[swapTokenField],\n        rebalancing ? wrappedParsedAmounts[swapOutTokenField] : undefined,\n      ),\n    [pair, wrappedParsedAmounts, swapTokenField, rebalancing, swapOutTokenField],\n  )\n\n  const convertToMaxZappable = useCallback(() => {\n    if (maxZappableAmount) {\n      if (maxAmounts[swapTokenField]) {\n        const formatInput = formatUnits(\n          JSBI.greaterThan(maxAmounts[swapTokenField].quotient, maxZappableAmount)\n            ? maxZappableAmount.toString()\n            : maxAmounts[swapTokenField].quotient.toString(),\n          maxAmounts[swapTokenField]?.currency.decimals,\n        )\n\n        if (swapTokenField === Field.CURRENCY_A) {\n          onFieldAInput(formatInput)\n        } else {\n          onFieldBInput(formatInput)\n        }\n      }\n    }\n  }, [maxAmounts, maxZappableAmount, onFieldAInput, onFieldBInput, swapTokenField])\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    if (\n      !pair ||\n      !swapTokens[swapTokenField] ||\n      !swapTokens[swapOutTokenField] ||\n      !zapInEstimated?.swapAmountIn ||\n      !zapInEstimated?.swapAmountOut ||\n      !wrappedParsedAmounts[swapTokenField]\n    ) {\n      return undefined\n    }\n\n    if (pair && totalSupply) {\n      try {\n        // calc the tokenA amount after swap\n        const zappedTokenAmountA = wrappedParsedAmounts[swapTokenField].greaterThan(\n          zapInEstimated.swapAmountIn.toString(),\n        )\n          ? wrappedParsedAmounts[swapTokenField].subtract(\n              CurrencyAmount.fromRawAmount(swapTokens[swapTokenField], zapInEstimated.swapAmountIn.toString()),\n            )\n          : wrappedParsedAmounts[swapTokenField]\n\n        let zappedTokenAmountB = CurrencyAmount.fromRawAmount(\n          swapTokens[swapOutTokenField],\n          zapInEstimated.swapAmountOut.toString(),\n        )\n\n        if (wrappedParsedAmounts[swapOutTokenField]) {\n          zappedTokenAmountB = zappedTokenAmountB.add(wrappedParsedAmounts[swapOutTokenField])\n        }\n        const lpMinted = pair.getLiquidityMinted(totalSupply, zappedTokenAmountA, zappedTokenAmountB)\n        return lpMinted\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    }\n    return undefined\n  }, [\n    pair,\n    swapTokens,\n    swapTokenField,\n    swapOutTokenField,\n    zapInEstimated?.swapAmountIn,\n    zapInEstimated?.swapAmountOut,\n    wrappedParsedAmounts,\n    totalSupply,\n  ])\n\n  const swapTokenAmountTooLow = useMemo(\n    () =>\n      wrappedParsedAmounts[swapTokenField] &&\n      JSBI.lessThan(wrappedParsedAmounts[swapTokenField].quotient, MINIMUM_LIQUIDITY),\n    [swapTokenField, wrappedParsedAmounts],\n  )\n  const swapOutAmountTooLow = useMemo(\n    () =>\n      wrappedParsedAmounts[swapOutTokenField] &&\n      JSBI.lessThan(wrappedParsedAmounts[swapOutTokenField].quotient, MINIMUM_LIQUIDITY),\n    [swapOutTokenField, wrappedParsedAmounts],\n  )\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  const gasOverhead = useZapInGasOverhead(\n    useMemo(\n      () =>\n        zapInEstimated\n          ? CurrencyAmount.fromRawAmount(swapTokens[swapTokenField], zapInEstimated.swapAmountIn.toString())\n          : null,\n      [swapTokenField, swapTokens, zapInEstimated],\n    ),\n  )\n\n  useEffect(() => {\n    if (\n      !triedAutoReduce &&\n      parsedAmounts[swapTokenField] &&\n      maxZappableAmount &&\n      !previousBlur &&\n      inputBlurOnce &&\n      !rebalancing\n    ) {\n      if (JSBI.greaterThan(parsedAmounts[swapTokenField].quotient, maxZappableAmount)) {\n        convertToMaxZappable()\n        setTriedAutoReduce(true)\n      }\n    }\n  }, [\n    convertToMaxZappable,\n    inputBlurOnce,\n    maxZappableAmount,\n    parsedAmounts,\n    previousBlur,\n    rebalancing,\n    singleTokenToZapAmount,\n    swapTokenField,\n    triedAutoReduce,\n  ])\n\n  const onInputBlurOnce = useCallback(() => {\n    setInputBlurOnce(true)\n  }, [])\n\n  let error: string | undefined\n\n  if (zapInEstimatedError) {\n    error = t('Cannot estimate zap amount')\n  }\n\n  if (swapTokenAmountTooLow || (rebalancing && swapOutAmountTooLow)) {\n    error = t('Zap in amount too low')\n  }\n\n  if (\n    wrappedParsedAmounts[swapTokenField] &&\n    currencyBalances[swapTokenField]?.lessThan(wrappedParsedAmounts[swapTokenField])\n  ) {\n    error = t('Insufficient %token% balance', {\n      token: wrappedParsedAmounts[swapTokenField]?.currency.symbol ?? '',\n    })\n  }\n\n  if (\n    wrappedParsedAmounts[swapOutTokenField] &&\n    rebalancing &&\n    currencyBalances[swapOutTokenField]?.lessThan(wrappedParsedAmounts[swapOutTokenField])\n  ) {\n    error = t('Insufficient %token% balance', { token: wrappedParsedAmounts[swapOutTokenField]?.currency.symbol ?? '' })\n  }\n\n  return {\n    zapInEstimating: zapInEstimatedStatus !== FetchStatus.Fetched,\n    zapInEstimatedError,\n    zapInEstimated,\n    error,\n    liquidityMinted,\n    poolTokenPercentage,\n    parsedAmounts,\n    swapTokenField,\n    swapOutTokenField,\n    priceSeverity,\n    convertToMaxZappable,\n    rebalancing,\n    noNeedZap,\n    gasOverhead,\n    isDependentAmountGreaterThanMaxAmount,\n    onInputBlurOnce,\n  }\n}\n","import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\nexport type formatAmountNotation = 'compact' | 'standard'\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: formatAmountNotation\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const { notation = 'compact', displayThreshold, tokenPrecision, isInteger } = options || { notation: 'compact' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n","import { CurrencyAmount, Price, Percent, TradeType, Fraction, ONE, Currency } from '@pancakeswap/sdk'\nimport { useCallback, useMemo, useContext } from 'react'\nimport useSWR from 'swr'\nimport { StableConfigContext } from './useStableConfig'\n\nexport interface StableTrade {\n  tradeType: TradeType\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n  executionPrice: Price<Currency, Currency>\n  priceImpact: null\n  maximumAmountIn: (slippaged: Percent) => CurrencyAmount<Currency>\n  minimumAmountOut: (slippaged: Percent) => CurrencyAmount<Currency>\n}\n\nexport const maximumAmountInFactory = (currencyAmountIn: CurrencyAmount<Currency>, slippageTolerance: number) => {\n  const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(currencyAmountIn.quotient).quotient\n\n  return CurrencyAmount.fromRawAmount(currencyAmountIn.currency, slippageAdjustedAmountIn)\n}\n\nexport const minimumAmountOutFactory = (currencyAmountOut: CurrencyAmount<Currency>, slippageTolerance: number) => {\n  const slippageAdjustedAmountOut = new Fraction(ONE)\n    .add(slippageTolerance)\n    .invert()\n    .multiply(currencyAmountOut.quotient).quotient\n  return CurrencyAmount.fromRawAmount(currencyAmountOut.currency, slippageAdjustedAmountOut)\n}\n\ninterface UseStableTradeResponse {\n  currencyAmountIn: CurrencyAmount<Currency>\n  currencyAmountOut: CurrencyAmount<Currency>\n  stableSwapConfig: any\n  tradeType: TradeType\n}\n\nexport function useStableTradeResponse({\n  currencyAmountIn,\n  currencyAmountOut,\n  stableSwapConfig,\n  tradeType,\n}: UseStableTradeResponse) {\n  const maximumAmountIn = useCallback(\n    (slippageTolerance) => {\n      if (tradeType === TradeType.EXACT_INPUT) {\n        return currencyAmountIn\n      }\n\n      return currencyAmountIn\n        ? maximumAmountInFactory(currencyAmountIn, slippageTolerance)\n        : CurrencyAmount.fromRawAmount(currencyAmountIn.currency, '0')\n    },\n    [currencyAmountIn, tradeType],\n  )\n\n  const minimumAmountOut = useCallback(\n    (slippageTolerance) => {\n      if (tradeType === TradeType.EXACT_OUTPUT) {\n        return currencyAmountOut\n      }\n\n      return currencyAmountOut\n        ? minimumAmountOutFactory(currencyAmountOut, slippageTolerance)\n        : CurrencyAmount.fromRawAmount(currencyAmountOut.currency, '0')\n    },\n    [currencyAmountOut, tradeType],\n  )\n\n  const isInvalid = !currencyAmountIn || !currencyAmountOut || !stableSwapConfig || !currencyAmountIn\n\n  const executionPrice = useMemo(() => {\n    if (isInvalid) return null\n\n    return new Price(\n      currencyAmountIn.currency,\n      currencyAmountOut.currency,\n      currencyAmountIn.quotient,\n      currencyAmountOut.quotient,\n    )\n  }, [isInvalid, currencyAmountIn, currencyAmountOut])\n\n  if (isInvalid) return null\n\n  return {\n    tradeType: TradeType.EXACT_INPUT,\n    inputAmount: currencyAmountIn,\n    outputAmount: currencyAmountOut,\n    executionPrice,\n    priceImpact: null,\n    maximumAmountIn,\n    minimumAmountOut,\n  }\n}\n\nexport function useEstimatedAmount({ estimatedCurrency, stableSwapConfig, quotient, stableSwapContract }) {\n  return useSWR(\n    stableSwapConfig?.stableSwapAddress && estimatedCurrency && !!quotient\n      ? ['swapContract', stableSwapConfig?.stableSwapAddress, quotient]\n      : null,\n    async () => {\n      const isToken0 = stableSwapConfig?.token0?.address === estimatedCurrency?.address\n\n      const args = isToken0 ? [1, 0, quotient] : [0, 1, quotient]\n\n      const estimatedAmount = await stableSwapContract.get_dy(...args)\n\n      return CurrencyAmount.fromRawAmount(estimatedCurrency, estimatedAmount)\n    },\n  )\n}\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport default function useStableTradeExactIn(\n  currencyAmountIn?: CurrencyAmount<Currency>,\n  currencyOut?: Currency,\n): StableTrade | null {\n  const { stableSwapContract, stableSwapConfig } = useContext(StableConfigContext)\n\n  const currencyAmountInQuotient = currencyAmountIn?.quotient?.toString()\n\n  const { data: currencyAmountOut } = useEstimatedAmount({\n    estimatedCurrency: currencyOut,\n    quotient: currencyAmountInQuotient,\n    stableSwapContract,\n    stableSwapConfig,\n  })\n\n  return useStableTradeResponse({\n    currencyAmountIn,\n    currencyAmountOut,\n    stableSwapConfig,\n    tradeType: TradeType.EXACT_INPUT,\n  })\n}\n","import { useTranslation } from 'contexts/Localization'\nimport { Currency, CurrencyAmount, Fraction, JSBI, Percent, Price, Token } from '@pancakeswap/sdk'\nimport { BIG_INT_ZERO } from 'config/constants/exchange'\n\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\n\nimport { PairState } from 'hooks/usePairs'\n\nimport useTotalSupply from 'hooks/useTotalSupply'\nimport { useContext, useMemo } from 'react'\n\nimport tryParseAmount from '@pancakeswap/utils/tryParseAmount'\nimport { Field } from 'state/mint/actions'\nimport { useCurrencyBalances } from 'state/wallet/hooks'\nimport { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\nimport { useEstimatedAmount } from 'views/Swap/StableSwap/hooks/useStableTradeExactIn'\nimport useSWR from 'swr'\nimport { useMintState } from 'state/mint/hooks'\n\nexport interface StablePair {\n  liquidityToken: Token | null\n  tokenAmounts: any[]\n  token0: Currency\n  token1: Currency\n  priceOf: (token: Currency) => CurrencyAmount<Currency> | Price<Currency, Currency> | Fraction\n  token0Price: () => CurrencyAmount<Currency> | Price<Currency, Currency> | Fraction\n  token1Price: () => CurrencyAmount<Currency> | Price<Currency, Currency> | Fraction\n  // NOTE: Stable Tokens don't need this\n  reserve1: CurrencyAmount<Currency>\n  reserve0: CurrencyAmount<Currency>\n  getLiquidityValue: () => CurrencyAmount<Currency>\n}\n\ninterface UseStablePairResponse {\n  pairState: PairState\n  pair: StablePair\n}\n\nexport function useStablePair(currencyA: Token, currencyB: Token): UseStablePairResponse {\n  const { stableSwapConfig, stableSwapContract } = useContext(StableConfigContext)\n\n  const currencyAAmountQuotient = tryParseAmount('1', currencyA)?.quotient\n\n  const { data: estimatedToken1Amount } = useEstimatedAmount({\n    estimatedCurrency: currencyB,\n    quotient: currencyAAmountQuotient?.toString(),\n    stableSwapContract,\n    stableSwapConfig,\n  })\n\n  const pair = useMemo(() => {\n    const isPriceValid = currencyAAmountQuotient && estimatedToken1Amount\n\n    const ZERO_AMOUNT = CurrencyAmount.fromRawAmount(currencyB, '0')\n\n    const token0Price = isPriceValid\n      ? new Price(currencyA, currencyB, currencyAAmountQuotient, estimatedToken1Amount.quotient)\n      : ZERO_AMOUNT\n\n    return {\n      liquidityToken: stableSwapConfig?.liquidityToken || null,\n      tokenAmounts: [],\n      token0: currencyA,\n      token1: currencyB,\n      priceOf: (token) =>\n        isPriceValid ? (token?.address === currencyA?.address ? token0Price : token0Price.invert()) : ZERO_AMOUNT,\n      token0Price: () => token0Price,\n      token1Price: () => token0Price.invert(),\n      // NOTE: Stable Tokens don't need this\n      reserve1: ZERO_AMOUNT,\n      reserve0: ZERO_AMOUNT,\n      getLiquidityValue: () => ZERO_AMOUNT,\n    }\n  }, [stableSwapConfig?.liquidityToken, currencyA, currencyB, currencyAAmountQuotient, estimatedToken1Amount])\n\n  if (!stableSwapConfig) {\n    return { pairState: PairState.NOT_EXISTS, pair: undefined }\n  }\n\n  return { pairState: PairState.EXISTS, pair }\n}\n\nfunction useMintedStabelLP({\n  stableSwapInfoContract,\n  stableSwapConfig,\n  stableSwapAddress,\n  currencyInput,\n  currencyInputAmount,\n  currencyOutputAmount,\n}) {\n  const quotient0Str = currencyInputAmount?.toString()\n  const quotient1Str = currencyOutputAmount?.toString()\n\n  const isValid = !!stableSwapAddress && !!quotient0Str && !!quotient1Str\n\n  return useSWR(\n    isValid ? ['get_add_liquidity_mint_amount', stableSwapAddress, quotient0Str, quotient1Str] : null,\n    async () => {\n      const isToken0 = stableSwapConfig?.token0?.address === currencyInput?.address\n\n      const amounts = isToken0 ? [quotient0Str, quotient1Str] : [quotient1Str, quotient0Str]\n\n      return stableSwapInfoContract.get_add_liquidity_mint_amount(stableSwapAddress, amounts)\n    },\n  )\n}\n\nexport function useStableLPDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: StablePair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\n  price?: Price<Currency, Currency>\n  noLiquidity?: boolean\n  liquidityMinted?: CurrencyAmount<Token>\n  poolTokenPercentage?: Percent\n  error?: string\n  addError?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB],\n  )\n\n  // pair\n  const { pairState, pair } = useStablePair(currencyA?.wrapped, currencyB?.wrapped)\n\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.quotient, BIG_INT_ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [currencyA, currencyB])\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseAmount(\n    typedValue,\n    currencies[independentField],\n  )\n\n  const dependentAmount: CurrencyAmount<Currency> | undefined = tryParseAmount(\n    otherTypedValue,\n    currencies[dependentField],\n  )\n\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n    }),\n    [dependentAmount, independentAmount, independentField],\n  )\n\n  const { stableSwapConfig, stableSwapContract, stableSwapInfoContract } = useContext(StableConfigContext)\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  const currencyAAmountQuotient = currencyAAmount?.quotient\n  const currencyBAmountQuotient = currencyBAmount?.quotient\n\n  const { data: estimatedOutputAmount } = useEstimatedAmount({\n    estimatedCurrency: currencyAAmountQuotient ? currencyB : currencyA,\n    quotient: currencyAAmountQuotient ? currencyAAmountQuotient?.toString() : currencyBAmountQuotient?.toString(),\n    stableSwapConfig,\n    stableSwapContract,\n  })\n\n  const price = useMemo(() => {\n    const isEstimatedOutputAmountZero = estimatedOutputAmount?.equalTo(0)\n\n    if ((currencyAAmountQuotient || currencyBAmountQuotient) && estimatedOutputAmount && !isEstimatedOutputAmountZero) {\n      return currencyAAmountQuotient\n        ? new Price(currencyA, currencyB, currencyAAmountQuotient, estimatedOutputAmount.quotient)\n        : new Price(currencyA, currencyB, estimatedOutputAmount.quotient, currencyBAmountQuotient)\n    }\n    return undefined\n  }, [estimatedOutputAmount, currencyA, currencyB, currencyBAmountQuotient, currencyAAmountQuotient])\n\n  const { data: lpMinted } = useMintedStabelLP({\n    stableSwapAddress: stableSwapConfig?.stableSwapAddress,\n    stableSwapInfoContract,\n    stableSwapConfig,\n    currencyInput: currencyAAmountQuotient ? currencyA : currencyB,\n    currencyInputAmount: currencyAAmountQuotient || currencyBAmountQuotient,\n    currencyOutputAmount: currencyAAmountQuotient ? currencyBAmountQuotient : currencyAAmountQuotient,\n  })\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    if (pair?.liquidityToken && totalSupply && lpMinted) {\n      try {\n        return CurrencyAmount.fromRawAmount(pair?.liquidityToken, lpMinted?.toString())\n      } catch (error) {\n        console.error(error)\n        return undefined\n      }\n    }\n    return undefined\n  }, [pair?.liquidityToken, totalSupply, lpMinted])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  let addError: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? t('Choose a valid pair')\n  }\n\n  if (\n    currencyAAmount &&\n    currencyBAmount &&\n    currencyBalances?.[Field.CURRENCY_A]?.equalTo(0) &&\n    currencyBalances?.[Field.CURRENCY_B]?.equalTo(0)\n  ) {\n    error = error ?? t('No token balance')\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    addError = t('Enter an amount')\n  }\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    addError = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_A]?.symbol })\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    addError = t('Insufficient %symbol% balance', { symbol: currencies[Field.CURRENCY_B]?.symbol })\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n    addError,\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Token } from '@pancakeswap/sdk'\n\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { Field } from 'state/burn/actions'\nimport { useTokenBalances } from 'state/wallet/hooks'\nimport { useBurnState } from 'state/burn/hooks'\nimport { StablePair, useStablePair } from 'views/AddLiquidity/AddStableLiquidity/hooks/useStableLPDerivedMintInfo'\nimport { StableConfigContext } from 'views/Swap/StableSwap/hooks/useStableConfig'\nimport useSWR from 'swr'\nimport { useContext } from 'react'\n\nexport function useGetRemovedTokenAmounts({ lpAmount }) {\n  const { stableSwapInfoContract, stableSwapConfig } = useContext(StableConfigContext)\n\n  const { data } = useSWR(\n    !lpAmount ? null : ['stableSwapInfoContract', 'calc_coins_amount', stableSwapConfig?.stableSwapAddress, lpAmount],\n    async () => {\n      return stableSwapInfoContract.calc_coins_amount(stableSwapConfig?.stableSwapAddress, lpAmount)\n    },\n  )\n\n  if (!Array.isArray(data)) return []\n\n  const tokenAAmount = CurrencyAmount.fromRawAmount(stableSwapConfig?.token0, data[0].toString())\n  const tokenBAmount = CurrencyAmount.fromRawAmount(stableSwapConfig?.token1, data[1].toString())\n\n  return [tokenAAmount, tokenBAmount]\n}\n\nexport function useStableDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  pair?: StablePair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  }\n  error?: string\n  tokenToReceive?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  const { t } = useTranslation()\n\n  // pair + totalsupply\n  const { pair } = useStablePair(currencyA?.wrapped, currencyB?.wrapped)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | CurrencyAmount<Token> = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n\n  const liquidityToRemove =\n    userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n      ? CurrencyAmount.fromRawAmount(userLiquidity.currency, percentToRemove.multiply(userLiquidity.quotient).quotient)\n      : undefined\n\n  const [amountA, amountB] = useGetRemovedTokenAmounts({\n    lpAmount: liquidityToRemove?.quotient?.toString(),\n  })\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Token>\n    [Field.CURRENCY_B]?: CurrencyAmount<Token>\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: liquidityToRemove,\n    [Field.CURRENCY_A]: amountA,\n    [Field.CURRENCY_B]: amountB,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY]) {\n    error = error ?? t('Enter an amount')\n  }\n\n  return { pair, parsedAmounts, error }\n}\n","import { useContract } from 'hooks/useContract'\nimport stableSwapABI from 'config/abi/stableSwap.json'\nimport stableSwapInfoABI from 'config/abi/infoStableSwap.json'\nimport stableLPABI from 'config/abi/stableLP.json'\nimport { Currency, CurrencyAmount, Token } from '@pancakeswap/sdk'\nimport { useTokenBalancesWithLoadingIndicator } from 'state/wallet/hooks'\nimport { createContext, useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useSWRImmutable from 'swr/immutable'\nimport { getStableConfig } from '@pancakeswap/farms/constants'\nimport { deserializeToken } from '@pancakeswap/tokens'\n\nexport function useStableFarms() {\n  const { chainId } = useActiveWeb3React()\n\n  const { data: stableFarms = [] } = useSWRImmutable(chainId && ['stable-farms', chainId], async () => {\n    const farms = await getStableConfig(chainId)\n\n    return farms.map(({ token, quoteToken, lpAddress, ...rest }) => ({\n      ...rest,\n      liquidityToken: new Token(chainId, lpAddress, 18, 'Stable-LP', 'Pancake StableSwap LPs'),\n      token0: deserializeToken(token),\n      token1: deserializeToken(quoteToken),\n    }))\n  })\n\n  return stableFarms\n}\n\nfunction useFindStablePair({ tokenA, tokenB }) {\n  const stableFarms = useStableFarms()\n\n  return useMemo(\n    () =>\n      stableFarms.find((stablePair) => {\n        return (\n          tokenA &&\n          tokenB &&\n          ((stablePair?.token0?.equals(tokenA) && stablePair?.token1?.equals(tokenB)) ||\n            (stablePair?.token1?.equals(tokenA) && stablePair?.token0?.equals(tokenB)))\n        )\n      }),\n    [tokenA, tokenB, stableFarms],\n  )\n}\n\nexport function useLPTokensWithBalanceByAccount(account) {\n  const lpTokens = useStableFarms()\n\n  const [stableBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    lpTokens.map(({ liquidityToken }) => liquidityToken),\n  )\n\n  const lpTokensWithBalance = useMemo(\n    () => lpTokens.filter(({ liquidityToken }) => stableBalances[liquidityToken.address]?.greaterThan('0')),\n    [lpTokens, stableBalances],\n  )\n\n  return lpTokensWithBalance.map((lpToken) => ({\n    ...lpToken,\n    tokenAmounts: [],\n    reserve0: CurrencyAmount.fromRawAmount(lpToken?.token0, '0'),\n    reserve1: CurrencyAmount.fromRawAmount(lpToken?.token1, '0'),\n    getLiquidityValue: () => CurrencyAmount.fromRawAmount(lpToken?.token0, '0'),\n  }))\n}\n\nexport const StableConfigContext = createContext(null)\n\nexport default function useStableConfig({ tokenA, tokenB }: { tokenA: Currency; tokenB: Currency }) {\n  const stablePair = useFindStablePair({ tokenA, tokenB })\n  const stableSwapContract = useContract(stablePair?.stableSwapAddress, stableSwapABI)\n  const stableSwapInfoContract = useContract(stablePair?.infoStableSwapAddress, stableSwapInfoABI)\n  const stableSwapLPContract = useContract(stablePair?.liquidityToken.address, stableLPABI)\n\n  return useMemo(\n    () => ({\n      stableSwapConfig: stablePair,\n      stableSwapContract,\n      stableSwapInfoContract,\n      stableSwapLPContract,\n    }),\n    [stablePair, stableSwapContract, stableSwapInfoContract, stableSwapLPContract],\n  )\n}\n"],"names":["_templateObject","data","_tagged_template_literal","CardBody","styled","componentId","space","defaultProps","p","props","_jsx","Svg","_object_spread_props","_object_spread","viewBox","children","d","TooltipText","Text","withConfig","param","ref","theme","decorationColor","concat","colors","textSubtle","FixedHeightRow","RowBetween","withLPValuesFactory","useLPValuesHook","hookArgFn","Component","useWeb3React","account","currency0","showUnwrapped","pair","token0","unwrappedToken","currency1","token1","userPoolBalance","useTokenBalance","undefined","liquidityToken","totalPoolTokens","useTotalSupply","poolTokenPercentage","JSBI","quotient","Percent","usePoolTokenPercentage","args","useMemo","token0Deposited","token1Deposited","totalUSDValue","token0Price","useBUSDPrice","token1Price","token0USDValue","multiplyPriceByAmount","parseFloat","toSignificant","token1USDValue","useTotalUSDValue","withLPValues","getLiquidityValue","withStableLPValues","useGetRemovedTokenAmounts","lpAmount","toString","FullPositionCard","isStableLP","useContext","StableConfigContext","useTranslation","t","poolData","useLPApr","useTooltip","placement","targetRef","tooltip","tooltipVisible","useState","showMore","setShowMore","Card","Flex","justifyContent","role","onClick","flexDirection","alignItems","mb","DoubleCurrencyLogo","size","bold","ml","symbol","Dots","color","fontSize","Number","isFinite","small","toLocaleString","minimumFractionDigits","maximumFractionDigits","ChevronUpIcon","ChevronDownIcon","AutoColumn","gap","style","padding","RowFixed","CurrencyLogo","currency","asset","formatAmount","lpApr7d","toFixed","BIG_INT_ZERO","Button","as","NextLinkFromReactRouter","to","currencyId","variant","width","startIcon","AddIcon","MinimalPositionCard","margin","StableFullPositionCardContainer","StableFullPositionCard","useStableConfig","tokenA","tokenB","stableSwapConfig","config","value","token","useSingleCallResult","contract","useTokenContract","isToken","address","totalSupplyStr","result","CurrencyAmount","useBurnState","useSelector","state","burn","useDerivedBurnInfo","currencyA","currencyB","removalCheckedA","removalCheckedB","zapMode","tokens","useActiveWeb3React","chainId","independentField","typedValue","usePair","relevantTokenBalances","useTokenBalances","userLiquidity","wrappedCurrency","Field","totalSupply","liquidityValueA","liquidityValueB","liquidityValues","percentToRemove","independentAmount","tryParseAmount","greaterThan","liquidityValue","error","liquidityToRemove","multiply","tokenToReceive","amountA","amountB","tokenAmountToZap","estimateZapOutAmount","getOutputAmount","parsedAmounts","useBurnActionHandlers","dispatch","useAppDispatch","onUserInput","useCallback","field","typeInput","useMintState","mint","useMintActionHandlers","noLiquidity","onFieldAInput","onFieldBInput","useDerivedMintInfo","currencyBalances","addError","otherTypedValue","dependentField","currencies","pairState","PairState","Boolean","reserve0","reserve1","balances","useCurrencyBalances","dependentAmount","wrappedIndependentAmount","wrapped","dependentCurrency","dependentTokenAmount","priceOf","quote","isNative","price","currencyAAmount","currencyBAmount","Price","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","console","add","equalTo","lessThan","MAX_ZAP_REVERSE_RATIO","getMaxZapSwapAmount","tokenZap","involvesToken","reserveOf","useZapIn","wrappedParsedAmounts","canZap","zapTokenCheckedA","zapTokenCheckedB","maxAmounts","inputBlurOnce","setInputBlurOnce","previousBlur","usePreviousValue","triedAutoReduce","setTriedAutoReduce","_dependentAmount","isDependentAmountGreaterThanMaxAmount","zapContract","useZapContract","rebalancing","singleTokenToZapField","singleTokenToZapAmount","noNeedZap","singleZapEstimate","useSWRContract","methodName","params","onError","err","rebalancingZapEstimate","zapInEstimated","swapAmountIn","swapAmountOut","isToken0Sold","sellToken0","swapTokenOut","rebalancingSellToken0","equals","swapTokenField","swapOutTokenField","swapTokens","zapInEstimatedError","zapInEstimatedStatus","status","priceImpact","tokenAmountIn","tokenAmountOut","midPrice","computePriceImpact","priceSeverity","warningSeverity","maxZappableAmount","token0AmountIn","token1AmountIn","maxSwapAmount","getInputAmount","newPair","guessMaxZappableAmount","convertToMaxZappable","formatInput","formatUnits","decimals","zappedTokenAmountA","subtract","zappedTokenAmountB","swapTokenAmountTooLow","MINIMUM_LIQUIDITY","swapOutAmountTooLow","gasOverhead","inputAmount","gasCostInInputTokens","gasPrice","useGasPrice","native","useNativeCurrency","requiredGas","BigNumber","mul","requiredGasAsCurrencyAmount","inputIsBNB","useTradeExactIn","outputAmount","useZapInGasOverhead","useEffect","onInputBlurOnce","zapInEstimating","FetchStatus","amount","options","notation","displayThreshold","tokenPrecision","isInteger","match","precision","format","repeat","amountWithPrecision","numeral","toUpperCase","useEstimatedAmount","estimatedCurrency","stableSwapContract","useSWR","stableSwapAddress","isToken0","estimatedAmount","get_dy","useStablePair","currencyAAmountQuotient","isPriceValid","estimatedToken1Amount","ZERO_AMOUNT","tokenAmounts","invert","useStableLPDerivedMintInfo","stableSwapInfoContract","currencyBAmountQuotient","isEstimatedOutputAmountZero","estimatedOutputAmount","useMintedStabelLP","currencyInput","currencyInputAmount","currencyOutputAmount","quotient0Str","quotient1Str","isValid","amounts","get_add_liquidity_mint_amount","lpMinted","calc_coins_amount","Array","isArray","useStableDerivedBurnInfo","useStableFarms","stableFarms","useSWRImmutable","getStableConfig","map","quoteToken","lpAddress","rest","Token","deserializeToken","useLPTokensWithBalanceByAccount","lpTokens","stableBalances","useTokenBalancesWithLoadingIndicator","lpTokensWithBalance","filter","lpToken","createContext","stablePair","find","useFindStablePair","useContract","stableSwapABI","infoStableSwapAddress","stableSwapInfoABI","stableSwapLPContract","stableLPABI"],"sourceRoot":""}