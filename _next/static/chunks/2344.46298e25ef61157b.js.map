{"version":3,"file":"static/chunks/2344.46298e25ef61157b.js","mappings":"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","sources":["webpack://_N_E/./packages/uikit/src/components/Card/StyledCard.tsx","webpack://_N_E/./packages/uikit/src/components/Card/Card.tsx","webpack://_N_E/./src/hooks/useSubgraphHealth.ts","webpack://_N_E/./src/components/SubgraphHealthIndicator/index.tsx"],"sourcesContent":["import _tagged_template_literal from \"@swc/helpers/src/_tagged_template_literal.mjs\";\nfunction _templateObject() {\n    var data = _tagged_template_literal([\n        \"\\n  0% {\\n    background-position: 50% 0%;\\n  }\\n  50% {\\n    background-position: 50% 100%;\\n  }\\n  100% {\\n    background-position: 50% 0%;\\n  }\\n\"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = _tagged_template_literal([\n        \"\\n      animation: \",\n        \" 3s ease infinite;\\n      background-size: 400% 400%;\\n    \"\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    var data = _tagged_template_literal([\n        \"\\n  background: \",\n        \";\\n  border-radius: \",\n        \";\\n  color: \",\n        \";\\n  overflow: hidden;\\n  position: relative;\\n\\n  \",\n        \"\\n\\n  padding: 1px 1px 3px 1px;\\n\\n  \",\n        \"\\n\"\n    ]);\n    _templateObject2 = function _templateObject2() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    var data = _tagged_template_literal([\n        \"\\n  width: 100%;\\n  height: 100%;\\n  overflow: \",\n        \";\\n  background: \",\n        \";\\n  border-radius: \",\n        \";\\n\"\n    ]);\n    _templateObject3 = function _templateObject3() {\n        return data;\n    };\n    return data;\n}\nimport styled, { keyframes, css } from \"styled-components\";\nimport { space } from \"styled-system\";\nimport { Box } from \"../Box\";\nvar PromotedGradient = keyframes(_templateObject());\n/**\n * Priority: Warning --> Success --> Active\n */ var getBorderColor = function(param) {\n    var isActive = param.isActive, isSuccess = param.isSuccess, isWarning = param.isWarning, borderBackground = param.borderBackground, theme = param.theme;\n    if (borderBackground) {\n        return borderBackground;\n    }\n    if (isWarning) {\n        return theme.colors.warning;\n    }\n    if (isSuccess) {\n        return theme.colors.success;\n    }\n    if (isActive) {\n        return \"linear-gradient(180deg, \".concat(theme.colors.primaryBright, \", \").concat(theme.colors.secondary, \")\");\n    }\n    return theme.colors.cardBorder;\n};\nexport var StyledCard = styled.div.withConfig({\n    componentId: \"sc-eecfaa46-0\"\n})(_templateObject2(), getBorderColor, function(param) {\n    var theme = param.theme;\n    return theme.radii.card;\n}, function(param) {\n    var theme = param.theme, isDisabled = param.isDisabled;\n    return theme.colors[isDisabled ? \"textDisabled\" : \"text\"];\n}, function(param) {\n    var isActive = param.isActive;\n    return isActive && css(_templateObject1(), PromotedGradient);\n}, space);\nexport var StyledCardInner = styled(Box).withConfig({\n    componentId: \"sc-eecfaa46-1\"\n})(_templateObject3(), function(param) {\n    var hasCustomBorder = param.hasCustomBorder;\n    return hasCustomBorder ? \"initial\" : \"inherit\";\n}, function(param) {\n    var theme = param.theme, background = param.background;\n    return background !== null && background !== void 0 ? background : theme.card.background;\n}, function(param) {\n    var theme = param.theme;\n    return theme.radii.card;\n});\nStyledCard.defaultProps = {\n    isActive: false,\n    isSuccess: false,\n    isWarning: false,\n    isDisabled: false\n};\n","import _object_spread from \"@swc/helpers/src/_object_spread.mjs\";\nimport _object_spread_props from \"@swc/helpers/src/_object_spread_props.mjs\";\nimport _object_without_properties from \"@swc/helpers/src/_object_without_properties.mjs\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { StyledCard, StyledCardInner } from \"./StyledCard\";\nvar Card = function(_param) {\n    var ribbon = _param.ribbon, children = _param.children, background = _param.background, props = _object_without_properties(_param, [\n        \"ribbon\",\n        \"children\",\n        \"background\"\n    ]);\n    return /*#__PURE__*/ _jsx(StyledCard, _object_spread_props(_object_spread({}, props), {\n        children: /*#__PURE__*/ _jsxs(StyledCardInner, {\n            background: background,\n            hasCustomBorder: !!props.borderBackground,\n            children: [\n                ribbon,\n                children\n            ]\n        })\n    }));\n};\nexport default Card;\n","import { useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { bscRpcProvider } from 'utils/providers'\nimport { GRAPH_HEALTH } from 'config/constants/endpoints'\nimport { useSlowRefreshEffect } from './useRefreshEffect'\n\nexport enum SubgraphStatus {\n  OK,\n  WARNING,\n  NOT_OK,\n  UNKNOWN,\n}\n\nexport type SubgraphHealthState = {\n  status: SubgraphStatus\n  currentBlock: number\n  chainHeadBlock: number\n  latestBlock: number\n  blockDifference: number\n}\n\nconst NOT_OK_BLOCK_DIFFERENCE = 200 // ~15 minutes delay\nconst WARNING_BLOCK_DIFFERENCE = 50 // ~2.5 minute delay\n\nconst useSubgraphHealth = (subgraphName: string) => {\n  const [sgHealth, setSgHealth] = useState<SubgraphHealthState>({\n    status: SubgraphStatus.UNKNOWN,\n    currentBlock: 0,\n    chainHeadBlock: 0,\n    latestBlock: 0,\n    blockDifference: 0,\n  })\n\n  useSlowRefreshEffect(\n    (currentBlockNumber) => {\n      const getSubgraphHealth = async () => {\n        try {\n          const [{ indexingStatusForCurrentVersion }, currentBlock] = await Promise.all([\n            request(\n              GRAPH_HEALTH,\n              gql`\n            query getNftMarketSubgraphHealth {\n              indexingStatusForCurrentVersion(subgraphName: \"${subgraphName}\") {\n                synced\n                health\n                chains {\n                  chainHeadBlock {\n                    number\n                  }\n                  latestBlock {\n                    number\n                  }\n                }\n              }\n            }\n          `,\n            ),\n            currentBlockNumber ? Promise.resolve(currentBlockNumber) : bscRpcProvider.getBlockNumber(),\n          ])\n\n          const isHealthy = indexingStatusForCurrentVersion.health === 'healthy'\n          const chainHeadBlock = parseInt(indexingStatusForCurrentVersion.chains[0].chainHeadBlock.number)\n          const latestBlock = parseInt(indexingStatusForCurrentVersion.chains[0].latestBlock.number)\n          const blockDifference = currentBlock - latestBlock\n          // Sometimes subgraph might report old block as chainHeadBlock, so its important to compare\n          // it with block retrieved from simpleRpcProvider.getBlockNumber()\n          const chainHeadBlockDifference = currentBlock - chainHeadBlock\n          if (\n            !isHealthy ||\n            blockDifference > NOT_OK_BLOCK_DIFFERENCE ||\n            chainHeadBlockDifference > NOT_OK_BLOCK_DIFFERENCE\n          ) {\n            setSgHealth({ status: SubgraphStatus.NOT_OK, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          } else if (\n            blockDifference > WARNING_BLOCK_DIFFERENCE ||\n            chainHeadBlockDifference > WARNING_BLOCK_DIFFERENCE\n          ) {\n            setSgHealth({ status: SubgraphStatus.WARNING, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          } else {\n            setSgHealth({ status: SubgraphStatus.OK, currentBlock, chainHeadBlock, latestBlock, blockDifference })\n          }\n        } catch (error) {\n          console.error(`Failed to perform health check for ${subgraphName} subgraph`, error)\n        }\n      }\n      getSubgraphHealth()\n    },\n    [subgraphName],\n  )\n\n  return sgHealth\n}\n\nexport default useSubgraphHealth\n","import { BSC_BLOCK_TIME } from 'config'\nimport { TranslateFunction } from '@pancakeswap/localization'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Card, Flex, Box, InfoIcon, Text, useTooltip } from '@pancakeswap/uikit'\nimport { useSubgraphHealthIndicatorManager } from 'state/user/hooks'\nimport useSubgraphHealth, { SubgraphStatus } from 'hooks/useSubgraphHealth'\n\nconst StyledCard = styled(Card)`\n  border-radius: 8px;\n  > div {\n    border-radius: 8px;\n  }\n  user-select: none;\n`\n\nconst IndicatorWrapper = styled(Flex)`\n  gap: 7px;\n`\n\nconst Dot = styled(Box)<{ $color: string }>`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: ${({ $color, theme }) => theme.colors[$color]};\n`\n\ninterface CustomDescriptions {\n  delayed: string\n  slow: string\n  healthy: string\n}\n\nconst indicator = (t: TranslateFunction, customDescriptions?: CustomDescriptions) =>\n  ({\n    delayed: {\n      label: t('Delayed'),\n      color: 'failure',\n      description:\n        customDescriptions?.delayed ??\n        t(\n          'Subgraph is currently experiencing delays due to BSC issues. Performance may suffer until subgraph is restored.',\n        ),\n    },\n    slow: {\n      label: t('Slight delay'),\n      color: 'warning',\n      description:\n        customDescriptions?.slow ??\n        t(\n          'Subgraph is currently experiencing delays due to BSC issues. Performance may suffer until subgraph is restored.',\n        ),\n    },\n    healthy: {\n      label: t('Fast'),\n      color: 'success',\n      description: customDescriptions?.healthy ?? t('No issues with the subgraph.'),\n    },\n  } as const)\n\ntype Indicator = keyof ReturnType<typeof indicator>\n\nconst getIndicator = (sgStatus: SubgraphStatus): Indicator => {\n  if (sgStatus === SubgraphStatus.NOT_OK) {\n    return 'delayed'\n  }\n\n  if (sgStatus === SubgraphStatus.WARNING) {\n    return 'slow'\n  }\n\n  return 'healthy'\n}\n\nexport interface BlockResponse {\n  blocks: {\n    number: string\n  }[]\n}\n\nconst SubgraphHealthIndicator: React.FC<\n  React.PropsWithChildren<{\n    subgraphName: string\n    inline?: boolean\n    customDescriptions?: CustomDescriptions\n    obeyGlobalSetting?: boolean\n  }>\n> = ({ subgraphName, inline, customDescriptions, obeyGlobalSetting = true }) => {\n  const { t } = useTranslation()\n  const { status, currentBlock, blockDifference, latestBlock } = useSubgraphHealth(subgraphName)\n  const [alwaysShowIndicator] = useSubgraphHealthIndicatorManager()\n  const forceIndicatorDisplay = status === SubgraphStatus.WARNING || status === SubgraphStatus.NOT_OK\n  const showIndicator = (obeyGlobalSetting && alwaysShowIndicator) || forceIndicatorDisplay\n\n  const indicatorProps = indicator(t, customDescriptions)\n\n  const secondRemainingBlockSync = blockDifference * BSC_BLOCK_TIME\n\n  const indicatorValue = getIndicator(status)\n\n  const current = indicatorProps[indicatorValue]\n\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <TooltipContent\n      currentBlock={currentBlock}\n      secondRemainingBlockSync={secondRemainingBlockSync}\n      blockNumberFromSubgraph={latestBlock}\n      {...current}\n    />,\n    {\n      placement: 'top',\n    },\n  )\n\n  if (!latestBlock || !currentBlock || !showIndicator) {\n    return null\n  }\n\n  if (inline) {\n    return (\n      <IndicatorWrapper alignItems=\"center\" justifyContent=\"flex-end\" ref={targetRef}>\n        <Dot $color={current.color} />\n        <Text>{current.label}</Text>\n        <InfoIcon />\n        {tooltipVisible && tooltip}\n      </IndicatorWrapper>\n    )\n  }\n\n  return (\n    <Box\n      position=\"fixed\"\n      bottom=\"calc(55px + env(safe-area-inset-bottom))\"\n      right=\"5%\"\n      ref={targetRef}\n      data-test=\"subgraph-health-indicator\"\n    >\n      {tooltipVisible && tooltip}\n      <StyledCard>\n        <IndicatorWrapper alignItems=\"center\" p=\"10px\">\n          <Dot $color={current.color} />\n          <Text>{current.label}</Text>\n          <InfoIcon />\n        </IndicatorWrapper>\n      </StyledCard>\n    </Box>\n  )\n}\n\nconst TooltipContent = ({\n  color,\n  label,\n  description,\n  currentBlock,\n  secondRemainingBlockSync,\n  blockNumberFromSubgraph,\n}) => {\n  const { t } = useTranslation()\n  return (\n    <Box>\n      <IndicatorWrapper pb=\"10px\">\n        <Dot $color={color} />\n        <Text>{label}</Text>\n      </IndicatorWrapper>\n      <Text pb=\"24px\">{description}</Text>\n      <Text>\n        <strong>{t('Chain Head Block')}:</strong> {currentBlock}\n      </Text>\n      <Text>\n        <strong>{t('Latest Subgraph Block')}:</strong> {blockNumberFromSubgraph}\n      </Text>\n      <Text>\n        <strong>{t('Delay')}:</strong> {currentBlock - blockNumberFromSubgraph} ({secondRemainingBlockSync}s)\n      </Text>\n    </Box>\n  )\n}\n\nexport default SubgraphHealthIndicator\n"],"names":["_templateObject","data","_tagged_template_literal","_templateObject1","_templateObject2","_templateObject3","PromotedGradient","keyframes","StyledCard","styled","componentId","param","isActive","isSuccess","isWarning","borderBackground","theme","colors","warning","success","concat","primaryBright","secondary","cardBorder","radii","card","isDisabled","css","space","StyledCardInner","Box","withConfig","hasCustomBorder","background","defaultProps","_param","ribbon","children","props","_object_without_properties","_jsx","_object_spread_props","_object_spread","_jsxs","SubgraphStatus","OK","WARNING","NOT_OK","UNKNOWN","subgraphName","useState","status","currentBlock","chainHeadBlock","latestBlock","blockDifference","sgHealth","setSgHealth","useSlowRefreshEffect","currentBlockNumber","getSubgraphHealth","indexingStatusForCurrentVersion","isHealthy","chainHeadBlockDifference","error","Promise","all","request","GRAPH_HEALTH","gql","resolve","bscRpcProvider","health","parseInt","chains","number","console","customDescriptions","Card","IndicatorWrapper","Flex","Dot","$color","indicator","t","delayed","label","color","description","slow","healthy","TooltipContent","secondRemainingBlockSync","blockNumberFromSubgraph","useTranslation","pb","Text","strong","sgStatus","inline","obeyGlobalSetting","useSubgraphHealth","alwaysShowIndicator","useSubgraphHealthIndicatorManager","forceIndicatorDisplay","showIndicator","indicatorProps","BSC_BLOCK_TIME","current","useTooltip","placement","targetRef","tooltipVisible","tooltip","alignItems","justifyContent","ref","InfoIcon","position","bottom","right","data-test","p"],"sourceRoot":""}